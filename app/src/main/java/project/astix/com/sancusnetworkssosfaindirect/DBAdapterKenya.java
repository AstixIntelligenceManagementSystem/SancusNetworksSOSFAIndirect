package project.astix.com.sancusnetworkssosfaindirect;

import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.regex.Pattern;


import android.content.ContentValues;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.text.TextUtils;
import android.util.Log;

import com.astix.Common.CommonInfo;

public class DBAdapterKenya
{
    SharedPreferences sPref,sPrefAttandance;
	private Cursor cursor;
	public static final String KEY_PHID = "phID";

	private static final String TAG = "DBAdapterKenya";
	private boolean isDBOpenflag = false;



    private static final String TABLE_tblMerchandisingInstructionDetails_Define = "tblMerchandisingInstructionDetails";
    private static final String TABLE_tblMerchandisingInstructionDetails_Defintion = "create table tblMerchandisingInstructionDetails(StoreID text null,OrderPDAID text null,PhotoName text null,InstructionText text null,ClickedDateTime text null,Sstat integer null);";





    private static final String DATABASE_TABLE_tblProductListLastVisitStockOrOrderMstr= "tblProductListLastVisitStockOrOrderMstr";
    private static final String DATABASE_CREATE_TABLEtblProductListLastVisitStockOrOrderMstr = "create table tblProductListLastVisitStockOrOrderMstr (StoreID text null,PrdID text null);";


    private static final String TABLE_tblAttandanceDetails="tblAttandanceDetails";
    private static final String DATABASE_CREATE_TABLE_tblAttandanceDetails="create table tblAttandanceDetails(AttandanceTime text null," +
            "PersonNodeID text null, PersonNodeType text null," +
            "OptionID text null,OptionDesc text null,ReasonID text null,ReasonDesc text null,Comment text null, Address text null,PinCode text null, City text null, State text null," +
            "fnLati text null,fnLongi text null,fnAccuracy text null," +
            "flgLocNotFound text null,fnAccurateProvider text null,AllProvidersLocation text null,fnAddress text null," +
            "GpsLat text null, GpsLong text null, GpsAccuracy text null, GpsAddress text null, NetwLat text null, " +
            "NetwLong text null, NetwAccuracy text null, NetwAddress text null, FusedLat text null, FusedLong text null, " +
            "FusedAccuracy text null, FusedAddress text null,FusedLocationLatitudeWithFirstAttempt text null," +
            "FusedLocationLongitudeWithFirstAttempt text null,FusedLocationAccuracyWithFirstAttempt text null," +
            "Sstat int null,flgLocationServicesOnOff int null,flgGPSOnOff int null,flgNetworkOnOff int null," +
            "flgFusedOnOff int null,flgInternetOnOffWhileLocationTracking int null,flgRestart int null," +
            "MapAddress text null,MapCity text null,MapPinCode text null,MapState text null,CityId text null,StateId text null,DistributorId text null,DistributorNodeType text null,DistributorName text null,ServerTimeValidation text null,SubmitTime text null,ReasonForLate text null,OtherReasonForLate text null);";



    private static final String DATABASE_TABLE_AlertNearestSchmApld = "tblProductAlertNearestSchmApld";
    private static final String DATABASE_CREATE_TABLE_AlertNearestSchmApld = "create table tblProductAlertNearestSchmApld (RowID text null,ProductID text null,SchemeID text null,SchemeSlabID text null,SlabSubBucketType text null,SlabSubBucketMin text null,SlabSubBucketMax text null);";


    private static final String DATABASE_TABLE_tblLastOutstanding = "tblLastOutstanding";
    private static final String DATABASE_CREATE_TABLE_tblLastOutstanding = "create table tblLastOutstanding(StoreID text null,Outstanding real null,AmtOverdue real null);";

    private static final String DATABASE_TABLE_tblInvoiceLastVisitDetails = "tblInvoiceLastVisitDetails";
    private static final String DATABASE_CREATE_TABLE_tblInvoiceLastVisitDetails = "create table tblInvoiceLastVisitDetails(StoreID text null,InvCode text null,InvDate text null,OutstandingAmt text null,AmtOverdue text null);";

/*

    private static final String DATABTABLE_AlertNearestSchmApld = "tblProductAlertNearestSchmApld";
    private static final String DATABASE_CREATE_TABLE_AlertNearestSchmApld = "create table tblProductAlertNearestSchmApld (RowID text null,ProductID text null,SchemeID text null,SchemeSlabID text null,SlabSubBucketType text null,SlabSubBucketMin text null,SlabSubBucketMax text null);";
*/


    /*scheme tbl*/
    private static final String DATABASE_TABLE_ADDONSCHEME = "tblStoreProductAddOnSchemeApplied";
    private static final String DATABASE_CREATE_ADDONSCHEME = "create table tblStoreProductAddOnSchemeApplied (StoreID text not null,ProductID int not null,schId int not null,schSlabId integer not null,schSlbBuckId integer not null,schSlabSubBucketValue real not null,schSubBucketValType integer not null,schSlabSubBucketType int not null,BenifitRowID integer not null,BenSubBucketType int null,FreeProductID int null,BenifitSubBucketValue real null,BenifitMaxValue real null,BenifitAssignedValue real null,BenifitAssignedValueType int null,BenifitDiscountApplied int null,BenifitCouponCode text null,Sstat integer not null,Per real null,UOM real null,WhatFinallyApplied int null,schSlbRowId int null,SchTypeId int null,DiscountPercentage real null,OrderIDPDA text null,flgAddOn int null,isDiscountOnTotalAmount int null);";

    private static final String DATABASE_TABLE_MAINADDOnScheme = "tblProductADDONScheme";
    private static final String DATABASE_CREATE_TABLE_ADDONSCHEME = "create table tblProductADDONScheme (ProductID text null,PrdString text null);";




    //actual visit stock
    private static final String DATABASE_TABLE_tblActualVisitStock = "tblActualVisitStock";
    private static final String DATABASE_CREATE_TABLE_tblActualVisitStock = "create table tblActualVisitStock(storeID text null,ProductID text null,Stock text null,Sstat integer null);";
    private static final String DATABASE_TABLE_tblQuestionsSurvey= "tblQuestionsSurvey";
    private static final String DATABASE_CREATE_TABLE_tblQuestionsSurvey = "create table tblQuestionsSurvey (QstnID text null,QstnText text null,flgActive text null,flgOrder text null);";
    private static final String DATABASE_TABLE_tblOptionSurvey= "tblOptionSurvey";
    private static final String DATABASE_CREATE_TABLE_tblOptionSurvey = "create table tblOptionSurvey (OptionID text null,OptionText text null,QstnID text null,flgaActive text null);";
    private static final String DATABASE_TABLE_tblSurveyData= "tblSurveyData";
    private static final String DATABASE_CREATE_TABLE_tblSurveyData = "create table tblSurveyData (StoreID text null,QstnID text null,OptionID text null,OptionText text null,DateTime text null,Latitude text null,Longitude text null,Accuracy text null,Sstat Integer null);";

    private static final String TABLE_tblStateCityMaster="tblStateCityMaster";
    private static final String DATABASE_CREATE_TABLE_tblStateCityMaster="create table tblStateCityMaster(" +
            "StateID int null, State text null,CityID int null,City text null,CityDefault integer null);";
    //store close info
    private static final String DATABASE_TABLE_tblStoreCloseLocationDetails = "tblStoreCloseLocationDetails";
    private static final String DATABASE_CREATE_TABLE_tblStoreCloseLocationDetails = "create table tblStoreCloseLocationDetails (StoreID text null,Lattitude text null,Longitude text null,Accuracy text null,Address text null,City text null,Pincode text null,State text null,fnAccurateProvider  text null,GpsLat  text null,GpsLong  text null,GpsAccuracy  text null,NetwLat  text null,NetwLong  text null,NetwAccuracy  text null,FusedLat  text null,FusedLong  text null,FusedAccuracy  text null,AllProvidersLocation  text null,GpsAddress  text null,NetwAddress  text null,FusedAddress  text null,FusedLocationLatitudeWithFirstAttempt  text null,FusedLocationLongitudeWithFirstAttempt  text null,FusedLocationAccuracyWithFirstAttempt  text null,Sstat int null);";

    private static final String DATABASE_TABLE_tblStoreClosedPhotoDetail = "tblStoreClosedPhotoDetail";
    private static final String DATABASE_CREATE_TABLE_tblStoreClosedPhotoDetail = "create table tblStoreClosedPhotoDetail (StoreID text null,ClickedDateTime text null,PhotoName text null,PDAPhotoPath text null,Sstat integer null);";

    private static final String DATABASE_TABLE_tblStoreCloseReasonMaster = "tblStoreCloseReasonMaster";
    private static final String DATABASE_CREATE_TABLE_tblStoreCloseReasonMaster = "create table tblStoreCloseReasonMaster (CloseReasonID text null,CloseReasonDescr text null);";

    private static final String DATABASE_TABLE_tblStoreCloseReasonSaving = "tblStoreCloseReasonSaving";
    private static final String DATABASE_CREATE_TABLE_tblStoreCloseReasonSaving = "create table tblStoreCloseReasonSaving (StoreID text null,ReasonID text null,ReasonDescr text null,Sstat integer null);";


    // SO Tables New
    private static final String TABLE_tblAllServicesCalledSuccessfull = "tblAllServicesCalledSuccessfull";
	private static final String DATABASE_CREATE_tblAllServicesCalledSuccessfull = "create table tblAllServicesCalledSuccessfull(flgAllServicesCalledOrNot int null);";

	private static final String DATABASE_TABLE_tblDSRSummaryDetials = "tblDSRSummaryDetials";
	private static final String DATABASE_CREATE_TABLE_tblDSRSummaryDetials = "create table tblDSRSummaryDetials(DSRID int null,DSRName text null,TotStoreAdded int null,Approved int null,Rejected int null,ReMap int null,Pending int null,flgDSROrSO int null);";

	private static final String DATABASE_TABLE_tblSOName = "tblSONameAndSummurayRefreshTime";
	private static final String DATABASE_CREATE_TABLE_tblSONameAndSummurayRefreshTime = "create table tblSONameAndSummurayRefreshTime(SOName text null,SummurayRefreshTime text null);";

	private static final String DATABASE_TABLE_tblStoreCountDetails = "tblStoreCountDetails";
	private static final String DATABASE_CREATE_TABLE_tblStoreCountDetails = "create table tblStoreCountDetails (TotStoreAdded int null,TodayStoreAdded int null);";

	private static final String DATABASE_TABLE_tblPreAddedStores = "tblPreAddedStores";
	private static final String DATABASE_CREATE_TABLE_tblPreAddedStores = "create table tblPreAddedStores(StoreID text null,StoreName text null,LatCode text null," +
			"LongCode text null,DateAdded text null,DistanceNear int null,flgOldNewStore int null,CoverageAreaID int null,CoverageAreaType int null," +
			"RouteNodeID int null,RouteNodeType int null,City text null,State text null,PinCode text null,StoreCategoryType text null,StoreSectionCount int null," +
			"flgApproveOrRejectOrNoActionOrReVisit int null,SOLatCode text null,SOLongCode text null,VisitStartTS text null,VisitEndTS text null," +
			"LocProvider text null,Accuracy text null,BateryLeftStatus text null,IsStoreDataCompleteSaved int null,PaymentStage text null,flgLocationTrackEnabled int null," +
			"flgStoreVisitMode int null,Sstat int null,StoreAddress text null,SOAccuracy text null,flgRemap int null,flgLocationServicesOnOff int null,flgGPSOnOff int null,flgNetworkOnOff int null,flgFusedOnOff int null,flgInternetOnOffWhileLocationTracking int null,flgRestart int null,flgStoreOrder int null,MapAddress text null,MapCity text null,MapPinCode text null,MapState text null,CityId text null,StateId text null,flgSelfStoreNode int null);";

	private static final String DATABASE_TABLE_tblCoverageMaster = "tblCoverageMaster";
	private static final String DATABASE_CREATE_TABLE_tblCoverageMaster = "create table tblCoverageMaster(CoverageAreaNodeID int null,CoverageAreaNodeType int null,CoverageArea text null);";

	private static final String DATABASE_TABLE_tblRouteMasterWithCoverageMapping = "tblRouteMasterWithCoverageMapping";
	private static final String DATABASE_CREATE_TABLE_tblRouteMasterWithCoverageMapping = "create table tblRouteMasterWithCoverageMapping (CoverageAreaNodeID int null,CoverageAreaNodeType int null,CoverageArea text null,RouteID int null,RouteType int null,Route text null);";

	private static final String DATABASE_TABLE_tblStoreImageList = "tblStoreImageList";
	private static final String DATABASE_CREATE_TABLE_tblStoreImageList = "create table tblStoreImageList (StoreID text null,StoreImagename text null,ImageType int null);";
	private static final String DATABASE_TABLE_tblStorePaymentStageMapping = "tblStorePaymentStageMapping";
	private static final String DATABASE_CREATE_TABLE_tblStorePaymentStageMapping = "create table tblStorePaymentStageMapping (StoreID text null,PaymentStage text null);";

	private static final String DATABASE_TABLE_tblPreAddedStoresDataDetails = "tblPreAddedStoresDataDetails";
	private static final String DATABASE_CREATE_TABLE_tblPreAddedStoresDataDetails = "create table tblPreAddedStoresDataDetails (StoreIDDB text null,GrpQuestID text null,QstId text null,AnsControlTypeID text null,AnsTextVal text null,flgPrvVal text null);";

	private static final String DATABASE_TABLE_tblFSOMaster = "tblFSOMaster";
	private static final String DATABASE_CREATE_TABLE_tblFSOMaster = "create table tblFSOMaster (FSOID int null,PersonName text null);";

	private static final String TABLE_QuestionMstr = "tblQuestionMstr";
	private static final String DATABASE_CREATE_TABLE_QUESTIONMstr = "create table tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null,flgQuestIDForOutChannel int null,flgNewStore int null,flgStoreValidation int null);";

	private static final String TABLE_QuestGrpMappingMstr = "tblPDAQuestGrpMappingMstr";
	private static final String DATABASE_CREATE_TABLE_QuestGrpMappingMstr = "create table tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null,GrpCopyID int null,QuestCopyID int null,Sequence int null,flgNewStore int null,flgStoreValidation int null);";
	private static final String TABLE_OptionMstr = "tblOptionMstr";
	private static final String DATABASE_CREATE_TABLE_OPTIONMstr = "create table tblOptionMstr(OptID text null,QuestID int null,OptionNo int null,OptionDescr text null,Sequence int null );";
	private static final String TABLE_QuestionDependentMstr = "tblQuestionDependentMstr";
	private static final String DATABASE_CREATE_TABLE_QUESTION_DEPENDENTMstr = "create table tblQuestionDependentMstr(QuestionID int null,OptionID text null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";

	private static final String TABLE_QuestOptionDependentMstr = "tblPDAQuestOptionDependentMstr";
	private static final String DATABASE_CREATE_TABLE_QUESTION_OPTION_DEPENDENTMstr = "create table tblPDAQuestOptionDependentMstr(QstID int null,DepQstId int null,GrpQuestID int null,GrpDepQuestID int null);";

	private static final String TABLE_QuestOptionValuesDependentMstr = "tblPDAQuestOptionValuesDependentMstr";
	private static final String DATABASE_CREATE_TABLE_QUESTION_OPTION_VAL_DEPENDENTMstr = "create table tblPDAQuestOptionValuesDependentMstr(DepQstId int null,DepAnswValId text null,QstId int null,AnswValId text null,OptDescr text null,Sequence int null,GrpQuestID int null,GrpDepQuestID int null);";
	private static final String TABLE_IMAGE = "tableImage";
	private static final String DATABASE_CREATE_TABLE_Image = "create table tableImage(StoreID text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,ImageClicktime text null,Sstat integer null);";


	private static final String TABLE_OutletQuestAnsMstr = "tblOutletQuestAnsMstr";
	private static final String DATABASE_CREATE_TABLE_tblOutletQuestAnsMstr = "create table tblOutletQuestAnsMstr (OutletID text not null,QuestID text not null,AnswerType text null, AnswerValue text null,QuestionGroupID integer null,sectionID integer null,Sstat integer not null,optionValue text null);";



	// SO Tables Start
	private static final String Table_tblDSRCoverageMaster_Define = "tblDSRCoverageMaster";
	private static final String Table_tblDSRCoverageMaster_Definition = "create table tblDSRCoverageMaster (CoverageAreaNodeID text null,CoverageAreaNodeType text null,CoverageArea text null,PersonNodeID text null,PersonNodeType text null,PersonName text null);";
    //Amount Collction

    private static final String DATABASE_TABLE_tblBankMaster="tblBankMaster";
    private static final String DATABASE_TABLE_tblInstrumentMaster="tblInstrumentMaster";
    private static final String DATABASE_TABLE_tblAllCollectionData="tblAllCollectionData";



    //Amount Collection
    private static final String DATABASE_CREATE_TABLE_tblBankMaster="create table tblBankMaster (BankId text null, BankName text null, LoginIdIns text null, TimeStampIns text null, LoginIdUpd text null, TimeStampUpd text null);";
    private static final String DATABASE_CREATE_TABLE_tblInstrumentMaster="create table tblInstrumentMaster (InstrumentModeId text null, InstrumentMode text null, InstrumentType text null);";
    private static final String DATABASE_CREATE_TABLE_tblAllCollectionData="create table tblAllCollectionData (StoreID text null, PaymentMode text null,PaymentModeID text null, Amount text null, RefNoChequeNoTrnNo text null, Date text null, Bank text null,Sstat text null,OrderPDAID text null);";
    //private static final String DATABASE_CREATE_TABLE_tblAllCollectionData="create table tblAllCollectionData (StoreID text null, PaymentMode text null, Amount text null, RefNoChequeNoTrnNo text null, Date text null, Bank text null,Sstat text null,OrderPDAID text null);";

   // private static final String DATABASE_CREATE_TABLE_tblAllCollectionData="create table tblAllCollectionData (StoreID text null,CashID text null,PaymentModeCash text null, AmountCash text null, RefNoChequeNoTrnNoCash text null, DateCash text null, BankCash text null,ChequeDDID text null,PaymentModeChequesOrDD text null, AmountChequesOrDD text null, RefNoChequeNoTrnNo text null, DateChequesOrDD text null, BankChequesOrDD text null,ElectronicID text null,PaymentModeElectronic text null, AmountElectronic text null, RefNoChequeNoTrnNoElectronic text null, DateElectronic text null, BankElectronic text null,Sstat text null,OrderPDAID text null);";



    //map distributor
	private static final String TABLE_tblDistribtorMstr = "tblDistribtorMstr";
	//private static final String DATABASE_CREATE_TABLE_tblDistribtorMstr = "create table tblDistribtorMstr (DBRNodeID int null,DistributorNodeType int null,Distributor text null, flgRemap int null);";
    private static final String DATABASE_CREATE_TABLE_tblDistribtorMstr = "create table tblDistribtorMstr(DBRNodeID int null," +
            "DistributorNodeType int null,Distributor text null,flgRemap int null,ContactNumber text null,EmailID text null);";


	private static final String DATABASE_TABLE_MAIN4 = "tblDistributorListMaster";
	private static final String DATABASE_CREATE_TABLE_4 = "create table tblDistributorListMaster (DBRNodeID int null,DistributorNodeType int null,Distributor text null);";




	private static final String TABLE_tblDistributorMapping="tblDistributorMapping";
	private static final String DATABASE_CREATE_TABLE_tblDistributorMapping="create table tblDistributorMapping(" +
			"DistribtrUniqueId text null, DistribtrId text null,DistributorNodeType text null,flgGSTCapture text null," +
			"flgGSTCompliance text null,GSTNumber text null, Address text null,PinCode text null, City text null, State text null," +
			"fnLati text null,fnLongi text null,fnAccuracy text null," +
			"flgLocNotFound text null,fnAccurateProvider text null,AllProvidersLocation text null,fnAddress text null," +
			"GpsLat text null, GpsLong text null, GpsAccuracy text null, GpsAddress text null, NetwLat text null, " +
			"NetwLong text null, NetwAccuracy text null, NetwAddress text null, FusedLat text null, FusedLong text null, " +
			"FusedAccuracy text null, FusedAddress text null,FusedLocationLatitudeWithFirstAttempt text null," +
			"FusedLocationLongitudeWithFirstAttempt text null,FusedLocationAccuracyWithFirstAttempt text null,Sstat int null,flgLocationServicesOnOff int null,flgGPSOnOff int null,flgNetworkOnOff int null,flgFusedOnOff int null,flgInternetOnOffWhileLocationTracking int null," +
            "flgRestart int null,MapAddress text null,MapCity text null,MapPinCode text null,MapState text null," +
            "CityId text null,StateId text null,PhoneNo text null,EmailID text null);";


	private static final String DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID = "tblDistributorOrderPdaId";

	private static final String DATABASE_TABLE_DISTRIBUTOR_STOCK = "tblDistributorStock";
	private static final String DATABASE_TABLE_DISTRIBUTOR_LEFTPRODUCT = "tblDistributorProductLeft";
	private static final String DATABASE_TABLE_DayAndSummary = "tblAllSummaryDay";
	private static final String DATABASE_CREATE_TABLE_DayAndSummary = "create table tblAllSummaryDay (AutoId int not null,Measures text null," +
			"TodaysSummary text null,MTDSummary text null,TableNo text not null,ColorCode text not null);";

	private static final String DATABASE_TABLE_Main271 = "tblLatLongDetails";
	private static final String DATABASE_CREATE_TABLE_271 = "create table tblLatLongDetails (StoreID text null,fnLati text null,fnLongi text null,fnAccuracy text null,flgLocNotFound text null,fnAccurateProvider text null,AllProvidersLocation text null,fnAddress text null,GpsLat text null, GpsLong text null, GpsAccuracy text null, GpsAddress text null, NetwLat text null, NetwLong text null, NetwAccuracy text null, NetwAddress text null, FusedLat text null, FusedLong text null, FusedAccuracy text null, FusedAddress text null,FusedLocationLatitudeWithFirstAttempt text null,FusedLocationLongitudeWithFirstAttempt text null,FusedLocationAccuracyWithFirstAttempt text null,Sstat integer null);";

	private static final String DATABASE_TABLE_tblSameLocationForStoreRestartDone = "tblsameLocationForStoreRestartDone";
	private static final String DATABASE_CREATE_TABLE_tblSameLocationForStoreRestartDone="create table tblsameLocationForStoreRestartDone(UniqueID INTEGER PRIMARY KEY AUTOINCREMENT,prvsStoreID text null,CrntStoreID text null,isSavedOrSubmittedStore text null,isMsgToRestartPopUpShown text null,isRestartDoneByDSR text null ,Sstat integer null,ActionTime text null);";


	private static final String DATABASE_TABLE_MAIN23 = "tblStoreWiseTarget";
	private static final String DATABASE_TABLE_MAIN235 = "tblTargetVsAchievedSummary";

	private static final String DATABASE_CREATE_TABLE_DISTRIBUTOR_ORDERPDAID="create table tblDistributorOrderPdaId(DistributorNodeIdNodeType text null,OrderPDAID text null,ProductId text null,OrderQntty text null,Sstat integer not null);";
	private static final String DATABASE_CREATE_TABLE_DISTRIBUTOR_STOCK="create table tblDistributorStock(PrdctId text null,StockQntty text null,DistributorNodeIdNodeType text null,OriginalStock text null);";
	private static final String DATABASE_CREATE_TABLE_DISTRIBUTOR_LEFTPRODUCT="create table tblDistributorProductLeft(DistributorNodeIdNodeType text null,OrderId text null);";
	private static final String DATABASE_CREATE_TABLE_23 = "create table tblStoreWiseTarget (StoreID text not null,TargetValue text null);";
	private static final String DATABASE_CREATE_TABLE_235 = "create table tblTargetVsAchievedSummary (AutoId int not null,Descr text null," +
			"TodayTarget text null,TodayAchieved text null,TodayBal text null,Todayflg text null,MonthTarget text null,MonthAchieved text null,MonthBal text null,Monthflg text null,ValTgtOrPrdctFlg int not null);";

	private static final String DATABASE_TABLE_MAIN236 = "tblTargetVsAchievedNote";
	private static final String DATABASE_CREATE_TABLE_236 = "create table tblTargetVsAchievedNote (MsgToDisplay text null);";

    // Tables Data Coming at Splash Screen Starts
	private static final String TABLE_tblUserAuthenticationMstr_Define = "tblUserAuthenticationMstr";
    private static final String TABLE_tblUserAuthenticationMstr_Definition = "create table tblUserAuthenticationMstr (flgUserAuthenticated text null,PersonName text null,PersonNodeID integer null,PersonNodeType integer null,FlgRegistered text null,flgAppStatus text null,DisplayMessage text null,flgValidApplication text null,MessageForInvalid text null,flgPersonTodaysAtt text null,ContactNo text null,DOB text null,SelfieName text null,SelfieNameURL text null,SalesAreaName text null,CoverageAreaNodeID text null,CoverageAreaNodeType text null);";

	//private static final String TABLE_tblUserAuthenticationMstr_Definition = "create table tblUserAuthenticationMstr (flgUserAuthenticated text null,PersonName text null,FlgRegistered text null);";

	private static final String TABLE_tblBloodGroup_Define = "tblBloodGroup";
	private static final String DATABASE_CREATE_TABLE_tblBloodGroup = "create table tblBloodGroup (BloddGroups text null);";

	private static final String TABLE_tblEducationQuali = "tblEducationQuali";
	private static final String DATABASE_CREATE_TABLE_tblEducationQuali = "create table tblEducationQuali (Qualification text null);";


	private static final String TABLE_tblDsrRegDetails = "tblSoRegDetails";
	private static final String DATABASE_CREATE_TABLE_tblDsrRegDetails = "create table tblSoRegDetails (IMEI text null,  ClickedDateTime text null,FirstName text null,LastName text null,ContactNo text null,DOB text null,Sex text null,MaritalStatus text null,MarriedDate text null,Qualification text null,SelfieName text null,SelfiePath text null,EmailID text null,BloodGroup text null,SignName text null,SignPath text null,Sstat integer null,PhotoName text null,  PersonNodeId text null, PersonNodeType text null);";
	private static final String TABLE_tblUserRegistarationStatus = "tblUserRegistarationStatus";
	private static final String DATABASE_CREATE_TABLE_tblUserRegistarationStatus = "create table tblUserRegistarationStatus (Flag text null,MsgToDisplay text null);";











	private static final String TABLE_tblAvailableVersionMstr_Define = "tblAvailableVersionMstr";
    private static final String TABLE_tblAvailableVersionMstr_Definition = "create table tblAvailableVersionMstr (VersionID text null,VersionSerialNo text null,VersionDownloadStatus text null,ServerDate text null);";//, AutoIdOutlet int null

    private static final String TABLE_tblRouteMstr_Define = "tblRouteMstr";
	private static final String TABLE_tblRouteMstr_Definition = "create table tblRouteMstr(ID string null,RouteType string null, Descr string null, Active integer null,flgTodayRoute integer null,RouteDate string null,CoverageAreaNodeID text null,CoverageAreaNodeType text null);";

	// private static final String TABLE_tblRouteMstr_Definition = "create table tblRouteMstr(ID string null,RouteType string null, Descr string null, Active integer null,flgTodayRoute integer null,RouteDate string null);";

    private static final String TABLE_tblNotificationMstr_Define = "tblNotificationMstr";
    private static final String TABLE_tblNotificationMstr_Definition = "create table tblNotificationMstr (SerialNo int null,IMEI text null, Noti_text text null,Noti_DateTime text null,Noti_ReadStatus int null,Noti_NewOld int null,Noti_ReadDateTime text null,Sstat int null,MsgServerID int null);";

	private static final String TABLE_tblNoVisitReasonMaster_Define = "tblNoVisitReasonMaster";
    private static final String TABLE_tblNoVisitReasonMaster_Definition = "create table tblNoVisitReasonMaster(AutoIdStore integer null,ReasonId text null,ReasonDescr text null,FlgToShowTextBox integer null,flgSOApplicable int null,flgDSRApplicable int null,flgNoVisitOption int null,SeqNo int null,flgDelayedReason int null);";

   // private static final String TABLE_tblNoVisitReasonMaster_Definition = "create table tblNoVisitReasonMaster(AutoIdStore integer null,ReasonId text null,ReasonDescr text null,FlgToShowTextBox integer null);";

	private static final String TABLE_tblNoVisitStoreDetails_Define = "tblNoVisitStoreDetails";
    private static final String TABLE_tblNoVisitStoreDetails_Definition = "create table tblNoVisitStoreDetails(IMEI text null,CurDate text null,ReasonId text null,ReasonDescr text null,flgHasVisit integer null,Sstat integer not null);";




	//new Store master data Start


	private static final String DATABASE_TABLE_NewStoreSalesQuotePaymentDetails="tblNewStoreSalesQuotePaymentDetails";
	private static final String DATABASE_NewStoreSalesQuotePaymentDetails = "create table tblNewStoreSalesQuotePaymentDetails (StoreId text null,PymtStageId text null,Sstat text null);";



	private static final String TABLE_QSTOUTCHANNEL = "tblQuestIDForOutChannel"; // show how many section we have to show
	private static final String DATABASE_CREATE_TABLE_QSTOUTCHANNEL = "create table tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";

	private static final String TABLE_QST_NAME = "tblQuestIDForName";
	private static final String DATABASE_CREATE_TABLE_QST_NAME = "create table tblQuestIDForName(GrpQstId int null,QuestID int null);";

	//private static final String TABLE_QuestionMstr = "tblQuestionMstr";
	//private static final String DATABASE_CREATE_TABLE_QUESTIONMstr = "create table tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null,flgQuestIDForOutChannel int null,QuestDescHindi text null);";

	//private static final String TABLE_QuestGrpMappingMstr = "tblPDAQuestGrpMappingMstr";
	//private static final String DATABASE_CREATE_TABLE_QuestGrpMappingMstr = "create table tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null,GrpCopyID int null,QuestCopyID int null,Sequence int null);";


	//private static final String TABLE_OptionMstr = "tblOptionMstr";
	//private static final String DATABASE_CREATE_TABLE_OPTIONMstr = "create table tblOptionMstr(OptID text null,QuestID int null,OptionNo int null,OptionDescr text null,Sequence int null );";


	//private static final String TABLE_QuestOptionDependentMstr = "tblPDAQuestOptionDependentMstr";
	//private static final String DATABASE_CREATE_TABLE_QUESTION_OPTION_DEPENDENTMstr = "create table tblPDAQuestOptionDependentMstr(QstID int null,DepQstId int null,GrpQuestID int null,GrpDepQuestID int null);";

	//private static final String TABLE_QuestOptionValuesDependentMstr = "tblPDAQuestOptionValuesDependentMstr";
	//private static final String DATABASE_CREATE_TABLE_QUESTION_OPTION_VAL_DEPENDENTMstr = "create table tblPDAQuestOptionValuesDependentMstr(DepQstId int null,DepAnswValId text null,QstId int null,AnswValId text null,OptDescr text null,Sequence int null,GrpQuestID int null,GrpDepQuestID int null);";



	private static final String DATABASE_TABLE_tblUserName = "tblUserName";
	private static final String DATABASE_CREATE_TABLE_tblUserName = "create table tblUserName (UserName text null);";




	private static final String DATABASE_TABLE_tblLocationDetails = "tblLocationDetails";
	private static final String DATABASE_CREATE_TABLE_tblLocationDetails = "create table tblLocationDetails (Lattitude text null,Longitude text null,Accuracy text null,Address text null,City text null,Pincode text null,State text null,fnAccurateProvider  text null,GpsLat  text null,GpsLong  text null,GpsAccuracy  text null,NetwLat  text null,NetwLong  text null,NetwAccuracy  text null,FusedLat  text null,FusedLong  text null,FusedAccuracy  text null,AllProvidersLocation  text null,GpsAddress  text null,NetwAddress  text null,FusedAddress  text null,FusedLocationLatitudeWithFirstAttempt  text null,FusedLocationLongitudeWithFirstAttempt  text null,FusedLocationAccuracyWithFirstAttempt  text null);";



	//private static final String TABLE_IMAGE = "tableImage";
	//private static final String DATABASE_CREATE_TABLE_Image = "create table tableImage(StoreID text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,ImageClicktime text null,Sstat integer null);";

	//private static final String TABLE_OutletQuestAnsMstr = "tblOutletQuestAnsMstr";
	//private static final String DATABASE_CREATE_TABLE_tblOutletQuestAnsMstr = "create table tblOutletQuestAnsMstr (OutletID text not null,QuestID text not null,AnswerType text null, AnswerValue text null,QuestionGroupID integer null,sectionID integer null,Sstat integer not null);";


	// Tables Data Coming at Splash Screen Ends

	// Surbhi Change for Incentive
	private static final String TABLE_tblIncentiveMaster = "tblIncentiveMaster";
	private static final String CREATE_TABLE_tblIncentiveMaster = "create table tblIncentiveMaster(IncId int null, OutputType int null, IncentiveName text null,flgAcheived text null,Earning text null);";

	private static final String TABLE_tblIncentiveDetailsData = "tblIncentiveDetailsData";
	private static String DATABASE_CREATE_TABLE_tblIncentiveDetailsData="";

	private static final String TABLE_tblIncentiveDetailsColumnsDesc = "tblIncentiveDetailsColumnsDesc";
	private static final String CREATE_TABLE_tblIncentiveDetailsColumnsDesc = "create table tblIncentiveDetailsColumnsDesc(IncId int null, ReportColumnName text null, DisplayColumnName text null);";

	private static final String TABLE_tblTotalEarning = "tblTotalEarning";
	private static final String CREATE_TABLE_tblTotalEarning = "create table tblTotalEarning(Total_Earning text null);";

	private static final String TABLE_tblIncentivePastDetailsData = "tblIncentivePastDetailsData";
	private static String DATABASE_CREATE_TABLE_tblIncentivePastDetailsData="";

	private static final String TABLE_tblIncentivePastDetailsColumnsDesc = "tblIncentivePastDetailsColumnsDesc";
	private static final String CREATE_TABLE_tblIncentivePastDetailsColumnsDesc = "create table tblIncentivePastDetailsColumnsDesc(IncId int null, ReportColumnName text null, DisplayColumnName text null, Ordr text null);";

	private static final String TABLE_tblIncentiveMsgToDisplay_Define = "tblIncentiveMsgToDisplay";
	private static final String CREATE_tblIncentiveMsgToDisplay_Definition = "create table tblIncentiveMsgToDisplay(MsgToDisplay text null);";


	// End Surbhi Change for Incentive




	private static final String DATABASE_TABLE_StoreSalesOrderPaymentDetails="tblStoreSalesOrderPaymentDetails";
	
	private static final String DATABASE_TABLE_StoreAddressMapDetailsMstr="tblStoreAddressMapDetailsMstr";
	private static final String DATABASE_TABLE_StoreOrderBillAddressDetails="tblStoreOrderBillAddressDetails";

	private static final String TABLE_XMLFILES = "tbl_XMLfiles";
	private static final String DATABASE_CREATE_TABLE_XMLfiles = "create table tbl_XMLfiles(XmlFileName text null,Sstat text null,filetype text null);";


	// static final String TABLE_XMLFILES = "tbl_XMLfiles";
	//private static final String DATABASE_CREATE_TABLE_XMLfiles = "create table tbl_XMLfiles(XmlFileName text null,Sstat text null);";
	
	private static final String TABLE_RETURN_REASON = "tblReturnReason";
	// Dynamic Store Mapping Start


	  private static final String TABLE_OutletChannelBusinessSegmentMaster = "tblOutletChannelBusinessSegmentMaster";
	  private static final String TABLE_OutletMstr = "tblOutletMstr";

	  
	  
	  private static final String TABLE_ViewOutletQuestAnsMstr = "tblViewOutletQuestAnsMstr";

	  private static final String TABLE_ViewOutletNameAndId = "tblViewOutletNameAndId";
	  
      private static final String TABLE_StoreProductPhotoDetail = "tblOutletPhotoDetail";
	 // private static final String TABLE_QuestionDependentMstr = "tblQuestionDependentMstr";
	 // private static final String DATABASE_CREATE_TABLE_QUESTION_DEPENDENTMstr = "create table tblQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";


	private static final String TABLE_MinDeliverQntty = "tblMinDeliverQntty";
	  
	  

	  
	  private static final String DATABASE_CREATE_TABLE_OutletPhotoDetail = "create table tblOutletPhotoDetail(OutletID text null,ClickedDateTime text null,PhotoName text null,PhotoComment text null,PDAPhotoPath text null,Sstat integer null);";
		 
	  

	  private static final String DATABASE_CREATE_TABLE_OutletChannelBusinessSegmentMasterr = "create table tblOutletChannelBusinessSegmentMaster(OutChannelID int null,ChannelName text null,BusinessSegmentID int null,BusinessSegment text null);";
	  
	  
	  private static final String DATABASE_CREATE_TABLE_tblOutletMstr = "create table tblOutletMstr (OutletID text not null,VisitStartTS text not null,VisitEndTS text null,AppVersion int null,ActualLatitude text null, ActualLongitude text null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreName text null,imei text null, ISNewStore int null,Sstat integer not null);";
	  private static final String DATABASE_CREATE_TABLE_tblViewOutletQuestAnsMstr = "create table tblViewOutletQuestAnsMstr (OutletID text not null,QuestID text not null,AnswerType text null, AnswerValue text null);";
	  
	  private static final String DATABASE_CREATE_TABLE_ViewOutletNameAndId = "create table tblViewOutletNameAndId(OutletID text not null,OutletName text not null);";
	  
	  private static final String DATABASE_StoreSalesOrderPaymentDetails = "create table tblStoreSalesOrderPaymentDetails (StoreId text null,OrderID text null,PymtStageId text null,Sstat text null);";
	  private static final String DATABASE_StoreAddressMapDetailsMstr = "create table tblStoreAddressMapDetailsMstr (StoreID text null,OutAddTypeID int null,Address text null,AddressDet text null,OutAddID int null);";
	  private static final String DATABASE_StoreOrderBillAddressDetails = "create table tblStoreOrderBillAddressDetails (StoreID text null,OrderID text null,BillToAddress text null,ShipToAddress int null,Sstat text null);";
	  
	  private static final String DATABASE_MinDeliverQntty = "create table tblMinDeliverQntty (PrdId text null,StoreID text null,QPBT text null,QPAT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
	  
	  private static final String TABLE_tblSalesQuoteSponsorMstr = "tblSalesQuoteSponsorMstr";
	   private static final String TABLE_tblManufacturerMstrMain = "tblManufacturerMstrMain";
	   private static final String TABLE_tblRateDistribution = "tblRateDistribution";
	   
	   //nitika
	   private static final String DATABASE_CREATE_TABLE_tblSalesQuoteSponsorMstr = "create table tblSalesQuoteSponsorMstr(SalesQuoteSponsorID text null,SponsorDescr text null,Ordr text null);";
	   private static final String DATABASE_CREATE_TABLE_tblManufacturerMstrMain = "create table tblManufacturerMstrMain(ManufacturerID text null,ManufacturerName text null,NodeType text null);";
	   private static final String DATABASE_CREATE_TABLE_tblRateDistribution = "create table tblRateDistribution(SalesQuoteId text null,StoreId text null,SalesQuoteSponsorID  text null,ManufacturerID  text null,Percentage  text null,SponsorDescr  text null,ManufacturerName  text null,Sstat text null);";
	  
	//  private static final String TABLE_MinDeliverQntty = "tblMinDeliverQntty";
	// Dynamic Store Mapping End
	  
	  
	  

	
	
	
	
	
	 private static final String DATABASE_TABLE_Main214 = "tblAlrtVal";
	 private static final String DATABASE_TABLE_Main215 = "tblProductMappedWithSchemeSlabApplied";


   // Tables for Launcher Screen
	private static final String DATABASE_TABLE_MAIN11 = "tblPdaDate";
	private static final String DATABASE_TABLE_MAIN12 = "tblDayStartEndDetails";
	
	private static final String DATABASE_TABLE_MAIN13 = "tblStoreList";
	private static final String DATABASE_TABLE_MAIN14 = "tblProductList";
	private static final String DATABASE_TABLE_MAINProductSegementMap = "tblProductSegementMap";
	private static final String DATABASE_TABLE_MAIN15 = "tblCatagoryMstr";
	
	
	
	
	private static final String DATABASE_TABLE_MAIN19 = "tblPDAProductReturnMstr";
    private static final String DATABASE_TABLE_MAIN20 = "tblPDAProductReturnDetails";
    
    
    private static final String DATABASE_TABLE_MAIN21 = "tblNewStoreEntries";
   	private static final String DATABASE_TABLE_MAIN22 = "tblTemp";
    
    
    
  
    
    
	    private static final String DATABASE_TABLE_MAIN201 = "tblSchemeStoreMapping";
	    private static final String DATABASE_TABLE_MAIN202 = "tblSchemeMstr";
	    private static final String DATABASE_TABLE_MAIN203 = "tblSchemeSlabDetail";
	    private static final String DATABASE_TABLE_MAIN204 = "tblSchemeSlabBucketDetails";
	    private static final String DATABASE_TABLE_MAIN205 = "tblSchemeSlabBucketProductMapping";
	    private static final String DATABASE_TABLE_MAIN206 = "tblSchemeSlabBenefitsBucketDetails";
	    private static final String DATABASE_TABLE_MAIN207 = "tblSchemeSlabBenefitsProductMappingDetail";
	    private static final String DATABASE_TABLE_MAIN208 = "tblSchemeSlabBenefitsValueDetail";
	    private static final String DATABASE_TABLE_MAIN209 = "tblProductRelatedScheme";
	    private static final String DATABASE_TABLE_MAIN210 = "tblStoreProdcutPurchaseDetails";
	    private static final String DATABASE_TABLE_Main211 = "tblStoreProductAppliedSchemesBenifitsRecords";

    
    
	    private static final String DATABASE_TABLE_MAIN221 = "tblStoreTypeMstr";
		 private static final String DATABASE_TABLE_MAIN222 = "tblStoreProductClassificationTypeListMstr";
		 private static final String DATABASE_TABLE_MAIN223 = "tblTradeChannelMstr";
		 
		 
		 private static final String DATABASE_TABLE_MAIN231 = "tblSKUWiseDaySummary";
		 private static final String DATABASE_TABLE_MAIN232 = "tblStoreWiseDaySummary";
		 private static final String DATABASE_TABLE_MAIN233 = "tblStoreSKUWiseDaySummary";
		 
		 private static final String DATABASE_TABLE_MAIN234 = "tblAllSummary";
		 
		 
		 
		 private static final String DATABASE_TABLE_MAIN251 = "tblMessageTextFileContainer";
		 
		 
		 

		 
		 
		 
	
	private static final String DATABASE_TABLE_MAIN51 = "tblSchemeList";
	private static final String DATABASE_TABLE_MAIN52 = "tblSchemeDetails";
	private static final String DATABASE_TABLE_MAIN53 = "tblschemeStoreTypeMap";
	private static final String DATABASE_TABLE_MAIN54 = "tblschemeProductMap";
	private static final String DATABASE_TABLE_MAIN55 = "tblspForPDASchemeApplicableList";
	private static final String DATABASE_TABLE_MAIN56 = "tblPDAIsSchemeApplicable";
	
	
	private static final String DATABASE_TABLE_MAIN61 = "tblLastTransactionDetails";
	private static final String DATABASE_TABLE_MAIN62 = "tblPDALastTranDateForSecondPage";
	private static final String DATABASE_TABLE_MAIN63 = "tblStorTypeMstr";
	
	private static final String DATABASE_TABLE_MAIN9 = "tblVisibilityMstr";
	private static final String DATABASE_TABLE_MAIN10 = "tblVisibilityDetails";
	//private static final String DATABASE_TABLE_MAIN11 = "tblschemeProductMap";
	private static final String DATABASE_TABLE_MAIN16 = "tblNewStoreListEntries"; 
	
	private static final String DATABASE_TABLE_MAIN17 = "tblPDALastInvoiceDet";
	
	private static final String DATABASE_TABLE_MAIN18 = "tblPDATargetQtyForSecondPage";
	private static final String DATABASE_TABLE_MAIN31 = "tblTransac";
	private static final String DATABASE_TABLE_MAIN32 = "tblInvoice";
	//private static final String DATABASE_TABLE_MAIN7 = "tblInvoice";

	
	private static final String DATABASE_TABLE_MAIN71 = "tblSyncSummuryDetails";
	private static final String DATABASE_TABLE_MAIN72 = "tblSyncSummuryForProductDetails";
	
	private static final String DATABASE_TABLE_MAIN81 = "tblStrachApplicableOnScheme";
	private static final String DATABASE_TABLE_MAIN82 = "tblStrachOnSchemeDetails";
	
	private static final String DATABASE_TABLE_MAIN91 = "tblOutLetInfoOnQuadVolumeCategoryBasis";
	
	private static final String DATABASE_TABLE_MAINStoreProductMap = "tblStoreProductMap";
	private static final String DATABASE_TABLE_MAIN92 = "tblSelectedStoreIDinChangeRouteCase";
	
	
	private static final String DATABASE_TABLE_MAIN94 = "tblSysVisitID";
	
	
	
private static final String DATABASE_TABLE_MAIN101 = "tblFirstOrderDetailsOnLastVisitDetailsActivity";
	
	private static final String DATABASE_TABLE_MAIN102 = "tblSecondVisitDetailsOnLastVisitDetailsActivity";
	
	private static final String DATABASE_TABLE_MAIN103 = "tblLODOnLastSalesSummary";
	
	
	
	private static final String DATABASE_TABLE_MAIN111 = "tblInvoiceButtonStoreMstr";
	private static final String DATABASE_TABLE_MAIN112 = "tblInvoiceButtonProductMstr";
	private static final String DATABASE_TABLE_MAIN113 = "tblInvoiceButtonStoreProductwiseOrder";
	
	private static final String DATABASE_TABLE_MAIN114 = "tblInvoiceButtonTransac";
	
	

	
	private static final String DATABASE_TABLE_MAIN141 = "tblForPDAGetLastVisitDate";
	private static final String DATABASE_TABLE_MAIN142 = "tblForPDAGetLastOrderDate";
	private static final String DATABASE_TABLE_MAIN143 = "tblForPDAGetLastVisitDetails";
	private static final String DATABASE_TABLE_MAIN144 = "tblForPDAGetLastOrderDetails";
	private static final String DATABASE_TABLE_MAIN145 = "tblspForPDAGetLastOrderDetailsTotalValues";
	private static final String DATABASE_TABLE_MAIN146 = "tblForPDAGetExecutionSummary";
	
	private static final String DATABASE_TABLE_MAIN151 = "tblProductListForAvailableStock";
	private static final String DATABASE_TABLE_MAIN152 = "tblCatagoryMstrForDailyTarget";
	
	//surbhi
	 private static final String DATABASE_TABLE_UOMMstr="tblUOMMstr";
	  private static final String DATABASE_TABLE_SalesQuotePrcsMstr="tblSalesQuotePrcsMstr";
	  private static final String DATABASE_TABLE_SalesQuotePersonMeetMstr="tblSalesQuotePersonMeetMstr";
	  private static final String DATABASE_TABLE_SalesQuoteProductsMstr="tblSalesQuoteProductsMstr";
	  private static final String DATABASE_TABLE_tblSalesQuotePaymentModeMstr="tblSalesQuotePaymentModeMstr";
	  private static final String DATABASE_TABLE_tblSalesQuotePaymentStageMstr="tblSalesQuotePaymentStageMstr";
	  
	  private static final String DATABASE_TABLE_tblSalesQuoteTypeMstr="tblSalesQuoteTypeMstr";
	  
	  private static final String DATABASE_TABLE_tblSalesQuotePaymentStageModeMapMstr="tblSalesQuotePaymentStageModeMapMstr";
	  
	  
	  //surbhi
	  private static final String DATABASE_CREATE_TABLE_UOMMstr = "create table tblUOMMstr (UOMID text null,UOM text null);";
	  private static final String DATABASE_CREATE_TABLE_SalesQuotePrcsMstr = "create table tblSalesQuotePrcsMstr (SalesQuotePrcsId text null, SalesQuotePrcs text null);";
	  private static final String DATABASE_SalesQuotePersonMeetMstr = "create table tblSalesQuotePersonMeetMstr (SalesQuoteId text null,SalesQuoteCode text null,SalesQuotePrcsId text null,SalesQuotePrcs text null,StoreName text null,Remarks text null,StoreId text null,CreditLimit text null,CreditDays text null,ExpectedBusinessValue text null,SalesQuoteValidFrom text null,SalesQuoteValidTo text null,SalesQuoteDate text null,SalesQuoteType text null,ContactPerson text null,ContactPersonEmail text null,ContactPersonPhone text null,PaymentModeId text null,Sstat text null,PymtStageId text null,ManufacturerID text null,ManufacturerName text null);";
	  private static final String DATABASE_CREATE_SalesQuoteProductsMstr = "create table tblSalesQuoteProductsMstr (SalesQuoteId text null,Row_No text null,PrdId text null,StandardRate text null,StandardRateBeforeTax text null,RateOffer text null,InclusiveTax text null,ValidFrom text null,ValidTo text null,MinDlvryQty text null,UOMID text null,Remarks text null,LastTranscRate text null,Sstat text null,TaxRate text null);";
	  private static final String DATABASE_CREATE_TABLE_tblSalesQuotePaymentModeMstr="create table tblSalesQuotePaymentModeMstr (PymtModeId text null,PymtMode text null);";
	  
	  private static final String DATABASE_CREATE_TABLE_tblSalesQuotePaymentStageMstr="create table tblSalesQuotePaymentStageMstr (PymtStageId text null,PymtStage text null,PymtModeId text null);";
	
	  private static final String DATABASE_CREATE_TABLE_tblSalesQuoteTypeMstr="create table tblSalesQuoteTypeMstr (SalesQuotetypeId	text null, SalesQuoteType text null);";
	
	  private static final String DATABASE_CREATE_TABLE_tblSalesQuotePaymentStageModeMapMstr="create table tblSalesQuotePaymentStageModeMapMstr (PymtStageId text null, PymtModeId text null);";
	  
	//private static final String DATABASE_TABLE_Summarytable = "tblDaySummary";
	private static final String DATABASE_TABLE_SummaryDayTableSummaryNew = "tblDaySummaryNew";
	
	 private static final String DATABASE_TABLE_Main212 = "tblStoreProductPhotoDetail";
	 private static final String DATABASE_TABLE_Main213 = "tblStoreReturnDetail";
	 
	 
	  private static final String DATABASE_TABLE_MAIN161 = "tblPOSMaterialMstr";
	  private static final String DATABASE_TABLE_MAIN162 = "tblStoreIDAndMaterialIDMap";
	  private static final String DATABASE_TABLE_Main163 = "tblStoreMaterialDetail";
	  private static final String DATABASE_TABLE_Main164 = "tblStoreMaterialPhotoDetail";
	  
	  
	  private static final String DATABASE_TABLE_Main165 = "tblStorePOSLastVisitDateDetail";
	  
	  private static final String DATABASE_TABLE_Main166 = "tblStorePOSLastVisitALLMaterialDetails";
	  
	  
	  private static final String DATABASE_CREATE_TABLE_165 = "create table tblStorePOSLastVisitDateDetail (StoreID text null,LastVisitDate text null);";
	  private static final String DATABASE_CREATE_TABLE_166 = "create table tblStorePOSLastVisitALLMaterialDetails (StoreID text null,POSMaterialID text null,POSMaterialDescr text null,CurrentStockQty text null,NewOrderQty text null,ReturnQty text null,DamageQty text null);";
		
	 
	 
	
	  
	  public static final String DATABASE_NAME = CommonInfo.DATABASE_NAME;
	  public static final int DATABASE_VERSION = CommonInfo.DATABASE_VERSIONID;
	  public static String AppVersionID = CommonInfo.AppVersionID.trim();
	
	  public static int Application_TypeID = CommonInfo.Application_TypeID; //1=Parag Store Mapping,2=Parag SFA Indirect,3=Parag SFA Direct
	
	 private int checkNumberOfStore=1;
	 
	 
	// ReasonId,ReasonDescr,FlgToShowTextBox
	 
	
	 
	 private static final String DATABASE_CREATE_TABLE_161 = "create table tblPOSMaterialMstr (POSMaterialID text null,POSMaterialDescr text null);";
	 private static final String DATABASE_CREATE_TABLE_162 = "create table tblStoreIDAndMaterialIDMap (StoreID text null,VisitID text null,MaterialID text null,CurrentStockQty text null);";
	
	 
	 private static final String DATABASE_CREATE_TABLE_163 = "create table tblStoreMaterialDetail (RouteID text null,StoreID text null,MaterialID text null,ExistStock integer null,ReturntoDistributor integer null,FreshOrder integer null,DiscardDamage integer null,Sstat integer null);"; 
	 private static final String DATABASE_CREATE_TABLE_164 = "create table tblStoreMaterialPhotoDetail (RouteID text null,StoreID text null,MaterialID text null,ClickedDateTime text null,PhotoName text null,PhotoValidation text null,PDAPhotoPath text null,Sstat integer null);";
	
	 

	 private static final String DATABASE_CREATE_TABLE_214 = "create table tblAlrtVal (StoreId text null,ProductID text null,SpinnerVal text null,SpinnerPosition text null,Product text null,schSlabId text null,schmAlrtId text null,OrderIDPDA text null);";
	 private static final String DATABASE_CREATE_TABLE_215 = "create table tblProductMappedWithSchemeSlabApplied (StoreId text null,ProductID text null,schSlabId text null,schmIdMapped text null,Sstat int null,OrderIDPDA text null);";
	
	
	
	 private static final String DATABASE_CREATE_TABLE_213 = "create table tblStoreReturnDetail (RouteID text null,StoreID text null,ReturnProductID text null, ProdReturnQty text null, ProdReturnReason text null, ProdReturnReasonIndex text null,ReturnDate text null,Sstat integer null,OrderIDPDA text null);";
	  private static final String DATABASE_CREATE_TABLE_212 = "create table tblStoreProductPhotoDetail (StoreID text null,ProductID text null,ClickedDateTime text null,PhotoName text null,ReasonForReturn text null,PhotoValidation text null,PDAPhotoPath text null,Sstat integer null,OrderIDPDA text null);";
	  private static final String DATABASE_CREATE_TABLE_221 = "create table tblStoreTypeMstr(AutoIdStore integer null,StoreTypeID integer null,StoreTypeDescr text null);";
		
		
		private static final String DATABASE_CREATE_TABLE_222 = "create table tblStoreProductClassificationTypeListMstr(AutoIdStore integer null," +
				"CategoryNodeID integer null,CategoryNodeType integer null, Category text null,ProductTypeNodeID integer null,ProductTypeNodeType integer null,ProductType text null,IsCategorySeleted int null,IsSubCategorySeleted int null,SubCategoryValue text null);";
		
		private static final String DATABASE_CREATE_TABLE_223 = "create table tblTradeChannelMstr(AutoIdStore integer null,TradeChannelID integer null,TradeChannelName text null);";
		
		
		
		private static final String DATABASE_CREATE_TABLE_21 = "create table tblNewStoreEntries (RouteID text null,StoreID text not null,StoreName text null," +
		 		"RetailerName text  null,emailID text null,TinNo text null,RetailerContactNo text  null," +
		 		"StoreAddress text  null,StorePincode text  null,City text  null,KeyAccount text null,TradeChannelID integer null,StoreAttrHierID integer null,StoreProductClassificationID text null,ActualLatitude text null, ActualLongitude text null," +
		 		"LocProvider text null, Accuracy text null," +
		 		"VisitStartTS text null, VisitEndTS text null,Imei text null,BatteryStatus text null,Sstat integer null," +
		 		"CityId integer null,AppVersion text null);";
		
		
		

		private static final String DATABASE_CREATE_TABLE_22 = "create table tblTemp(RouteID text null,StoreID text not null," +
				"CategoryNodeID integer null,CategoryNodeType integer null,Category text null,ProductTypeNodeID integer null,ProductTypeNodeType integer null,ProductType text null,IsCategorySeleted int null,IsSubCategorySeleted int null,SubCategoryValue text null,Sstat integer null);";
		
		
		
		
		
	
		 private static final String DATABASE_CREATE_TABLE_251 = "create table tblMessageTextFileContainer (FileName text null,FileFlag integer null);";

	
	
	
	
	
	
	
	
	
  // Tables for New Schemes Structure
	
    private static final String DATABASE_CREATE_TABLE_201 = "create table tblSchemeStoreMapping (StoreID text null,SchemeID text null);";
	private static final String DATABASE_CREATE_TABLE_202 = "create table tblSchemeMstr (SchemeID text null,SchemeName text null,SchemeApplicationID text null,SchemeAppliedRule text null);";
	private static final String DATABASE_CREATE_TABLE_203 = "create table tblSchemeSlabDetail (SchemeID text null,SchemeSlabID text null,SchemeSlabDesc text null,BenifitDescr text null);";
	 
	private static final String DATABASE_CREATE_TABLE_204 = "create table tblSchemeSlabBucketDetails (RowID text null,SchemeID text null" +
			",SchemeSlabID text null,BucketID text null,SubBucketID text null,SlabSubBucketType text null,SlabSubBucketValue text null,SubBucketValType text null);";
	   
	private static final String DATABASE_CREATE_TABLE_205 = "create table tblSchemeSlabBucketProductMapping (RowID text null,ProductID text null);";
	    
	private static final String DATABASE_CREATE_TABLE_206 = "create table tblSchemeSlabBenefitsBucketDetails (RowID text null," +
			"SchemeID text null,SchemeSlabID text null,BucketID text null,SubBucketID text null,BenSubBucketType text null," +
			"BenDiscApplied text null,CouponCode text null,BenSubBucketValue text null,Per real null,UOM real null,ProRata int null,IsDiscountOnTotalAmount int null);";
	
	private static final String DATABASE_CREATE_TABLE_207 = "create table tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null);";
	   
	private static final String DATABASE_CREATE_TABLE_208 = "create table tblSchemeSlabBenefitsValueDetail (RowID text null,BenValue text null,Remarks text null,Type text null);";
	   
	private static final String DATABASE_CREATE_TABLE_209 = "create table tblProductRelatedScheme (ProductID text null,PrdString text null);";
	private static final String DATABASE_CREATE_TABLE_210 = "create table tblStoreProdcutPurchaseDetails (IMEIno text not null,RouteID int null,StoreID text not null,CatID text  null,ProdID text not null,TransDate string not null,Stock integer not null,OrderQty integer not null,OrderVal real not null,FreeQty integer not null,DisVal real not null,Sstat integer not null,SampleQuantity int null,ProductShortName text null,ProductPrice real null, TaxRate real null,TaxValue real null,StoreCatNodeId int null,OrderIDPDA text null,flgIsQuoteRateApplied int null,distibutorID text null,flgOrderType int null);";
	private static final String DATABASE_CREATE_TABLE_211 = "create table tblStoreProductAppliedSchemesBenifitsRecords (StoreID text not null,ProductID int not null,schId int not null,schSlabId integer not null,schSlbBuckId integer not null,schSlabSubBucketValue real not null,schSubBucketValType integer not null,schSlabSubBucketType int not null,BenifitRowID integer not null,BenSubBucketType int null,FreeProductID int null,BenifitSubBucketValue real null,BenifitMaxValue real null,BenifitAssignedValue real null,BenifitAssignedValueType int null,BenifitDiscountApplied int null,BenifitCouponCode text null,Sstat integer not null,Per real null,UOM real null,WhatFinallyApplied int null,schSlbRowId int null,SchTypeId int null,DiscountPercentage real null,OrderIDPDA text null,flgAddOn int null,isDiscountOnTotalAmount int null);";
//
	
	 private static final String DATABASE_CREATE_TABLE_RETURNREASON = "create table tblReturnReason(StockStatusId text not null,StockStatus text not null);";


	private static final String TABLE_tblDistributorDayReport="tblDistributorDayReport";
	private static final String TABLE_tblDistributorDayReportColumnsDesc="tblDistributorDayReportColumnsDesc";
	private static final String TABLE_tblDistributorSavedData="tblDistributorSavedData";
	private static final String TABLE_tblDistributorOldStockData="tblDistributorOldStockData";

	private static final String CREATE_TABLE_tblDistributorDayReport="create table tblDistributorDayReport(ProductNodeID text null, ProductNodeType text null, SKUName text null, FlvShortName text null,StockDate text null,DistributorNodeID int null,DistributorNodeType int null);";
	private static final String CREATE_TABLE_tblDistributorDayReportColumnsDesc="create table tblDistributorDayReportColumnsDesc(DistDayReportCoumnName text null, DistDayReportColumnDisplayName text null,DistributorNodeID int null,DistributorNodeType int null);";
	private static final String CREATE_TABLE_tblDistributorSavedData="create table tblDistributorSavedData(ProductName text null,ShortName text null,ProductID text null,Date text null,EnteredValue text null,DistribtrId int null,DistributorNodeType int null,ProductNodeType int null,StockDate text null,EntryType int null,StockPcsCaseType int null,Sstat int null);";
	private static final String CREATE_TABLE_tblDistributorOldStockData="create table tblDistributorOldStockData (DistribtrId text null,DistributorNodeType text null,DistribtrTag text null,EnteredValue text null);";


	
	/* private static final String DATABASE_TABLE_MAIN231 = "tblSKUWiseDaySummary";
	 private static final String DATABASE_TABLE_MAIN232 = "tblStoreWiseDaySummary";
	 private static final String DATABASE_TABLE_MAIN233 = "tblStoreSKUWiseDaySummary";*/
	 
	 
	/* String ProductId="0";
		String Product="0";
		String MRP="0";
		String Rate="0";
		String NoofStores="0";
		String OrderQty="0";
		String FreeQty="0";
		String DiscValue="0";
		String ValBeforeTax="0";
		String TaxValue="0";
		String ValAfterTax="0";
		String Lvl="0";
		String Category="0";
		String UOM="0";*/
	
	//AutoId int null
	 
	 private static final String DATABASE_CREATE_TABLE_231 = "create table tblSKUWiseDaySummary (AutoId int not null,ProductId text null," +
	 		"Product text null,MRP text null,Rate text null,NoofStores text null,OrderQty text null,FreeQty text null," +
	 		"DiscValue text null,ValBeforeTax text null,TaxValue text null,ValAfterTax text null,Lvl text null," +
	 		"Category text null,UOM text null);";
	 
	 /*String Store="0";
	 String LinesperBill="0";
	 String StockValue="0";
	 String DiscValue="0";
	 String ValBeforeTax="0";
	 String TaxValue="0";
	 String ValAfterTax="0";
	 String Lvl="0";*/
	 
	 private static final String DATABASE_CREATE_TABLE_232 = "create table tblStoreWiseDaySummary (AutoId int not null,Store text null," +
		 		"LinesperBill text null,StockValue text null,DiscValue text null,ValBeforeTax text null,TaxValue text null," +
		 		"ValAfterTax text null,Lvl text null);";
	 
	/* String ProductId="0";
	 String Product="0";
	 String MRP="0";
	 String Rate="0";
	 String OrderQty="0";
	 String FreeQty="0";
	 String DiscValue="0";
	 String ValBeforeTax="0";
	 String TaxValue="0";
	 String ValAfterTax="0";
	 String Lvl="0";
	 String StoreId="0";
	 */
	
	 
	
	 
	 private static final String DATABASE_CREATE_TABLE_233 = "create table tblStoreSKUWiseDaySummary (AutoId int not null,ProductId text null," +
		 		"Product text null,MRP text null,Rate text null,OrderQty text null,FreeQty text null," +
		 		"DiscValue text null,ValBeforeTax text null,TaxValue text null,ValAfterTax text null,Lvl text null,StoreId text null,StockQty text null);";
	 

	 private static final String DATABASE_CREATE_TABLE_234 = "create table tblAllSummary (AutoId int not null,Measures text null," +
		 		"TodaysSummary text null,MTDSummary text null);";
	 

	 
	
	 
	
	

	 
	 
	 private static final String DATABASE_CREATE_TABLE_11 = "create table tblPdaDate (PdaDate text null);";
	 private static final String DATABASE_CREATE_TABLE_12 = "create table tblDayStartEndDetails (IMEINo text null,SyncTime text null,RouteID text null,EndTime text null,DayEndFlag int null,ChangeRouteFlg int null,ForDate text null,AppVersionID string null,Sstat int null);";//,AppVersionID int null//, VersionNo string null
	 
	//private static final String DATABASE_CREATE_TABLE_13 = "create table tblStoreList (StoreID text not null, StoreType string not null, StoreName string not null, StoreLatitude real not null, StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not null, Sstat integer not null, ForDate string not null, ActualLatitude text null, ActualLongitude text null, VisitStartTS text null, VisitEndTS text null, ISNewStore int null, AutoIdStore int null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreRouteID text null);";


    private static final String DATABASE_CREATE_TABLE_13 = "create table tblStoreList(StoreID text not null, StoreType string not null, StoreName string not null, StoreLatitude real not null, StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not null, Sstat integer not null, ForDate string not null, ActualLatitude text null, ActualLongitude text null, VisitStartTS text null, VisitEndTS text null,AutoIdStore int null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreClose integer null,StoreNextDay integer null,chainID integer null,ISNewStore int null,StoreRouteID int null,RouteNodeType int null,StoreCatNodeId int null,IsNewStoreDataCompleteSaved int null,flgFromWhereSubmitStatus int null,StoreAddress text null,PaymentStage text null,flgHasQuote int null,flgAllowQuotation int null,flgSubmitFromQuotation int null,flgGSTCapture text null,flgGSTCompliance text null,GSTNumber text null,flgGSTRecordFromServer int null,DistanceNear int null,flgLocationServicesOnOff int null,flgGPSOnOff int null,flgNetworkOnOff int null,flgFusedOnOff int null,flgInternetOnOffWhileLocationTracking int null,flgRestart int null,flgStoreOrder int null,StoreCity text null,StorePinCode text not null,StoreState text null,flgRetailerCreditBalnce integer null,DBR text null,CoverageAreaNodeID integer null,CoverageAreaNodeType integer null,FlgDSRSO integer null,flgOrderType int null,OwnerName text null,StoreContactNo text null,StoreCatType text null);";
	
	//private static final String DATABASE_CREATE_TABLE_2 = "create table tblProductList (ProductID text not null, ProductShortName text not null, ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string nulll);";//,DisplayUnit string nul 
	
	
	private static final String DATABASE_CREATE_TABLE_14 = "create table tblProductList(CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real null, ProductRLP real null, ProductTaxAmount real null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null,SearchField text null,ManufacturerID int null,flagPriority int null);";
	
	private static final String DATABASE_CREATE_TABLE_ProductSegementMap = "create table tblProductSegementMap(ProductID text  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,BusinessSegmentId int null,flgPriceAva int null);";
	
	private static final String DATABASE_CREATE_TABLE_15 = "create table tblCatagoryMstr (CategoryID text not null,CategoryDescr text null,CatOrdr int null);";
	
	//private static final String DATABASE_CREATE_TABLE_5 = "create table tblCategoryQuestionInformation (CategoryID text null,ProductID text null, Stock text null,Sstat integer not null,StoreID text not null);";
	
	//private static final String DATABASE_CREATE_TABLE_7 = "create table tblDistributionStoreProductWiseDetails (CatId integer not null,ProductID integer not null,StoreID text not null,Stock text null,ProductMfgDate text null,Sstat integer not null);";
	
	
	private static final String DATABASE_CREATE_TABLE_9 = "create table tblVisibilityMstr (VisibilityID text null, VisibilityDescr text null);";
	
	private static final String DATABASE_CREATE_TABLE_10 = "create table tblVisibilityDetails (StoreID text not null,VisibilityID text null, VisibilityStock text null,Sstat  integer not null);";

	private static final String DATABASE_CREATE_TABLE_16 = "create table tblNewStoreListEntries (StoreID text null, StoreCity text null, StorePinCode text not null, StoreState text null, ActiveRouteID text null, Sstat integer not null);";
	private static final String DATABASE_CREATE_TABLE_17 = "create table tblPDALastInvoiceDet (StoreID text null, InvoiceID text null, LastTransDate text not null, BalanceAmount text null,CreditPreviousDue real null);";
	private static final String DATABASE_CREATE_TABLE_18 = "create table tblPDATargetQtyForSecondPage (StoreID text null, ProductID text null, SKUShortName text not null, TargetQty text null);";
	
	
	private static final String DATABASE_CREATE_TABLE_19 = "create table tblPDAProductReturnMstr (AutoReturnIdMstr int null,StoreID text null, ReturnDate text null, Comment text null, TotalReturnQty int null, TotalReturnValue real null, Sstat integer null,TotalAdjustQty integer null,TotalAdjustValue real null,FinalBalanceAmount real null,LastCreditAmount real null,OrderIDPDA text not null);";
	private static final String DATABASE_CREATE_TABLE_20 = "create table tblPDAProductReturnDetails (AutoReturnDetailsId int null,ReturnIdMstr int null, ProductId text null, ProdReturnQty text null, ProdRate real null, ProdReturnValue real null, ProdReturnReason text null, ProdReturnReasonDescr text null, ProdLastOrderDate text null, ProdLastOrderQyt text null, Sstat integer null,AdjustReturnQty integer null,AdjustReturnValue real null);";
 
	
	private static final String DATABASE_CREATE_TABLE_31 = "create table tblTransac (IMEIno text not null, TransDate string not null, StoreID text not null, ProdID text not null, Stock integer not null, OrderQty integer not null, OrderVal real not null, FreeQty integer not null, DisVal real not null, SchemeID text null, AppliedSlab text null, AppliedAbsVal text null, Sstat integer not null, SampleQuantity int null, ProductShortName text null, ProductPrice real null,RouteID int null,CatID text  null);";//, DisplayUnit text null

	//private static final String DATABASE_CREATE_TABLE_31 = "create table tblTransac (IMEIno text not null, TransDate string not null, StoreID text not null, ProdID text not null, OrderQty integer not null, OrderVal real not null, Sstat integer not null,ProductMRP real not null,TaxRate real not null);";
	//private static final String DATABASE_CREATE_TABLE_32 = "create table tblInvoice (IMEIno text not null, StoreID text not null, InvoiceDate string not null,  TaxAmt real not null,  InvoiceVal real not null,GrossVal real not null,  Sstat integer not null, AmtColl real null, AmtOut real null);";
	private static final String DATABASE_CREATE_TABLE_32 = "create table tblInvoice (IMEIno text not null, StoreID text not null, InvoiceDate string not null, TotalBeforeTaxDis real not null, TaxAmt real not null, TotalDis real not null, InvoiceVal real not null, FreeTotal integer not null, Sstat integer not null, InvAfterDis real not null, AddDis real not null, AmtPrevDue real null, AmtColl real null, AmtOut real null, NoCoupon int null, TotalCoupunAmount real null,RouteID int null,OrderIDPDA text not null);";
	
	
	//private static final String DATABASE_CREATE_TABLE_StoreProductMap = "create table tblSIMEInotoreProductMap (StoreID text  null,ProductID text  null, ProductMRP real  null, ProductRLP real  null, ProductTaxAmount real  null, DistributorPrice real null);";
	
	private static final String DATABASE_CREATE_TABLE_StoreProductMap = "create table tblStoreProductMap (StoreID text  null,ProductID text  null, ProductMRP real  null, ProductRLP real  null, ProductTaxAmount real  null, DistributorPrice real null,CategoryID integer null);";
	
	
	private static final String DATABASE_CREATE_TABLE_51 = "create table tblSchemeList (SchemeID text not null, SchemeName string not null, SchemeType string not null, StoreType string null, CombTypeID integer null,flgDiscountType integer null);";
	private static final String DATABASE_CREATE_TABLE_52 = "create table tblSchemeDetails (SchemeDetID text not null, SchemeID text not null, SlabFrom integer not null, SlabTo integer not null, FreeQuantity integer not null, Discount real not null, FreeProductID text null);";
	private static final String DATABASE_CREATE_TABLE_53 = "create table tblschemeStoreTypeMap (SchemeID text not null, StoreTypeID integer not null);";
	private static final String DATABASE_CREATE_TABLE_54 = "create table tblschemeProductMap (SchemeID text not null, ProductID text not null, SchemeType int null);";
	private static final String DATABASE_CREATE_TABLE_55 = "create table tblspForPDASchemeApplicableList(SchemeID string null, StoreType string null, SchemeDesc string null,flgSpecialScheme integer null);";
	private static final String DATABASE_CREATE_TABLE_56 = "create table tblPDAIsSchemeApplicable (IsSchemeApplicable int null);";

	
	private static final String DATABASE_CREATE_TABLE_61 = "create table tblLastTransactionDetails (StoreID text not null, ProductID text not null, LastTransDate string not null, Quantity integer not null, SampleQuantity int null,CategoryID integer null);";
	private static final String DATABASE_CREATE_TABLE_62 = "create table tblPDALastTranDateForSecondPage(StoreID text null, LastTransDate string null, RetailerName string null, SKUName string null, Stock string null, OrderQty string null, FreeQty string null);";
	private static final String DATABASE_CREATE_TABLE_63 = "create table tblStorTypeMstr(ID string null, Descr string null);";
	
	
	private static final String DATABASE_CREATE_TABLE_71 = "create table tblSyncSummuryDetails (ActualCalls int null,ProductiveCalls int null, TotSalesValue text null, TotKGSales text null, TotFreeQtyKGSales text null, TotSampleKGSales text null, TotLTSales text null, TotFreeQtyLTSales text null, TotSampleLTSales text null, TotDiscountKGSales text null, TotDiscountLTales text null,Lines int null);";
	private static final String DATABASE_CREATE_TABLE_72 = "create table tblSyncSummuryForProductDetails (SkuName text null,OrderQty text null, FreeQty text null, SampleQty text null, TotalOrderKgs text null, TotalFreeKgs text null, TotalSampleKgs text null, TotalSales text null,Lines int null,OrderVal text null,DisVal text null,ProductPrice text null);";  
	
	private static final String DATABASE_CREATE_TABLE_81 = "create table tblStrachApplicableOnScheme (SchID int null, flgIsStrachApplicable int null);";
	private static final String DATABASE_CREATE_TABLE_82 = "create table tblStrachOnSchemeDetails (SchID int null, cardStrachID int null, Slab int Null, Qty int null, ProductValueOrSlabBased int null);";
	
	 private static final String DATABASE_CREATE_TABLE_91 = "create table tblOutLetInfoOnQuadVolumeCategoryBasis (OutID text null,OutletName text  null," +
		 		" OwnerName text  null,ContactNo text null,MarketAreaName text null,Latitude text null,Longitutde text null);";
	 private static final String DATABASE_CREATE_TABLE_92 = "create table tblSelectedStoreIDinChangeRouteCase (StoreID text null);";
	 
	
	 private static final String DATABASE_CREATE_TABLE_94 = "create table tblSysVisitID (IMEINo text null,SysVisitID int null );";
	
	 
	// private static final String DATABASE_CREATE_tblDaySummary = "create table tblDaySummary (StoreID text null,flgTarget int null,flgActualVisited int null,flgProductiveDay int null,flgProductiveMTD int null,DaySales real null,MTDSales real null);";//, AutoIdOutlet int null
	 
	 private static final String DATABASE_CREATE_tblDaySummaryNew = "create table tblDaySummaryNew (TargetCalls int null,ActualCallOnRoute int null,ActualCallOffRoute int null,ProdCallOnRoute int null,ProdCallOffRoute real null,TargetSalesForDay real null,TotalSalesForDay real null,CallsRemaining int null,TargetSalesMTD real null,AchievedSalesMTD real null,ProdStoresMTD int null,RunRate real null);";//, AutoIdOutlet int null
	 
	 
	 private static final String DATABASE_CREATE_TABLE_101 = "create table tblFirstOrderDetailsOnLastVisitDetailsActivity(StoreID text null,Date text null,SKUID text null,OrderQty integer null,FreeQty integer null,Stock integer null,SKUName text null);";
		
	 private static final String DATABASE_CREATE_TABLE_102 = "create table tblSecondVisitDetailsOnLastVisitDetailsActivity(StoreID text null,Date text null,SKUID text  null,OrderQty integer null,SKUName text null);";
			
	 private static final String DATABASE_CREATE_TABLE_103 = "create table tblLODOnLastSalesSummary(StoreID text null,Date text null,SKUID text  null,Qty integer null,SKUName text null);";
		
	 
	 
	 
	 
	 
	 private static final String DATABASE_CREATE_TABLE_111 = "create table tblInvoiceButtonStoreMstr(StoreID text null," +
				"StoreName text null,RouteId text null,RouteName text null,DistId text null,DistName text null," +
				"InvoiceForDate text null,flgSubmit text null,Sstat integer not null,IMEIno text not null,OrderID text  null,flgCancel int null,ServerOrdersFlg int null);";
		
	private static final String DATABASE_CREATE_TABLE_112 = "create table tblInvoiceButtonProductMstr (ProductId text null, ProductName text null);";
		
	private static final String DATABASE_CREATE_TABLE_113 = "create table tblInvoiceButtonStoreProductwiseOrder (StoreID text null," +
				" ProductID text null,OrderQty text null,ProductPrice text null,InvoiceForDate text null,OrderID text null,CatID text null,Freeqty int null,TotLineDiscVal real null);";
		
	private static final String DATABASE_CREATE_TABLE_114 = "create table tblInvoiceButtonTransac (IMEIno text not null, " +
				"TransDate string not null, StoreID text not null, ProdID text not null, OrderQty integer not null, " +
				"DelQty integer not null,FreeQty integer not null,Sstat integer not null,ProductShortName text null, ProductPrice real null," +
				"RouteID int null,OrderID text  null,CatID text null,flgCancel int null,DiscountVal real null,additionalDiscount text null);";
		
		//private static final String DATABASE_CREATE_TABLE_115 = "create table tblPdaDate (PdaDate text null);";
		
		
		private static final String DATABASE_CREATE_TABLE_141 = "create table tblForPDAGetLastVisitDate(StoreID text null,VisitDate text null,flgOrder text null);";
		private static final String DATABASE_CREATE_TABLE_142 = "create table tblForPDAGetLastOrderDate(StoreID text null,OrderDate text null,flgExecutionSummary text null);";
		private static final String DATABASE_CREATE_TABLE_143 = "create table tblForPDAGetLastVisitDetails(StoreID text null,Date123 text null,Order123 text null,Stock text null,SKUName text null,ExecutionQty text null,ProductID text null);";
		private static final String DATABASE_CREATE_TABLE_144 = "create table tblForPDAGetLastOrderDetails(StoreID text null,OrderDate text null,ProductID text null,OrderQty text null,FreeQty text null,PrdName text null,ExecutionQty text null);";
		private static final String DATABASE_CREATE_TABLE_145 = "create table tblspForPDAGetLastOrderDetailsTotalValues(StoreID text null,OrderValue text null,ExecutionValue text null);";
		
		private static final String DATABASE_CREATE_TABLE_146 = "create table tblForPDAGetExecutionSummary(StoreID text null,OrderDate text null,ProductID text null,OrderQty text null,flgInvStatus text null,ProductQty text null,PrdName text null);";	
		private static final String DATABASE_CREATE_TABLE_147 = "create table tblStoreSchemeFreeProQtyOtherDetails(StoreID text null,StoreType text null,SchemeID text null,SchemeType string not null,CombTypeID integer null,flgDiscountType integer null,FreeProductID text null,FreeProductQty text null,Discount real not null);";
		
		
		private static final String DATABASE_CREATE_TABLE_151 = "create table tblProductListForAvailableStock (ProductID text  null, ProductName text  null);";
		//private static final String DATABASE_CREATE_TABLE_152 = "create table tblCatagoryMstr (CategoryID text not null,CategoryDescr text null);";


	private static final String DATABASE_TABLE_MAIN261 = "tblManagerMstr";
	private static final String DATABASE_TABLE_MAIN262 = "tblSelectedManagerDetails";



	private static final String DATABASE_CREATE_TABLE_261 = "create table tblManagerMstr(PersonID text null,PersonType text null" +
			",PersonName text null,ManagerID text null,ManagerType text null,ManagerName text null);";

	private static final String DATABASE_CREATE_TABLE_262 = "create table tblSelectedManagerDetails(IMEI text null,CurDate text null,PersonID text null,PersonType text null" +
			",PersonName text null,ManagerID text null,ManagerType text null,ManagerName text null,OtherName text null,Sstat integer not null);";

    //sales target
    private static final String DATABASE_TABLE_tblTargetMnthPlan = "tblTargetMnthPlan";
    private static final String DATABASE_CREATE_TABLE_tblTargetMnthPlan = "create table tblTargetMnthPlan(" +
            "MonthVal text null,YearVal text null,RotMonthYear text null,StrToDisplay text null,flgDefault text null,flgPlanType text null);";

    private static final String DATABASE_TABLE_tblSalesAreaTargetDetail = "tblSalesAreaTargetDetail";
    private static final String DATABASE_CREATE_TABLE_tblSalesAreaTargetDetail = "create table tblSalesAreaTargetDetail(" +
            "TargetLevelNodeID text null,TargetLevelNodeType text null,TargetLevelName text null,PrdNodeID text null," +
            "PrdNodeType text null,ProductName text null,MeasureID text null,targetValue text null);";

    private static final String DATABASE_TABLE_tblFlgEditeable = "tblFlgEditeable";
    private static final String DATABASE_CREATE_TABLE_tblFlgEditeable = "create table tblFlgEditeable(flgStatus text null);";

    private static final String DATABASE_TABLE_tblSalesTargetSavingDetail = "tblSalesTargetSavingDetail";
    private static final String DATABASE_CREATE_TABLE_tblSalesTargetSavingDetail = "create table tblSalesTargetSavingDetail(" +
            "MonthID int null,MeasureID int null,TargetLevelNodeID text null,TargetLevelNodeType text null,PrdNodeID text null," +
            "PrdNodeType text null,targetValue text null,Sstat int null);";

    private static final String TABLE_tblSalesTargetUserDetails = "tblSalesTargetUserDetails";
    private static final String DATABASE_CREATE_TABLE_tblSalesTargetUserDetails = "create table tblSalesTargetUserDetails(IMEINo text null,MonthID int null,MeasureID int null,SalesAreaId text null,SalesAreaNodeType text null,DateTime text null,Sstat int null);";

    private static final String TABLE_tblSalestargetMeasure = "tblSalestargetMeasure";
    private static final String DATABASE_CREATE_TABLE_tblSalestargetMeasure = "create table tblSalestargetMeasure(TgtMeasueId text null,TgtMeasueName text null,flgActive text null);";


    private final Context context;

	private final DatabaseHelper DBHelper;
	private SQLiteDatabase db;
	
	private final Locale locale  = new Locale("en", "UK");
	String pattern = "###.##";
	DecimalFormat decimalFormat = (DecimalFormat)NumberFormat.getNumberInstance(locale);

	public DBAdapterKenya(Context ctx)
	{
		this.context = ctx;
		DBHelper = new DatabaseHelper(context);
	}

	private static class DatabaseHelper extends SQLiteOpenHelper
	{
		DatabaseHelper(Context context) 
		{
			super(context, DATABASE_NAME, null, DATABASE_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db) 
		{
			try
			{
                db.execSQL(TABLE_tblMerchandisingInstructionDetails_Defintion);
                db.execSQL(DATABASE_CREATE_TABLEtblProductListLastVisitStockOrOrderMstr);
                db.execSQL(DATABASE_CREATE_TABLE_tblAttandanceDetails);
                db.execSQL(DATABASE_CREATE_TABLE_tblLastOutstanding);
                db.execSQL(DATABASE_CREATE_TABLE_tblInvoiceLastVisitDetails);

                db.execSQL(DATABASE_CREATE_TABLE_AlertNearestSchmApld );
                db.execSQL(DATABASE_CREATE_ADDONSCHEME);
                db.execSQL(DATABASE_CREATE_TABLE_ADDONSCHEME);

                db.execSQL(DATABASE_CREATE_TABLE_tblQuestionsSurvey);
                db.execSQL(DATABASE_CREATE_TABLE_tblOptionSurvey);
                db.execSQL(DATABASE_CREATE_TABLE_tblSurveyData);
                db.execSQL(DATABASE_CREATE_TABLE_tblActualVisitStock);

                db.execSQL(DATABASE_CREATE_TABLE_tblStateCityMaster);
                //sales target
                db.execSQL(DATABASE_CREATE_TABLE_tblTargetMnthPlan);
                db.execSQL(DATABASE_CREATE_TABLE_tblSalesAreaTargetDetail);
                db.execSQL(DATABASE_CREATE_TABLE_tblFlgEditeable);
                db.execSQL(DATABASE_CREATE_TABLE_tblSalesTargetSavingDetail);
                db.execSQL(DATABASE_CREATE_TABLE_tblSalesTargetUserDetails);
                db.execSQL(DATABASE_CREATE_TABLE_tblSalestargetMeasure);
                //Amount Collection
                db.execSQL(DATABASE_CREATE_TABLE_tblBankMaster);
                db.execSQL(DATABASE_CREATE_TABLE_tblInstrumentMaster);
                db.execSQL(DATABASE_CREATE_TABLE_tblAllCollectionData);
                //
                //store close info
                db.execSQL(DATABASE_CREATE_TABLE_tblStoreCloseLocationDetails);
                db.execSQL(DATABASE_CREATE_TABLE_tblStoreClosedPhotoDetail);
                db.execSQL(DATABASE_CREATE_TABLE_tblStoreCloseReasonMaster );
                db.execSQL(DATABASE_CREATE_TABLE_tblStoreCloseReasonSaving );

				// SO Tables

                db.execSQL(DATABASE_CREATE_TABLE_tblUserName);

				db.execSQL(DATABASE_CREATE_tblAllServicesCalledSuccessfull);
				db.execSQL(DATABASE_CREATE_TABLE_tblDSRSummaryDetials);
				db.execSQL(DATABASE_CREATE_TABLE_tblSONameAndSummurayRefreshTime);
				db.execSQL(DATABASE_CREATE_TABLE_tblStoreCountDetails);
				db.execSQL(DATABASE_CREATE_TABLE_tblPreAddedStores);
				db.execSQL(DATABASE_CREATE_TABLE_tblCoverageMaster);
				db.execSQL(DATABASE_CREATE_TABLE_tblRouteMasterWithCoverageMapping);

				db.execSQL(DATABASE_CREATE_TABLE_tblStoreImageList);
				db.execSQL(DATABASE_CREATE_TABLE_tblStorePaymentStageMapping);
				db.execSQL(DATABASE_CREATE_TABLE_tblPreAddedStoresDataDetails);
				db.execSQL(DATABASE_CREATE_TABLE_tblFSOMaster);

				// Splash Screen Tables
				db.execSQL(DATABASE_CREATE_TABLE_tblDistribtorMstr);

				db.execSQL(DATABASE_CREATE_TABLE_tblDistributorMapping);

				db.execSQL(DATABASE_CREATE_TABLE_DISTRIBUTOR_ORDERPDAID);
				db.execSQL(DATABASE_CREATE_TABLE_DISTRIBUTOR_LEFTPRODUCT);
				db.execSQL(DATABASE_CREATE_TABLE_DISTRIBUTOR_STOCK);

				db.execSQL(DATABASE_CREATE_TABLE_tblSameLocationForStoreRestartDone);
				db.execSQL(DATABASE_CREATE_TABLE_23);

				db.execSQL(DATABASE_CREATE_TABLE_DayAndSummary);

				db.execSQL(DATABASE_CREATE_TABLE_235);
				db.execSQL(DATABASE_CREATE_TABLE_236);
				db.execSQL(DATABASE_CREATE_TABLE_4);

				db.execSQL(DATABASE_CREATE_TABLE_271);

				db.execSQL(CREATE_TABLE_tblDistributorDayReport);
				db.execSQL(CREATE_TABLE_tblDistributorDayReportColumnsDesc);
				db.execSQL(CREATE_TABLE_tblDistributorSavedData);
				db.execSQL(CREATE_TABLE_tblDistributorOldStockData);

				db.execSQL(CREATE_tblIncentiveMsgToDisplay_Definition);
				db.execSQL(CREATE_TABLE_tblIncentiveMaster);
				//db.execSQL(CREATE_TABLE_tblIncentiveDetailsData);
				db.execSQL(CREATE_TABLE_tblIncentiveDetailsColumnsDesc);
				db.execSQL(CREATE_TABLE_tblTotalEarning);
				db.execSQL(CREATE_TABLE_tblIncentivePastDetailsColumnsDesc);




				db.execSQL(TABLE_tblUserAuthenticationMstr_Definition);
				db.execSQL(DATABASE_CREATE_TABLE_tblBloodGroup);
				db.execSQL(DATABASE_CREATE_TABLE_tblEducationQuali);
				db.execSQL(DATABASE_CREATE_TABLE_tblDsrRegDetails);
				db.execSQL(DATABASE_CREATE_TABLE_tblUserRegistarationStatus);


				db.execSQL(TABLE_tblAvailableVersionMstr_Definition);
				db.execSQL(TABLE_tblRouteMstr_Definition);
				db.execSQL(TABLE_tblNotificationMstr_Definition);
				db.execSQL(TABLE_tblNoVisitReasonMaster_Definition);
				db.execSQL(TABLE_tblNoVisitStoreDetails_Definition);

				db.execSQL(DATABASE_CREATE_TABLE_QSTOUTCHANNEL);
				db.execSQL(DATABASE_CREATE_TABLE_QST_NAME);
				db.execSQL(DATABASE_CREATE_TABLE_QUESTIONMstr);
				db.execSQL(DATABASE_CREATE_TABLE_QuestGrpMappingMstr);
				db.execSQL(DATABASE_CREATE_TABLE_QUESTION_OPTION_DEPENDENTMstr);
				db.execSQL(DATABASE_CREATE_TABLE_QUESTION_OPTION_VAL_DEPENDENTMstr);

				db.execSQL(DATABASE_CREATE_TABLE_Image);
				db.execSQL(DATABASE_CREATE_TABLE_tblLocationDetails);




				db.execSQL(DATABASE_NewStoreSalesQuotePaymentDetails);
				db.execSQL(DATABASE_StoreSalesOrderPaymentDetails);
				db.execSQL(DATABASE_StoreAddressMapDetailsMstr);
				db.execSQL(DATABASE_StoreOrderBillAddressDetails);
				
				db.execSQL(DATABASE_MinDeliverQntty);
				
				db.execSQL(DATABASE_CREATE_TABLE_RETURNREASON);
				
				//db.execSQL(DATABASE_CREATE_TABLE_QuestGrpMappingMstr);
				db.execSQL(DATABASE_CREATE_TABLE_XMLfiles);
				db.execSQL(DATABASE_CREATE_TABLE_13);
				
				 db.execSQL(DATABASE_CREATE_TABLE_OutletPhotoDetail); 
				// db.execSQL(DATABASE_CREATE_TABLE_QUESTIONMstr);
				 db.execSQL(DATABASE_CREATE_TABLE_OutletChannelBusinessSegmentMasterr);
			     db.execSQL(DATABASE_CREATE_TABLE_OPTIONMstr);
			     db.execSQL(DATABASE_CREATE_TABLE_tblOutletMstr);
			     db.execSQL(DATABASE_CREATE_TABLE_tblOutletQuestAnsMstr);
			     db.execSQL( DATABASE_CREATE_TABLE_tblViewOutletQuestAnsMstr);
			     
			     db.execSQL(  DATABASE_CREATE_TABLE_ViewOutletNameAndId);
			   
			     
			     db.execSQL(DATABASE_CREATE_TABLE_QUESTION_DEPENDENTMstr);
				

				
				
				db.execSQL(DATABASE_CREATE_TABLE_11);
				db.execSQL(DATABASE_CREATE_TABLE_12);
				
				db.execSQL(DATABASE_CREATE_TABLE_14);
				db.execSQL(DATABASE_CREATE_TABLE_ProductSegementMap);
				db.execSQL(DATABASE_CREATE_TABLE_15);
				
				db.execSQL(DATABASE_CREATE_TABLE_UOMMstr);
				db.execSQL(DATABASE_CREATE_TABLE_SalesQuotePrcsMstr);
				db.execSQL(DATABASE_SalesQuotePersonMeetMstr);
				db.execSQL(DATABASE_CREATE_SalesQuoteProductsMstr);
				db.execSQL(DATABASE_CREATE_TABLE_tblSalesQuotePaymentModeMstr);
				db.execSQL(DATABASE_CREATE_TABLE_tblSalesQuotePaymentStageMstr);
				db.execSQL(DATABASE_CREATE_TABLE_tblSalesQuoteTypeMstr);
				db.execSQL(DATABASE_CREATE_TABLE_tblSalesQuotePaymentStageModeMapMstr);
				//db.execSQL(DATABASE_CREATE_TABLE_5);
				//db.execSQL(DATABASE_CREATE_TABLE_7);
				db.execSQL(DATABASE_CREATE_TABLE_9);
				db.execSQL(DATABASE_CREATE_TABLE_10);
				db.execSQL(DATABASE_CREATE_TABLE_16);
				db.execSQL(DATABASE_CREATE_TABLE_17);
				db.execSQL(DATABASE_CREATE_TABLE_18);
				db.execSQL(DATABASE_CREATE_TABLE_19);
				db.execSQL(DATABASE_CREATE_TABLE_20);
				db.execSQL(DATABASE_CREATE_TABLE_31);
				db.execSQL(DATABASE_CREATE_TABLE_32);
				db.execSQL(DATABASE_CREATE_TABLE_StoreProductMap);
				db.execSQL(DATABASE_CREATE_TABLE_51);
				db.execSQL(DATABASE_CREATE_TABLE_52);
				db.execSQL(DATABASE_CREATE_TABLE_53);
				db.execSQL(DATABASE_CREATE_TABLE_54);
				db.execSQL(DATABASE_CREATE_TABLE_55);
				db.execSQL(DATABASE_CREATE_TABLE_56);
				db.execSQL(DATABASE_CREATE_TABLE_61);
				db.execSQL(DATABASE_CREATE_TABLE_62);
				db.execSQL(DATABASE_CREATE_TABLE_63);
				db.execSQL(DATABASE_CREATE_TABLE_71);
				db.execSQL(DATABASE_CREATE_TABLE_72);
				db.execSQL(DATABASE_CREATE_TABLE_81);
				db.execSQL(DATABASE_CREATE_TABLE_82);
				db.execSQL(DATABASE_CREATE_TABLE_91);
				db.execSQL(DATABASE_CREATE_TABLE_92);
				
				db.execSQL(DATABASE_CREATE_TABLE_94);
				
				db.execSQL(DATABASE_CREATE_tblDaySummaryNew);
				
				
				db.execSQL(DATABASE_CREATE_TABLE_101);
				db.execSQL(DATABASE_CREATE_TABLE_102);
				db.execSQL(DATABASE_CREATE_TABLE_103);
				
				
				db.execSQL(DATABASE_CREATE_TABLE_111);
				db.execSQL(DATABASE_CREATE_TABLE_112);
				db.execSQL(DATABASE_CREATE_TABLE_113);
				db.execSQL(DATABASE_CREATE_TABLE_114);
				
				
				db.execSQL(DATABASE_CREATE_TABLE_141);
				db.execSQL(DATABASE_CREATE_TABLE_142);
				db.execSQL(DATABASE_CREATE_TABLE_143);
				db.execSQL(DATABASE_CREATE_TABLE_144);
				db.execSQL(DATABASE_CREATE_TABLE_145);
				db.execSQL(DATABASE_CREATE_TABLE_146);
				db.execSQL(DATABASE_CREATE_TABLE_147);
				
				db.execSQL(DATABASE_CREATE_TABLE_151);
				
				db.execSQL(DATABASE_CREATE_TABLE_161);
				db.execSQL(DATABASE_CREATE_TABLE_162);
				db.execSQL(DATABASE_CREATE_TABLE_163);
				db.execSQL(DATABASE_CREATE_TABLE_164);
				
				db.execSQL(DATABASE_CREATE_TABLE_165);
				db.execSQL(DATABASE_CREATE_TABLE_166);
				
				
				db.execSQL(DATABASE_CREATE_TABLE_201);
				db.execSQL(DATABASE_CREATE_TABLE_202);
				db.execSQL(DATABASE_CREATE_TABLE_203);
				db.execSQL(DATABASE_CREATE_TABLE_204);
				db.execSQL(DATABASE_CREATE_TABLE_205);
				db.execSQL(DATABASE_CREATE_TABLE_206);
				db.execSQL(DATABASE_CREATE_TABLE_207);
				db.execSQL(DATABASE_CREATE_TABLE_208);
				db.execSQL(DATABASE_CREATE_TABLE_209);
				db.execSQL(DATABASE_CREATE_TABLE_210);
				db.execSQL(DATABASE_CREATE_TABLE_211);
				
				db.execSQL(DATABASE_CREATE_TABLE_221);
				db.execSQL(DATABASE_CREATE_TABLE_222);
				db.execSQL(DATABASE_CREATE_TABLE_223);
				
				db.execSQL(DATABASE_CREATE_TABLE_231);
				db.execSQL(DATABASE_CREATE_TABLE_232);
				db.execSQL(DATABASE_CREATE_TABLE_233);
				db.execSQL(DATABASE_CREATE_TABLE_234);
				
				db.execSQL(DATABASE_CREATE_TABLE_251);
				

				
				
				db.execSQL(DATABASE_CREATE_TABLE_21);
				db.execSQL(DATABASE_CREATE_TABLE_22);
				
				db.execSQL(DATABASE_CREATE_TABLE_212);
				
				db.execSQL(DATABASE_CREATE_TABLE_213);
				
				db.execSQL(DATABASE_CREATE_TABLE_214);
				db.execSQL(DATABASE_CREATE_TABLE_215);

				 db.execSQL(DATABASE_CREATE_TABLE_tblSalesQuoteSponsorMstr);
				    db.execSQL(DATABASE_CREATE_TABLE_tblManufacturerMstrMain);
				    db.execSQL(DATABASE_CREATE_TABLE_tblRateDistribution);


				db.execSQL(DATABASE_CREATE_TABLE_261);
				db.execSQL(DATABASE_CREATE_TABLE_262);


				// SO Tables
				db.execSQL(Table_tblDSRCoverageMaster_Definition);

				
			} catch (Exception e) {
				Log.e(TAG, "Error: onCreate db");
			}
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			try 
			{

                db.execSQL("DROP TABLE IF EXISTS tblProductListLastVisitStockOrOrderMstr");
                db.execSQL("DROP TABLE IF EXISTS tblMerchandisingInstructionDetails");
                db.execSQL("DROP TABLE IF EXISTS tblAttandanceDetails");
                db.execSQL("DROP TABLE IF EXISTS tblLastOutstanding");

                db.execSQL("DROP TABLE IF EXISTS tblInvoiceLastVisitDetails");

                db.execSQL("DROP TABLE IF EXISTS tblProductAlertNearestSchmApld");
                db.execSQL("DROP TABLE IF EXISTS tblStoreProductAddOnSchemeApplied");
                db.execSQL("DROP TABLE IF EXISTS tblProductADDONScheme");
                db.execSQL("DROP TABLE IF EXISTS tblQuestionsSurvey");
                db.execSQL("DROP TABLE IF EXISTS tblOptionSurvey");
                db.execSQL("DROP TABLE IF EXISTS tblSurveyData");

                db.execSQL("DROP TABLE IF EXISTS tblActualVisitStock");

                db.execSQL("DROP TABLE IF EXISTS tblStateCityMaster");
                //sales target
                db.execSQL("DROP TABLE IF EXISTS tblTargetMnthPlan");
                db.execSQL("DROP TABLE IF EXISTS tblSalesAreaTargetDetail");
                db.execSQL("DROP TABLE IF EXISTS tblFlgEditeable");
                db.execSQL("DROP TABLE IF EXISTS tblSalesTargetSavingDetail");
                db.execSQL("DROP TABLE IF EXISTS tblSalesTargetUserDetails");
                db.execSQL("DROP TABLE IF EXISTS tblSalestargetMeasure");
                //Amount Collection
                db.execSQL("DROP TABLE IF EXISTS tblBankMaster");
                db.execSQL("DROP TABLE IF EXISTS tblInstrumentMaster");
                db.execSQL("DROP TABLE IF EXISTS tblAllCollectionData");
                //store close info
                db.execSQL("DROP TABLE IF EXISTS tblStoreCloseLocationDetails");
                db.execSQL("DROP TABLE IF EXISTS tblStoreClosedPhotoDetail");
                db.execSQL("DROP TABLE IF EXISTS tblStoreCloseReasonMaster");
                db.execSQL("DROP TABLE IF EXISTS tblStoreCloseReasonSaving");

				db.execSQL("DROP TABLE IF EXISTS tblDistribtorMstr");

				db.execSQL("DROP TABLE IF EXISTS tblDistributorOrderPdaId");
				db.execSQL("DROP TABLE IF EXISTS tblDistributorStock");
				db.execSQL("DROP TABLE IF EXISTS tblDistributorProductLeft");

				db.execSQL("DROP TABLE IF EXISTS tblsameLocationForStoreRestartDone");
				db.execSQL("DROP TABLE IF EXISTS tblLatLongDetails");
				db.execSQL("DROP TABLE IF EXISTS tblTargetVsAchievedNote");
				db.execSQL("DROP TABLE IF EXISTS tblDistributorOldStockData");
				db.execSQL("DROP TABLE IF EXISTS tblDistributorListMaster");
				db.execSQL("DROP TABLE IF EXISTS tblDistributorDayReport");
				db.execSQL("DROP TABLE IF EXISTS tblDistributorDayReportColumnsDesc");
				db.execSQL("DROP TABLE IF EXISTS tblDistributorSavedData");


				db.execSQL("DROP TABLE IF EXISTS tblNoVisitReasonMaster");

				db.execSQL("DROP TABLE IF EXISTS tblNoVisitStoreDetails");

				db.execSQL("DROP TABLE IF EXISTS tblManagerMstr");
				db.execSQL("DROP TABLE IF EXISTS tblSelectedManagerDetails");
				db.execSQL("DROP TABLE IF EXISTS tblTargetVsAchievedSummary");

				db.execSQL("DROP TABLE IF EXISTS tblStoreWiseTarget");



				db.execSQL("DROP TABLE IF EXISTS tblMinDeliverQntty");
				
				
				db.execSQL("DROP TABLE IF EXISTS tblNewStoreSalesQuotePaymentDetails");
				db.execSQL("DROP TABLE IF EXISTS tblStoreSalesOrderPaymentDetails");
				db.execSQL("DROP TABLE IF EXISTS tblStoreAddressMapDetailsMstr");
				db.execSQL("DROP TABLE IF EXISTS tblStoreOrderBillAddressDetails");
				
				
				db.execSQL("DROP TABLE IF EXISTS tblReturnReason");
				db.execSQL("DROP TABLE IF EXISTS tbl_XMLfiles");
				db.execSQL("DROP TABLE IF EXISTS tblUserAuthenticationMstr");
				db.execSQL("DROP TABLE IF EXISTS tblBloodGroup");
				db.execSQL("DROP TABLE IF EXISTS tblEducationQuali");
				db.execSQL("DROP TABLE IF EXISTS tblSoRegDetails");
				db.execSQL("DROP TABLE IF EXISTS tblUserRegistarationStatus");

				db.execSQL("DROP TABLE IF EXISTS tblAvailableVersionMstr");
				db.execSQL("DROP TABLE IF EXISTS tblRouteMstr");
				db.execSQL("DROP TABLE IF EXISTS tblNotificationMstr");
				//surbhi
				db.execSQL("DROP TABLE IF EXISTS tblUOMMstr");
				db.execSQL("DROP TABLE IF EXISTS tblSalesQuotePrcsMstr");
				db.execSQL("DROP TABLE IF EXISTS tblSalesQuotePersonMeetMstr");
				db.execSQL("DROP TABLE IF EXISTS tblSalesQuoteProductsMstr");
				db.execSQL("DROP TABLE IF EXISTS tblSalesQuotePaymentModeMstr");
				db.execSQL("DROP TABLE IF EXISTS tblSalesQuotePaymentStageMstr");
				db.execSQL("DROP TABLE IF EXISTS tblSalesQuoteTypeMstr");
				db.execSQL("DROP TABLE IF EXISTS tblSalesQuotePaymentStageModeMapMstr");
				
				
				
				db.execSQL("DROP TABLE IF EXISTS tblPDAQuestGrpMappingMstr");
				
				
				db.execSQL("DROP TABLE IF EXISTS tblStoreList"); 
				db.execSQL("DROP TABLE IF EXISTS tblProductList");
				db.execSQL("DROP TABLE IF EXISTS tblProductSegementMap");
				db.execSQL("DROP TABLE IF EXISTS tblCatagoryMstr");
				//db.execSQL("DROP TABLE IF EXISTS tblCategoryQuestionInformation");
				db.execSQL("DROP TABLE IF EXISTS tblVisibilityMstr");
				db.execSQL("DROP TABLE IF EXISTS tblVisibilityDetails");
				db.execSQL("DROP TABLE IF EXISTS tblTransac");
				db.execSQL("DROP TABLE IF EXISTS tblInvoice");
				db.execSQL("DROP TABLE IF EXISTS tblPDALastInvoiceDet");
				db.execSQL("DROP TABLE IF EXISTS tblStoreProductMap");
				db.execSQL("DROP TABLE IF EXISTS tblSelectedStoreIDinChangeRouteCase");
				db.execSQL("DROP TABLE IF EXISTS tblDayStartEndDetails");
				db.execSQL("DROP TABLE IF EXISTS tblSysVisitID");
				db.execSQL("DROP TABLE IF EXISTS tblDaySummaryNew");
				
				db.execSQL("DROP TABLE IF EXISTS tblFirstOrderDetailsOnLastVisitDetailsActivity");
				db.execSQL("DROP TABLE IF EXISTS tblSecondVisitDetailsOnLastVisitDetailsActivity");
				db.execSQL("DROP TABLE IF EXISTS tblLODOnLastSalesSummary");
				
				
				db.execSQL("DROP TABLE IF EXISTS tblInvoiceButtonStoreMstr");
				db.execSQL("DROP TABLE IF EXISTS tblInvoiceButtonProductMstr");
				db.execSQL("DROP TABLE IF EXISTS tblInvoiceButtonStoreProductwiseOrder");
				db.execSQL("DROP TABLE IF EXISTS tblInvoiceButtonTransac");
				db.execSQL("DROP TABLE IF EXISTS tblPdaDate");
				//db.execSQL("DROP TABLE IF EXISTS tblNotificationMstr");
				
				db.execSQL("DROP TABLE IF EXISTS tblForPDAGetLastVisitDate");
				db.execSQL("DROP TABLE IF EXISTS tblForPDAGetLastOrderDate");
				db.execSQL("DROP TABLE IF EXISTS tblForPDAGetLastVisitDetails");
				db.execSQL("DROP TABLE IF EXISTS tblForPDAGetLastOrderDetails");
				db.execSQL("DROP TABLE IF EXISTS tblspForPDAGetLastOrderDetailsTotalValues");
				db.execSQL("DROP TABLE IF EXISTS tblForPDAGetExecutionSummary");
				db.execSQL("DROP TABLE IF EXISTS tblStoreSchemeFreeProQtyOtherDetails");
				
				db.execSQL("DROP TABLE IF EXISTS tblProductListForAvailableStock");
				db.execSQL("DROP TABLE IF EXISTS tblCatagoryMstrForDailyTarget");
				
				db.execSQL("DROP TABLE IF EXISTS tblSchemeStoreMapping");
				db.execSQL("DROP TABLE IF EXISTS tblSchemeMstr");
				db.execSQL("DROP TABLE IF EXISTS tblSchemeSlabDetail");
				db.execSQL("DROP TABLE IF EXISTS tblSchemeSlabBucketDetails");
				db.execSQL("DROP TABLE IF EXISTS tblSchemeSlabBucketProductMapping");
				db.execSQL("DROP TABLE IF EXISTS tblSchemeSlabBenefitsBucketDetails");
				db.execSQL("DROP TABLE IF EXISTS tblSchemeSlabBenefitsProductMappingDetail");
				db.execSQL("DROP TABLE IF EXISTS tblSchemeSlabBenefitsValueDetail");
				db.execSQL("DROP TABLE IF EXISTS tblProductRelatedScheme");
				db.execSQL("DROP TABLE IF EXISTS tblStoreProdcutPurchaseDetails");
				db.execSQL("DROP TABLE IF EXISTS tblStoreProductAppliedSchemesBenifitsRecords");
				
				db.execSQL("DROP TABLE IF EXISTS tblStoreReturnDetail");
				
				db.execSQL("DROP TABLE IF EXISTS tblStoreTypeMstr"); 
				db.execSQL("DROP TABLE IF EXISTS tblStoreProductClassificationTypeListMstr");
				db.execSQL("DROP TABLE IF EXISTS tblTradeChannelMstr");
				
				db.execSQL("DROP TABLE IF EXISTS tblNewStoreEntries"); 
				db.execSQL("DROP TABLE IF EXISTS tblTemp");
				
				
				db.execSQL("DROP TABLE IF EXISTS tblStoreProductPhotoDetail");
				
				
				
				db.execSQL("DROP TABLE IF EXISTS tblSKUWiseDaySummary");
				db.execSQL("DROP TABLE IF EXISTS tblStoreWiseDaySummary");
				db.execSQL("DROP TABLE IF EXISTS tblStoreSKUWiseDaySummary");
				
				 db.execSQL("DROP TABLE IF EXISTS tblProductMappedWithSchemeSlabApplied");
				 db.execSQL("DROP TABLE IF EXISTS tblAlrtVal");
				 db.execSQL("DROP TABLE IF EXISTS tblAllSummary");
				 
				
				  db.execSQL("DROP TABLE IF EXISTS tblPOSMaterialMstr");
				  db.execSQL("DROP TABLE IF EXISTS tblStoreIDAndMaterialIDMap");
				  db.execSQL("DROP TABLE IF EXISTS tblStoreMaterialDetail");
				  db.execSQL("DROP TABLE IF EXISTS tblStoreMaterialPhotoDetail");
				  
				  db.execSQL("DROP TABLE IF EXISTS tblNoVisitReasonMaster");
				  //
				  db.execSQL("DROP TABLE IF EXISTS tblNoVisitStoreDetails");
				  db.execSQL("DROP TABLE IF EXISTS tblSalesQuoteSponsorMstr");
			      db.execSQL("DROP TABLE IF EXISTS tblManufacturerMstrMain");
			      db.execSQL("DROP TABLE IF EXISTS tblRateDistribution");

			      //new added
                    db.execSQL("DROP TABLE IF EXISTS tblPreAddedStores");
				
				onCreate(db);

			} catch (Exception e) {
				Log.e(TAG, "Error: onUpgrade db");
			}
		}
	}

	// ---opens the database---
	public DBAdapterKenya open() throws SQLException {
		db = DBHelper.getWritableDatabase();
		isDBOpenflag = true;
		return this;
	}

	public boolean isDBOpen()
	{
		isDBOpenflag = false;
		return isDBOpenflag;
	}

	// ---closes the database---
	public void close() {
		DBHelper.close();
	}


	// function for new store master data start

	public void saveOutletChammetQstnIdGrpId(int grpQstId,int qstId,String optId,int section_count)
	{
  /*private static final String TABLE_QSTOUTCHANNEL = "tblQuestIDForOutChannel";
   private static final String TABLE_QST_NAME = "tblQuestIDForName";
    private static final String DATABASE_CREATE_TABLE_QSTOUTCHANNEL = "create table tblOptionMstr(GrpQstId int null,QuestID int null);";
    private static final String DATABASE_CREATE_TABLE_QST_NAME = "create table tblOptionMstr(GrpQstId int null,QuestID int null);";*/
		//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
		ContentValues values=new ContentValues();
		values.put("GrpQstId", grpQstId);
		values.put("QuestID", qstId);
		values.put("OptID", optId);
		values.put("SectionCount", section_count);

		db.insert(TABLE_QSTOUTCHANNEL, null, values);

	}

    /*private static final String DATABASE_CREATE_TABLE_QSTOUTCHANNEL = "create table " +
            "tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";*/


    public void savetblQuestIDForName(int grpQstId,int qstId)
	{
  /*private static final String TABLE_QSTOUTCHANNEL = "tblQuestIDForOutChannel";
   private static final String TABLE_QST_NAME = "tblQuestIDForName";
    private static final String DATABASE_CREATE_TABLE_QSTOUTCHANNEL = "create table tblOptionMstr(GrpQstId int null,QuestID int null);";
    private static final String DATABASE_CREATE_TABLE_QST_NAME = "create table tblOptionMstr(GrpQstId int null,QuestID int null);";*/
		ContentValues values=new ContentValues();
		values.put("GrpQstId", grpQstId);
		values.put("QuestID", qstId);
		db.insert(TABLE_QST_NAME, null, values);

	}

	public void savetblPDAQuestOptionDependentMstr(int QstID,int DepQstId,int GrpQuestID,int GrpDepQuestID)
	{

		ContentValues values=new ContentValues();
		values.put("QstID", QstID);
		values.put("DepQstId", DepQstId);
		values.put("GrpQuestID", GrpQuestID);
		values.put("GrpDepQuestID", GrpDepQuestID);
		db.insert(TABLE_QuestOptionDependentMstr, null, values);

	}

	public void savetblPDAQuestOptionValuesDependentMstr(int DepQstId,String DepAnswValId ,int QstId,String AnswValId,String OptDescr,int Sequence,int GrpQuestID,int GrpDepQuestID)
	{

		ContentValues values=new ContentValues();
		values.put("DepQstId", DepQstId);
		values.put("DepAnswValId", DepAnswValId);
		values.put("QstId", QstId);
		values.put("AnswValId", AnswValId);
		values.put("OptDescr", OptDescr);
		values.put("Sequence", Sequence);
		values.put("GrpQuestID", GrpQuestID);
		values.put("GrpDepQuestID", GrpDepQuestID);
		db.insert(TABLE_QuestOptionValuesDependentMstr, null, values);

	}


	// function for new store master data end

	public void Delete_tblMessageTextFileContainer()
	{
		db.execSQL("DELETE FROM tblMessageTextFileContainer");
	}
	public void Delete_tblDsrRegDetails()

	{
		db.execSQL("DELETE FROM tblSoRegDetails");
	}
	public void Delete_tblUserRegistarationStatus()

	{
		db.execSQL("DELETE FROM tblUserRegistarationStatus");
	}

	
	public int countNumberOFTextFile()  throws IOException
	{
		// int entryCount;sdfsfsf
		
		Cursor cursorE2 = db.rawQuery("SELECT Count(*) from tblMessageTextFileContainer where FileFlag=0", null);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	
	public String[] returnTextFileName()
	{
		 
		String qry="select FileName from tblMessageTextFileContainer where FileFlag=0";
		Cursor cur = db.rawQuery(qry,null);
		String TextFileUpload[]= new String[cur.getCount()];
		try {
		if(cur.moveToFirst())
		{
			//for(int i=0;i<cur.getCount();i++)
			for(int i=0;i<cur.getCount();i++)
			{
				TextFileUpload[i]= (String) cur.getString(0);
				cur.moveToNext();
				
			}
			
		
		}
		return TextFileUpload;
		} finally {
			cur.close();
		}
	}
	
	public void upDateTextFileFlag(String FileName, int FileFlag) {

		try {

			//initialValues.put("FileName", FileName);
			//initialValues.put("FileFlag", FileFlag);

			final ContentValues values = new ContentValues();
			values.put("FileFlag", FileFlag);
			
			int affected = db.update("tblMessageTextFileContainer", values, "FileName=?",
					new String[] {FileName});

			Log.w(TAG, "Record(s) Updated..");

		} catch (Exception ex) {
			Log.e(TAG, ex.toString());
		}

	}
	
	public void deleteTextFileRow(String fileName)
	{
		
		db.execSQL("DELETE FROM tblMessageTextFileContainer WHERE FileName ='" + fileName +"'");
	}
	
	public void deleteViewAddedStore()
	{
		open();
		db.execSQL("DELETE FROM tblViewOutletQuestAnsMstr");
	      db.execSQL("DELETE FROM tblViewOutletNameAndId");
	      close();
	}
	
	 public void deleteAllSingleCallWebServiceTable() 
     {
      open();
      db.execSQL("DELETE FROM tblNewStoreSalesQuotePaymentDetails");
      
      db.execSQL("DELETE FROM tblQuestionMstr");
      db.execSQL("DELETE FROM tblOutletChannelBusinessSegmentMaster");
      db.execSQL("DELETE FROM tblOptionMstr");
		 db.execSQL("DELETE FROM tblPDAQuestOptionDependentMstr");
		 db.execSQL("DELETE FROM tblPDAQuestOptionValuesDependentMstr");
		 db.execSQL("DELETE FROM tblLatLongDetails");

      
      db.execSQL("DELETE FROM tblStoreList WHERE Sstat ="+ 4);
      db.execSQL("DELETE FROM tblOutletQuestAnsMstr WHERE Sstat ="+ 4);
     
     
      db.execSQL("DELETE FROM tblOutletPhotoDetail WHERE Sstat ="+ 4);



     
    //  db.execSQL("DELETE FROM tblOutletPhotoDetail");
      //db.execSQL("DELETE FROM tblAvailableVersionMstr");
      db.execSQL("DELETE FROM tblQuestionDependentMstr");
      db.execSQL("DELETE FROM tblPDAQuestGrpMappingMstr");
      db.execSQL("DELETE FROM tblReturnReason");
      
     // db.execSQL("DELETE FROM tblViewOutletNameAndId");

		 db.execSQL("DELETE FROM tblsameLocationForStoreRestartDone");
      
      close(); 
     }

    public void deleteAllSingleCallWebServiceTableSO()
    {

       // db.execSQL("DELETE FROM tblNewStoreSalesQuotePaymentDetails");

        db.execSQL("DELETE FROM tblQuestionMstr");
        db.execSQL("DELETE FROM tblOutletChannelBusinessSegmentMaster");
        db.execSQL("DELETE FROM tblOptionMstr");
        db.execSQL("DELETE FROM tblPDAQuestOptionDependentMstr");
        db.execSQL("DELETE FROM tblPDAQuestOptionValuesDependentMstr");
        db.execSQL("DELETE FROM tblLatLongDetails");


       // db.execSQL("DELETE FROM tblStoreList WHERE Sstat ="+ 4);
        db.execSQL("DELETE FROM tblOutletQuestAnsMstr WHERE Sstat ="+ 4);


        db.execSQL("DELETE FROM tblOutletPhotoDetail WHERE Sstat ="+ 4);


        db.execSQL("DELETE FROM tblQuestionDependentMstr");
        db.execSQL("DELETE FROM tblPDAQuestGrpMappingMstr");
        db.execSQL("DELETE FROM tblReturnReason");


        db.execSQL("DELETE FROM tblsameLocationForStoreRestartDone");


    }


	public void deleteAllSingleCallWebServiceTableWhole()
	{
		open();
		//db.execSQL("DELETE FROM tblNewStoreSalesQuotePaymentDetails");

		//db.execSQL("DELETE FROM tblQuestionMstr");
		//db.execSQL("DELETE FROM tblOutletChannelBusinessSegmentMaster");
		//db.execSQL("DELETE FROM tblOptionMstr");
		//db.execSQL("DELETE FROM tblPDAQuestOptionDependentMstr");
		//db.execSQL("DELETE FROM tblPDAQuestOptionValuesDependentMstr");
		//db.execSQL("DELETE FROM tblLatLongDetails");
		//  db.execSQL("DELETE FROM tblOutletMstr");
		//  db.execSQL("DELETE FROM tblOutletQuestAnsMstr");

		//db.execSQL("DELETE FROM tblStoreList");
	//	db.execSQL("DELETE FROM tblOutletQuestAnsMstr");


		db.execSQL("DELETE FROM tblOutletPhotoDetail");




		//  db.execSQL("DELETE FROM tblOutletPhotoDetail");
		//db.execSQL("DELETE FROM tblAvailableVersionMstr");
		//db.execSQL("DELETE FROM tblQuestionDependentMstr");
		//db.execSQL("DELETE FROM tblPDAQuestGrpMappingMstr");
		//db.execSQL("DELETE FROM tblReturnReason");

		// db.execSQL("DELETE FROM tblViewOutletNameAndId");

		db.execSQL("DELETE FROM tblsameLocationForStoreRestartDone");

		close();
	}
	
	
	/* private static final String DATABASE_CREATE_TABLE_231 = "create table tblSKUWiseDaySummary (AutoId int not null,ProductId text null," +
		 		"Product text null,MRP text null,Rate text null,NoofStores text null,OrderQty text null,FreeQty text null," +
		 		"DiscValue text null,ValBeforeTax text null,TaxValue text null,ValAfterTax text null,Lvl text null," +
		 		"Category text null,UOM text null);";*/
	
	// change by sunil for Summary Report
	
	public long savetblSKUWiseDaySummary(int AutoId,String ProductId, String Product, String MRP,
			String Rate, String NoofStores, String OrderQty, String FreeQty,String DiscValue,
			String ValBeforeTax, String  TaxValue,String ValAfterTax,String Lvl,String Category,String UOM)
	{
		
		ContentValues initialValues = new ContentValues();

		initialValues.put("AutoId", AutoId);
		initialValues.put("ProductId", ProductId.trim());
		initialValues.put("Product", Product.trim());
		initialValues.put("MRP", MRP.trim());
		initialValues.put("Rate", Rate.trim());
		initialValues.put("NoofStores", NoofStores.trim());
		initialValues.put("OrderQty", OrderQty.trim());
		initialValues.put("FreeQty", FreeQty.trim());
		initialValues.put("DiscValue", DiscValue.trim());
		
		initialValues.put("ValBeforeTax", ValBeforeTax.trim());
		initialValues.put("TaxValue", TaxValue.trim());
		initialValues.put("ValAfterTax", ValAfterTax.trim());
		initialValues.put("Lvl", Lvl.trim());
		initialValues.put("Category", Category.trim());
		initialValues.put("UOM", UOM.trim());
		
		//// System.out.println("Value inserting by sunil Table 231..");

		return db.insert(DATABASE_TABLE_MAIN231, null, initialValues);
	}
	 public int checkCountIntblSalesQuotePersonMeetMstr(String  StoreId) 
		{
			
			Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblSalesQuotePersonMeetMstr WHERE  StoreId ='"+ StoreId + "'", null);

			try {
				
				int check=0;
				
				if (cursor.getCount() > 0)
				{
	               if (cursor.moveToFirst()) 
	               {
	                  for (int i = 0; i <= (cursor.getCount() - 1); i++) 
						{
							check=1;
							cursor.moveToNext();
						}
					}

				}
				return check;

			} finally {
				cursor.close();
			}

		}
	 public long savetbltblUOMMstr(String UOMID,String UOM)
     {
          
          ContentValues initialValues = new ContentValues();
          
          initialValues.put("UOMID", UOMID.trim());
          initialValues.put("UOM", UOM.trim());
          
          return db.insert(DATABASE_TABLE_UOMMstr, null, initialValues); 
     }
	
	 public long saveSalesQuotePrcsMstr(String SalesQuotePrcsId,String SalesQuotePrcs)
     {
          
          ContentValues initialValues = new ContentValues();
          
          initialValues.put("SalesQuotePrcsId", SalesQuotePrcsId.trim());
          initialValues.put("SalesQuotePrcs", SalesQuotePrcs.trim());
          
          return db.insert(DATABASE_TABLE_SalesQuotePrcsMstr, null, initialValues); 
     } 
	
	 public long SavetblSalesQuotePaymentModeMstr(String PymtModeId,String PymtMode)
  	 {
  		 ContentValues initialValues= new ContentValues();
  		 
  		 initialValues.put("PymtModeId", PymtModeId.trim());
  		initialValues.put("PymtMode", PymtMode.trim());
  		
  		return db.insert(DATABASE_TABLE_tblSalesQuotePaymentModeMstr, null, initialValues);
  	 }
	 
	 public long SavetblSalesQuotePaymentStageMstr(String PymtStageId,String PymtStage, String PymtModeId)
  	 {
  		 ContentValues initialValues= new ContentValues();
  		 
  		 initialValues.put("PymtStageId", PymtStageId.trim());
  		initialValues.put("PymtStage", PymtStage.trim());
  		initialValues.put("PymtModeId", PymtModeId.trim());
  		
  		return db.insert(DATABASE_TABLE_tblSalesQuotePaymentStageMstr, null, initialValues);
  	 }
	 
	 //surbhi
	 public long SavetblSalesQuoteTypeMstr(String SalesQuotetypeId	, String SalesQuoteType)
	 {
		 ContentValues initialValues=new ContentValues();
		 
		 initialValues.put("SalesQuotetypeId", SalesQuotetypeId);
		 initialValues.put("SalesQuoteType", SalesQuoteType);
		 
		 return db.insert(DATABASE_TABLE_tblSalesQuoteTypeMstr, null, initialValues);
	 }
	 
	 public long SavetblSalesQuotePaymentStageModeMapMstr(String PymtStageId, String PymtModeId )
	 {
		 ContentValues initialValues=new ContentValues();
		 
		 initialValues.put("PymtStageId", PymtStageId);
		 initialValues.put("PymtModeId", PymtModeId);
		 
		 return db.insert(DATABASE_TABLE_tblSalesQuotePaymentStageModeMapMstr, null, initialValues);
	 }
	 
	public LinkedHashMap<String, String> fnGettblUOMMstr()
	  {
	   LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
	   open();
	  // Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
	 
	// (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
	   // close();
	   try {
		   Cursor cursor = db.rawQuery("SELECT UOMID,UOM from tblUOMMstr   ", null);// Where PNodeID='"+TSIID+"'
	    if(cursor.getCount()>0)
	   {
	     if (cursor.moveToFirst())
	    {
	      for (int i = 0; i <= (cursor.getCount() - 1); i++) {
	       hmapQuestionMstr.put((String) cursor.getString(1),(String) cursor.getString(0));
	   //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
	       cursor.moveToNext();
	      }
	    }
	   }
	 
	   }
	   catch (Exception e) {
		System.out.println("Error fnGettblUOMMstr= "+e.toString());
	}
	   finally 
	   {
	  
	   close();
	   return hmapQuestionMstr;
	  }
	}
	
	
	public void insertMinDelQty(String prdId,String storeId,String qPbT,String QPTaxAmount,int minDlvrQty,String uOMID,String qPaT)
	{
	// "create table tblMinDeliverQntty (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
		ContentValues values=new ContentValues();
		values.put("PrdId", prdId);
		values.put("StoreID", storeId);
		values.put("QPBT", qPbT);
		values.put("QPAT", qPaT);
		values.put("QPTaxAmount", QPTaxAmount);
		values.put("MinDlvrQty", minDlvrQty);
		values.put("UOMID", uOMID);
		
		db.insert(TABLE_MinDeliverQntty, null, values);
	}
	public String  fngettblSalesQuotePersonMeetMstr(String SalesQuoteId)
	{
		String flag="0";
		try {
			open();
			Cursor cursor = db.rawQuery("SELECT SalesQuotePrcsId,SalesQuotePrcs,SalesQuoteValidFrom,SalesQuoteValidTo,SalesQuoteType from tblSalesQuotePersonMeetMstr where SalesQuoteId = '"+SalesQuoteId +"'", null);
			
			if(cursor.getCount()>0){
				if (cursor.moveToFirst()){
					flag= cursor.getString(0) +"^"+ cursor.getString(1) +"^"+ cursor.getString(2) +"^"+ cursor.getString(3) +"^"+ cursor.getString(4);
				}

			}
			return flag;
		}catch(Exception e)
		{
			
		}

		finally
		{
			
			close();
			return flag;
		}
	}
	public long SalesQuoteProductsMstr(String SalesQuoteId,String Row_No,String PrdId,String StandardRate,String StandardRateBeforeTax,String RateOffer,String InclusiveTax,String ValidFrom,String ValidTo,String MinDlvryQty,String UOMID ,String Remarks,String LastTranscRate,String ProductTaxRateBK)
    {
         
         ContentValues initialValues = new ContentValues();
         
         initialValues.put("SalesQuoteId", SalesQuoteId.trim());
         initialValues.put("Row_No", Row_No.trim());
         initialValues.put("PrdId", PrdId.trim());
         initialValues.put("StandardRate", StandardRate.trim());
         initialValues.put("StandardRateBeforeTax", StandardRateBeforeTax.trim());
         initialValues.put("RateOffer", RateOffer.trim());
         initialValues.put("InclusiveTax", InclusiveTax.trim());
         initialValues.put("ValidFrom", ValidFrom.trim());
         initialValues.put("ValidTo", ValidTo.trim());
         initialValues.put("MinDlvryQty", MinDlvryQty.trim());
         initialValues.put("UOMID", UOMID.trim());
         initialValues.put("Remarks", Remarks.trim());
         initialValues.put("LastTranscRate", LastTranscRate.trim());
         initialValues.put("TaxRate", ProductTaxRateBK.trim());
         initialValues.put("Sstat", "1");
        
         //LastTranscRate
         
         return db.insert(DATABASE_TABLE_SalesQuoteProductsMstr, null, initialValues); 
    }
	
	public void deleteAllQuotationTables()
	{
		
		db.execSQL("DELETE FROM tblUOMMstr");
	      db.execSQL("DELETE FROM tblSalesQuotePrcsMstr");
	      db.execSQL("DELETE FROM tblSalesQuotePersonMeetMstr");
	      db.execSQL("DELETE FROM tblSalesQuoteProductsMstr");
	      db.execSQL("DELETE FROM tblSalesQuotePaymentModeMstr");
	      db.execSQL("DELETE FROM tblSalesQuotePaymentStageMstr");
	      db.execSQL("DELETE FROM tblSalesQuoteTypeMstr");
	      db.execSQL("DELETE FROM tblSalesQuotePaymentStageModeMapMstr");	
	      db.execSQL("DELETE FROM tblSalesQuoteSponsorMstr");
	       db.execSQL("DELETE FROM tblManufacturerMstrMain");
	      
	}
	public void deletetblSalesQuoteProductsMstr(String PrdId,String SalesQuoteId)
	{
		
		db.execSQL("DELETE FROM tblSalesQuoteProductsMstr WHERE PrdId ='" + PrdId +"' and SalesQuoteId='"+SalesQuoteId+"' ");
	}
	public void deletetblRateDistribution(String SalesQuoteId,String StoreId)
	{
		
		db.execSQL("DELETE FROM tblRateDistribution WHERE SalesQuoteId ='" + SalesQuoteId +"' and StoreId='"+StoreId+"' ");
	}
	
	public String[] fetchAllDataFromtblSKUWiseDaySummary()
	{
		int ScodecolumnIndex = 0;
		
		Cursor cursor = db.rawQuery("SELECT *  FROM tblSKUWiseDaySummary", null);
		try {
			String allData[]=new String[cursor.getCount()];
			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					ScodecolumnIndex = 1;
					allData[i] = (String) cursor.getString(0).trim()+"^"+(String) cursor.getString(1).trim()+"^"+(String) cursor.getString(2).trim()+"^"+(String) cursor.getString(3).trim()+"^"+(String) cursor.getString(4).trim()+"^"+(String) cursor.getString(5).trim()+"^"+(String) cursor.getString(6).trim()+"^"+(String) cursor.getString(7).trim()+"^"+(String) cursor.getString(8).trim()+"^"+(String) cursor.getString(9).trim()+"^"+(String) cursor.getString(10).trim()+"^"+(String) cursor.getString(11).trim()+"^"+(String) cursor.getString(12).trim()+"^"+(String) cursor.getString(13).trim()+"^"+(String) cursor.getString(14).trim();
					//// System.out.println("Value inserting 231 fetching :"+allData[i]);
					cursor.moveToNext();
					// cursor.close();
				}

			}
    ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return allData;
		} finally {
			cursor.close();
		}

	}
	
	
	
	/* private static final String DATABASE_CREATE_TABLE_232 = "create table tblStoreWiseDaySummary (AutoId int not null,Store text null," +
		 		"LinesperBill text null,StockValue text null,DiscValue text null,ValBeforeTax text null,TaxValue text null," +
		 		"ValAfterTax text null,Lvl text null);";*/
	
	
	public long savetblStoreWiseDaySummary(int AutoId,String Store, String LinesperBill, String StockValue,
			String DiscValue, String ValBeforeTax, String TaxValue, String ValAfterTax,String Lvl)
	{
		
		ContentValues initialValues = new ContentValues();

		initialValues.put("AutoId", AutoId);
		initialValues.put("Store", Store.trim());
		initialValues.put("LinesperBill", LinesperBill.trim());
		initialValues.put("StockValue", StockValue.trim());
		initialValues.put("DiscValue", DiscValue.trim());
		initialValues.put("ValBeforeTax", ValBeforeTax.trim());
		initialValues.put("TaxValue", TaxValue.trim());
		initialValues.put("ValAfterTax", ValAfterTax.trim());
		initialValues.put("Lvl", Lvl.trim());
		
		////// System.out.println("inserting records in StoreList table..");

		return db.insert(DATABASE_TABLE_MAIN232, null, initialValues);
	}
	
	public String[] fetchAllDataFromtblStoreWiseDaySummary()
	{
		
		Cursor cursor = db.rawQuery("SELECT *  FROM tblStoreWiseDaySummary", null);
		try {
			String allData[]=new String[cursor.getCount()];
			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					
					allData[i] = (String) cursor.getString(0).trim()+"^"+(String) cursor.getString(1).trim()+"^"+(String) cursor.getString(2).trim()+"^"+(String) cursor.getString(3).trim()+"^"+(String) cursor.getString(4).trim()+"^"+(String) cursor.getString(5).trim()+"^"+(String) cursor.getString(6).trim()+"^"+(String) cursor.getString(7).trim()+"^"+(String) cursor.getString(8).trim();
					//// System.out.println("Value inserting 232 fetching :"+allData[i]);
					cursor.moveToNext();
					// cursor.close();
				}

			}
    ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return allData;
		} finally {
			cursor.close();
		}

	}
	
	
	/*private static final String DATABASE_CREATE_TABLE_233 = "create table tblStoreSKUWiseDaySummary (AutoId int not null,
	 * ProductId text null," +
	 		"Product text null,MRP text null,Rate text null,OrderQty text null,FreeQty text null," +
	 		"DiscValue text null,ValBeforeTax text null,TaxValue text null,ValAfterTax text null,Lvl text null,
	 		StoreId text null);";
 
	*/
	public long savetblStoreSKUWiseDaySummary(int AutoId,String ProductId, String Product, String MRP,
			String Rate, String OrderQty, String FreeQty,String DiscValue,
			String ValBeforeTax, String  TaxValue,String ValAfterTax,String Lvl,String StoreId,String StockQty)
	{
		
		ContentValues initialValues = new ContentValues();

		initialValues.put("AutoId", AutoId);
		initialValues.put("ProductId", ProductId.trim());
		initialValues.put("Product", Product.trim());
		initialValues.put("MRP", MRP.trim());
		initialValues.put("Rate", Rate.trim());
		initialValues.put("OrderQty", OrderQty.trim());
		initialValues.put("FreeQty", FreeQty.trim());
		initialValues.put("DiscValue", DiscValue.trim());
		initialValues.put("ValBeforeTax", ValBeforeTax.trim());
		initialValues.put("TaxValue", TaxValue.trim());
		initialValues.put("ValAfterTax", ValAfterTax.trim());
		initialValues.put("Lvl", Lvl.trim());
		initialValues.put("StoreId", StoreId.trim());
		initialValues.put("StockQty", StockQty.trim());
		
		////// System.out.println("inserting records in StoreList table..");

		return db.insert(DATABASE_TABLE_MAIN233, null, initialValues);
	}
	
	public void deleteSalesQuotePersonMeetMstr(String SalesQuoteId)
	{
		
		db.execSQL("DELETE FROM tblSalesQuotePersonMeetMstr WHERE SalesQuoteId ='" + SalesQuoteId +"'");
	}

 	 public long saveSalesQuotePersonMeetMstr(String SalesQuoteId,String SalesQuoteCode,String SalesQuotePrcsId,String SalesQuotePrcs,
 			 String StoreName,String Remarks,String StoreId,String CreditLimit,String CreditDays,
 			 String ExpectedBusinessValue,String SalesQuoteValidFrom ,String SalesQuoteValidTo,String SalesQuoteDate,
 			 String SalesQuoteType,String ContactPerson,String ContactPersonEmail,String ContactPersonPhone,
 			 String PaymentModeId,String PaymentStageId,String ManufacturerID,String ManufacturerName)
     {
          
          ContentValues initialValues = new ContentValues();
          
          initialValues.put("SalesQuoteId", SalesQuoteId.trim());
          initialValues.put("SalesQuoteCode", SalesQuoteCode.trim());
          initialValues.put("SalesQuotePrcsId", SalesQuotePrcsId.trim());
          initialValues.put("SalesQuotePrcs", SalesQuotePrcs.trim());
          initialValues.put("StoreName", StoreName.trim());
          initialValues.put("Remarks", Remarks.trim());
          initialValues.put("StoreId", StoreId.trim());
          initialValues.put("CreditLimit", CreditLimit.trim());
          initialValues.put("CreditDays", CreditDays.trim());
          initialValues.put("ExpectedBusinessValue", ExpectedBusinessValue.trim());
          initialValues.put("SalesQuoteValidFrom", SalesQuoteValidFrom.trim());
          initialValues.put("SalesQuoteValidTo", SalesQuoteValidTo.trim());
          initialValues.put("SalesQuoteDate", SalesQuoteDate.trim());
          initialValues.put("SalesQuoteType", SalesQuoteType.trim());
          initialValues.put("ContactPerson", ContactPerson.trim());
          initialValues.put("ContactPersonEmail", ContactPersonEmail.trim());
          initialValues.put("ContactPersonPhone", ContactPersonPhone.trim());
          initialValues.put("PaymentModeId", PaymentModeId.trim());
          initialValues.put("PymtStageId", PaymentStageId.trim());
          initialValues.put("ManufacturerID", ManufacturerID.trim());
          initialValues.put("ManufacturerName", ManufacturerName.trim());
          initialValues.put("Sstat", "1");
          
          return db.insert(DATABASE_TABLE_SalesQuotePersonMeetMstr, null, initialValues); 
     }
	
 	 private String fngetPaymentModeIDsBasedOnStageID(String PaymentStageID)
 	 {

 		String flag="0";
 		try {
 			//open();
 			Cursor cursor = db.rawQuery("SELECT PymtModeId from tblSalesQuotePaymentStageMstr where PymtStageId= '"+PaymentStageID +"'", null);
 			
 			if(cursor.getCount()>0){
 				if (cursor.moveToFirst()){
 					flag= cursor.getString(0);
 				}

 			}
 			return flag;
 		}catch(Exception e)
 		{
 			
 		}

 		finally
 		{
 			
 			//close();
 			return flag;
 		}
 	
 	 }
 	 

	
	public LinkedHashMap<String, String> fnGettblSalesQuotePaymentStageMstr()
	{
	 LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
	 open();
	 Cursor cursor= db.rawQuery("SELECT PymtStageId,PymtStage from tblSalesQuotePaymentStageMstr", null);// Where PNodeID='"+TSIID+"'
	//(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
	 // close();
	 try {
	  if(cursor.getCount()>0)
	 {
	   if (cursor.moveToFirst())
	  {
	    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
	     hmapQuestionMstr.put((String) cursor.getString(0),(String) cursor.getString(1));
	 //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
	     cursor.moveToNext();
	    }
	  }
	 }
	 return hmapQuestionMstr;
	 } 
	 finally 
	 {
	 cursor.close();
	 close();
	}
	}
	public LinkedHashMap<String, String> fnGettblSalesQuoteTypeMstr()
	{
	 LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
	 open();
	 Cursor cursor= db.rawQuery("SELECT SalesQuotetypeId,SalesQuoteType from tblSalesQuoteTypeMstr", null);// Where PNodeID='"+TSIID+"'
	//(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
	 // close();
	 try {
	  if(cursor.getCount()>0)
	 {
	   if (cursor.moveToFirst())
	  {
	    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
	     hmapQuestionMstr.put((String) cursor.getString(1),(String) cursor.getString(0));
	 //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
	     cursor.moveToNext();
	    }
	  }
	 }
	 return hmapQuestionMstr;
	 } 
	 finally 
	 {
	 cursor.close();
	 close();
	}
	}
	
	public String[] fetchAllDataFromtblStoreSKUWiseDaySummary()
	{
		
		Cursor cursor = db.rawQuery("SELECT *  FROM tblStoreSKUWiseDaySummary", null);
		try {
			String allData[]=new String[cursor.getCount()];
			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					
					allData[i] = (String) cursor.getString(0).trim()+"^"+(String) cursor.getString(1).trim()+"^"+(String) cursor.getString(2).trim()+"^"+(String) cursor.getString(3).trim()+"^"+(String) cursor.getString(4).trim()+"^"+(String) cursor.getString(5).trim()+"^"+(String) cursor.getString(6).trim()+"^"+(String) cursor.getString(7).trim()+"^"+(String) cursor.getString(8).trim()+"^"+(String) cursor.getString(9).trim()+"^"+(String) cursor.getString(10).trim()+"^"+(String) cursor.getString(11).trim()+"^"+(String) cursor.getString(12).trim()+"^"+(String) cursor.getString(13).trim();
					//// System.out.println("Value inserting 233 fetching :"+allData[i]);
					cursor.moveToNext();
					// cursor.close();
				}

			}
    ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return allData;
		} finally {
			cursor.close();
		}

	}
	
	
	
	
	
	
	public long savetblAllSummary(int AutoId,String Measures,String TodaysSummary,String MTDSummary)
	{
		
		ContentValues initialValues = new ContentValues();

		initialValues.put("AutoId", AutoId);
		initialValues.put("Measures", Measures.trim());
		initialValues.put("TodaysSummary", TodaysSummary.trim());
		initialValues.put("MTDSummary", MTDSummary.trim());
		
		
		return db.insert(DATABASE_TABLE_MAIN234, null, initialValues);
	}
	
	
	/* private static final String DATABASE_CREATE_TABLE_234 = "create table tblAllSummary (AutoId int not null,Measures text null," +
		 		"TodaysSummary text null,MTDSummary text null);";*/
	
	public String[] fetchAllDataFromtblAllSummary()
	{
		int ScodecolumnIndex = 0;
		
		Cursor cursor = db.rawQuery("SELECT *  FROM tblAllSummary", null);
		try {
			String allData[]=new String[cursor.getCount()];
			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					ScodecolumnIndex = 1;
					allData[i] = (String) cursor.getString(0).trim()+"^"+(String) cursor.getString(1).trim()+"^"+(String) cursor.getString(2).trim()+"^"+(String) cursor.getString(3).trim();
					//// System.out.println("Value inserting 231 fetching :"+allData[i]);
					cursor.moveToNext();
					// cursor.close();
				}

			}
    ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return allData;
		} finally {
			cursor.close();
		}

	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	 public HashMap<String, String> getProductPicInfo(File[] fileImageName,String storeId)
	 {
		 HashMap<String, String> pathForPhotoInfo= new HashMap<>();//=null;
		 open();
		 for(int position=0;position<fileImageName.length;position++)
		 {
			 Cursor cur=db.rawQuery("Select PhotoName,ProductID,ReasonForReturn from tblStoreProductPhotoDetail where PhotoName = '"+ fileImageName[position].getName() +"' and StoreID = '"+storeId+"'", null);
			 if(cur.getCount()>0)
			 {
				 if(cur.moveToFirst())
				 {
					 // System.out.println("System Value :"+cur.getString(0)+"="+ cur.getString(1)+"~"+cur.getString(2));
					 pathForPhotoInfo.put(cur.getString(0), cur.getString(1)+"~"+cur.getString(2));
					 
				 }
				
			 } 
		 }
		
		 close();
		 return pathForPhotoInfo;
	 }










 public long insertPhotoDetail(String storeId,String productId,String clickedDate,String photoName,
		 String reasonForPhotoReturn,String photoValidation,String pdaPhotoPath,int Sstat,String OrderPDAID)
	 {
		
		 open();
	   ContentValues initialValues = new ContentValues();
	   // StoreID ,ProductID ,ClickedDateTime ,PhotoName ,PhotoValidation ,PDAPhotoPath ,outstat 
	   initialValues.put("StoreID", storeId.trim()); 
	   initialValues.put("ProductID", productId.trim());
	   initialValues.put("ClickedDateTime", clickedDate.trim());
	   initialValues.put("PhotoName", photoName.trim()); 
	   initialValues.put("ReasonForReturn", reasonForPhotoReturn.trim()); 
	  
	   initialValues.put("PhotoValidation", photoValidation.trim());
	   initialValues.put("PDAPhotoPath", pdaPhotoPath.trim());
	   initialValues.put("Sstat", Sstat);
	   initialValues.put("OrderIDPDA", OrderPDAID);
	   
	  long inserted=db.insert(DATABASE_TABLE_Main212, null, initialValues); 
	  close();
	   return inserted;
	 }
 
 
/* tblStoreMaterialPhotoDetail (RouteID text null,StoreID text null,MaterialID text null,ClickedDateTime text null,
		 PhotoName text null,PhotoValidation text null,PDAPhotoPath text null,Sstat integer null)*/
 
 public long insertMaterialPhotoDetail(String storeId,String MaterialID,String clickedDate,String photoName,
		 String reasonForPhotoReturn,String photoValidation,String pdaPhotoPath,int Sstat)
	 {
		
		 open();
		 
		String RouteID= GetActiveRouteID();
	   ContentValues initialValues = new ContentValues();
	   // StoreID ,ProductID ,ClickedDateTime ,PhotoName ,PhotoValidation ,PDAPhotoPath ,outstat 
	   initialValues.put("RouteID", RouteID.trim()); 
	   initialValues.put("StoreID", storeId.trim()); 
	   initialValues.put("MaterialID", MaterialID.trim());
	   initialValues.put("ClickedDateTime", clickedDate.trim());
	   initialValues.put("PhotoName", photoName.trim()); 
	  
	   initialValues.put("PhotoValidation", photoValidation.trim());
	   initialValues.put("PDAPhotoPath", pdaPhotoPath.trim());
	   initialValues.put("Sstat", Sstat);
	   
	  long inserted=db.insert(DATABASE_TABLE_Main164, null, initialValues); 
	  close();
	   return inserted;
	 }
 
 
 
 
 /*private static final String DATABASE_CREATE_TABLE_163 = "create table tblStoreMaterialDetail" +
 		" (RouteID text null,StoreID text null,MaterialID text null,ExistStock integer null,ReturntoDistributor integer null," +
 		"FreshOrder integer null,DiscardDamage integer null,Sstat integer null);";*/
 
 
 public long insertStoreMaterialDetail(String storeId,String MaterialID,int ExistStock,int ReturntoDistributor,
		 int FreshOrder,int DiscardDamage,int Sstat)
	 {
		
		 open();
		 
		String RouteID= GetActiveRouteID();
	   ContentValues initialValues = new ContentValues();
	   // StoreID ,ProductID ,ClickedDateTime ,PhotoName ,PhotoValidation ,PDAPhotoPath ,outstat 
	   initialValues.put("RouteID", RouteID.trim()); 
	   initialValues.put("StoreID", storeId.trim()); 
	   initialValues.put("MaterialID", MaterialID.trim());
	   initialValues.put("ExistStock", ExistStock);
	   initialValues.put("ReturntoDistributor", ReturntoDistributor); 
	  
	   initialValues.put("FreshOrder", FreshOrder);
	   initialValues.put("DiscardDamage",DiscardDamage);
	   initialValues.put("Sstat", Sstat);
	   
	  long inserted=db.insert(DATABASE_TABLE_Main163, null, initialValues); 
	  close();
	   return inserted;
	 }













 public void updatePhotoValidation(String validation,String imageNameToUpdate)
 {

		 open();
			final ContentValues values = new ContentValues();
			values.put("PhotoValidation", validation);
			int affected = db.update("tblStoreProductPhotoDetail", values, "PhotoName=?",
					new String[] { imageNameToUpdate });
			close();
		
		}
 
 
 public void updatePhotoValidationMaterial(String validation,String imageNameToUpdate)
 {

		 open();
			final ContentValues values = new ContentValues();
			values.put("PhotoValidation", validation);
			int affected = db.update("tblStoreMaterialPhotoDetail", values, "PhotoName=?",
					new String[] { imageNameToUpdate });
			close();
		
		}
	
 public String[] deletFromSDcCardPhotoValidation(String storeId) {

	 String[] imageNameToBeDeleted = null;
	 open();
	
	 Cursor cursor = db.rawQuery("SELECT  PhotoName from tblStoreProductPhotoDetail where StoreID='"+storeId+"'", null);
	 try{
			if(cursor.getCount()>0)
			{
				imageNameToBeDeleted=new String[cursor.getCount()];
				if(cursor.moveToFirst())
				{
					for(int i=0;i<cursor.getCount();i++)
					{
						imageNameToBeDeleted[i]=cursor.getString(0);
						cursor.moveToNext();
					}
				}
			}
			else
			{
				imageNameToBeDeleted=new String[1];
				imageNameToBeDeleted[0]="No Data";
			}
	 }finally
	 {
		 cursor.close();
		 close(); 
	 }

		
	//	Log.w(TAG, "affected records: " + affected);

		//Log.w(TAG, "UpdateStoreActualLatLongi added..");
	 return imageNameToBeDeleted;
	}

	
	
	 public long insertPhotoDetail(String storeId,String productId,String clickedDate,String photoName,String photoValidation,String pdaPhotoPath,String outstat)
	 {

	   ContentValues initialValues = new ContentValues();
	   // StoreID ,ProductID ,ClickedDateTime ,PhotoName ,PhotoValidation ,PDAPhotoPath ,outstat 
	   initialValues.put("StoreID", storeId.trim()); 
	   initialValues.put("ProductID", productId.trim());
	   initialValues.put("ClickedDateTime", clickedDate.trim());
	   initialValues.put("PhotoName", photoName.trim()); 
	   initialValues.put("PhotoValidation", photoValidation.trim());
	   initialValues.put("PDAPhotoPath", pdaPhotoPath.trim());
	   initialValues.put("outstat", outstat.trim());
	   
	  
	   return db.insert(DATABASE_TABLE_Main212, null, initialValues); 
	 }
	
	
	public long savetblStoreTypeMstr(int AutoIdStore,int StoreTypeID,String StoreTypeDescr)
	{
						
						ContentValues initialValues = new ContentValues();
						initialValues.put("AutoIdStore", AutoIdStore); 
						initialValues.put("StoreTypeID", StoreTypeID); 
						initialValues.put("StoreTypeDescr", StoreTypeDescr.trim()); 
					
						//// System.out.println("Arjun data insert properly tblStoreTypeMstrr ");
						
						return db.insert(DATABASE_TABLE_MAIN221, null, initialValues);	
	}
	
	public String fetchStoreTypeDescrBasicOfStoreTypeID(int StoreTypeID)
	{
	
		int SnamecolumnIndex1 = 0;
		String LocIDDesc="0";
		Cursor cursor = db.rawQuery("SELECT  StoreTypeDescr from tblStoreTypeMstr where StoreTypeID='"+StoreTypeID+"'", null);
		try {
			
			if (cursor.moveToFirst()) {
				
				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					LocIDDesc = (String) cursor.getString(SnamecolumnIndex1).trim();
					
					//// System.out.println("Fetching StoreTypeDescr:"+LocIDDesc);
					cursor.moveToNext();
					}

			}
			return LocIDDesc;
		} finally {
			cursor.close();
		}
		

	}
	
	
	
	
	
	
	public long savetblTradeChannelMstr(int AutoIdStore,int TradeChannelID,String TradeChannelName)
	{
						
						ContentValues initialValues = new ContentValues();
						initialValues.put("AutoIdStore", AutoIdStore); 
						initialValues.put("TradeChannelID", TradeChannelID); 
						initialValues.put("TradeChannelName", TradeChannelName.trim()); 
					
						//// System.out.println("Arjun data insert properly tblTradeChannelMstr ");
						return db.insert(DATABASE_TABLE_MAIN223, null, initialValues);	
	}
	
	public String[] fnGetAllTradeChannelNames() {

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT TradeChannelName FROM tblTradeChannelMstr", null);
		try {
			String strStoreTypeNamesDetais[] = new String[cursor2.getCount()+1];
			if(cursor2.getCount()==0)
			{
				strStoreTypeNamesDetais[0]="Please Select Trade Channel";
			}
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					if(i==0)
					{
						strStoreTypeNamesDetais[i]="Please Select Trade Channel";
					}
					strStoreTypeNamesDetais[i+1] = cursor2.getString(LoncolumnIndex);
					cursor2.moveToNext();
					
				}

			}
			return strStoreTypeNamesDetais;
		} finally {
			cursor2.close();
		}

	}
	
	public String[] fnGetAllTradeChannelIDs() 
	{

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT TradeChannelID FROM tblTradeChannelMstr", null);
		try {
			String strStoreTypeIdsDetais[] = new String[cursor2.getCount()+1];
			if(cursor2.getCount()==0)
			{
				strStoreTypeIdsDetais[0]="0";
			}
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					if(i==0)
					{
						strStoreTypeIdsDetais[i]="0";
					}
					strStoreTypeIdsDetais[i+1] = cursor2
							.getString(LoncolumnIndex);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strStoreTypeIdsDetais;
		} finally {
			cursor2.close();
		}

	}
	
	
	
	// Start Fifth Table Working
	public long savetblStoreProductClassificationTypeListMstr(int AutoIdStore,int CategoryNodeID,
			int CategoryNodeType,String Category,int ProductTypeNodeID,int ProductTypeNodeType,String ProductType,int IsCategorySeleted,int IsSubCategorySeleted,String SubCategoryValue)
	{
						
						ContentValues initialValues = new ContentValues();
						initialValues.put("AutoIdStore", AutoIdStore); 
						initialValues.put("CategoryNodeID", CategoryNodeID); 
						initialValues.put("CategoryNodeType", CategoryNodeType); 
						initialValues.put("Category", Category); 
						initialValues.put("ProductTypeNodeID", ProductTypeNodeID); 
						initialValues.put("ProductTypeNodeType", ProductTypeNodeType); 
						initialValues.put("ProductType", ProductType); 
						initialValues.put("IsCategorySeleted", IsCategorySeleted);
						initialValues.put("IsSubCategorySeleted", IsSubCategorySeleted);
						initialValues.put("SubCategoryValue", SubCategoryValue);
					
					//	// System.out.println("Arjun data insert properly StoreProductClassificationType ");
						return db.insert(DATABASE_TABLE_MAIN222, null, initialValues);	
	}
	
	public void fnCheckCategoryIds()
	{
		try
        {
           db.execSQL("UPDATE tblStoreProductClassificationTypeListMstr SET IsCategorySeleted=0" );
          // // System.out.println("Anil Dangi SET flgTodayRoute= 0 :");
		}
      catch (Exception ex)
        {
			Log.e(TAG, ex.toString());
		}
	}
	
	public void fnTickCheckCategoryId(int CatId)
	{
		try
        {
           db.execSQL("UPDATE tblStoreProductClassificationTypeListMstr SET IsCategorySeleted=1 where CategoryNodeID="+ CatId);
          // // System.out.println("Anil Dangi SET flgTodayRoute= 0 :");
		}
      catch (Exception ex)
        {
			Log.e(TAG, ex.toString());
		}
	}
	
	
	
public void funInsertDataStoreCategoryProductWise(String RouteID,String StoreID)
{
db.execSQL("INSERT INTO tblTemp (ProductType,RouteID,StoreID,CategoryNodeID,CategoryNodeType,Category,ProductTypeNodeID,ProductTypeNodeType,IsCategorySeleted,IsSubCategorySeleted,SubCategoryValue,Sstat) SELECT DISTINCT ProductType,'"+ RouteID +"','"+StoreID+"',CategoryNodeID,CategoryNodeType,Category,ProductTypeNodeID,ProductTypeNodeType,IsCategorySeleted,IsSubCategorySeleted,ifnull(SubCategoryValue,'0'),1 FROM   tblStoreProductClassificationTypeListMstr where tblStoreProductClassificationTypeListMstr.IsCategorySeleted=1 and tblStoreProductClassificationTypeListMstr.IsSubCategorySeleted=1");
}



public void funResetMainTables()
{
db.execSQL("Update tblStoreProductClassificationTypeListMstr Set IsCategorySeleted=0");
db.execSQL("Update tblStoreProductClassificationTypeListMstr Set IsSubCategorySeleted=0");
db.execSQL("Update tblStoreProductClassificationTypeListMstr Set SubCategoryValue=''");
}




	public void fnCheckUnCheckSubCategoryId(int CatId,int SubCatId,int SelectStatus)
	{
		/*try
        {*/
           db.execSQL("UPDATE tblStoreProductClassificationTypeListMstr SET IsSubCategorySeleted="+SelectStatus +" where CategoryNodeID="+ CatId +" and ProductTypeNodeID="+SubCatId);
          // // System.out.println("Anil Dangi SET flgTodayRoute= 0 :");
		/*}
      catch (Exception ex)
        {
			Log.e(TAG, ex.toString());
		}*/
	}
	
	
	public void fnUpdateSubCategoryValue(int CatId,int SubCatId,String SubCatValue)
	{
		/*try
        {*/
           db.execSQL("UPDATE tblStoreProductClassificationTypeListMstr SET SubCategoryValue='"+SubCatValue +"' where CategoryNodeID="+ CatId +" and ProductTypeNodeID="+SubCatId);
          // // System.out.println("Anil Dangi SET flgTodayRoute= 0 :");
		/*}
      catch (Exception ex)
        {
			Log.e(TAG, ex.toString());
		}*/
	}
	public String[] fnGetAllSubCategoryNames(String CategoryNodeID) {

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductType  FROM tblStoreProductClassificationTypeListMstr where CategoryNodeID='"+ CategoryNodeID + "'", null);
		try {
			String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];
			/*if(cursor2.getCount()==0)
			{
				strStoreTypeNamesDetais[0]="Please select Store Product Classification"; 
			}*/
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					/*if(i==0)
					{
						strStoreTypeNamesDetais[i]="Please select Store Product Classification";
					}*/
					//strStoreTypeNamesDetais[i+1] = cursor2.getString(LoncolumnIndex);
					strStoreTypeNamesDetais[i] = cursor2.getString(LoncolumnIndex);
					cursor2.moveToNext();
					
				}

			}
			return strStoreTypeNamesDetais;
		} finally {
			cursor2.close();
		}

	}
	
	
	
	public String[] fnGetAllSubCategoryCheckStatus(String CategoryNodeID) {

		int LoncolumnIndex = 1;

		Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductType,IsSubCategorySeleted  FROM tblStoreProductClassificationTypeListMstr where CategoryNodeID="+ CategoryNodeID, null);
		try {
			String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];
			/*if(cursor2.getCount()==0)
			{
				strStoreTypeNamesDetais[0]="Please select Store Product Classification"; 
			}*/
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					/*if(i==0)
					{
						strStoreTypeNamesDetais[i]="Please select Store Product Classification";
					}*/
					//strStoreTypeNamesDetais[i+1] = cursor2.getString(LoncolumnIndex);
					strStoreTypeNamesDetais[i] = cursor2.getString(LoncolumnIndex);
					
				//	// System.out.println("Sunil SubCategory check  strStoreTypeNamesDetais[i] :"+strStoreTypeNamesDetais[i]);
					cursor2.moveToNext();
					
				}

			}
			return strStoreTypeNamesDetais;
		} finally {
			cursor2.close();
		}

	}
	
	
	public String[] fnGetAllSubCategoryValues(String CategoryNodeID) {

		int LoncolumnIndex = 1;

		Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductType,SubCategoryValue  FROM tblStoreProductClassificationTypeListMstr where CategoryNodeID="+ CategoryNodeID, null);
		try {
			String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];
			/*if(cursor2.getCount()==0)
			{
				strStoreTypeNamesDetais[0]="Please select Store Product Classification"; 
			}*/
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					/*if(i==0)
					{
						strStoreTypeNamesDetais[i]="Please select Store Product Classification";
					}*/
					//strStoreTypeNamesDetais[i+1] = cursor2.getString(LoncolumnIndex);
					strStoreTypeNamesDetais[i] = cursor2.getString(LoncolumnIndex);
					
				//	// System.out.println("Sunil SubCategory check  strStoreTypeNamesDetais[i] :"+strStoreTypeNamesDetais[i]);
					cursor2.moveToNext();
					
				}

			}
			return strStoreTypeNamesDetais;
		} finally {
			cursor2.close();
		}

	}
	
	public String[] fnGetAllSubCategoryIds(String CategoryNodeID) 
	{

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductTypeNodeID FROM tblStoreProductClassificationTypeListMstr where CategoryNodeID='"+ CategoryNodeID + "'", null);
		try {
			String strStoreTypeIdsDetais[] = new String[cursor2.getCount()];
			/*if(cursor2.getCount()==0)
			{
				strStoreTypeIdsDetais[0]="0";
			}*/
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					/*if(i==0)
					{
						strStoreTypeIdsDetais[i]="0";
					}*/
					strStoreTypeIdsDetais[i] = cursor2
							.getString(LoncolumnIndex);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strStoreTypeIdsDetais;
		} finally {
			cursor2.close();
		}

	}
	
	
	
	
	public String fetchStoreProductClassificationDescrBasicOfStoreProductClassificationID(int StoreProductClassificationID)
	{
	
		int SnamecolumnIndex1 = 0;
		String LocIDDesc="0";
		Cursor cursor = db.rawQuery("SELECT  StoreProductClassificationDescr from tblStoreProductClassificationTypeListMstr where StoreProductClassificationID='"+StoreProductClassificationID+"'", null);
		try {
			
			if (cursor.moveToFirst()) {
				
				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					LocIDDesc = (String) cursor.getString(SnamecolumnIndex1).trim();
					
				//	// System.out.println("Fetching StoreTypeDescr:"+LocIDDesc);
					cursor.moveToNext();
					}

			}
			return LocIDDesc;
		} finally {
			cursor.close();
		}
		

	}
	
	public String[] fnGetAllStoreProductClassificationTypeNames() {

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT DISTINCT Category  FROM tblStoreProductClassificationTypeListMstr order by CategoryNodeID", null);
		try {
			String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];
			
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					strStoreTypeNamesDetais[i]= cursor2.getString(LoncolumnIndex);
					//// System.out.println("Abhiav Raj New :"+strStoreTypeNamesDetais[i]);
					cursor2.moveToNext();
					
				}

			}
			return strStoreTypeNamesDetais;
		} finally {
			cursor2.close();
		}

	}
	
	public String[] fnGetAllStoreProductClassificationTypeIds() 
	{

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT DISTINCT CategoryNodeID FROM tblStoreProductClassificationTypeListMstr order by CategoryNodeID", null);
		try {
			String strStoreTypeIdsDetais[] = new String[cursor2.getCount()];
			
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					
					strStoreTypeIdsDetais[i] = cursor2.getString(LoncolumnIndex);
					cursor2.moveToNext();
					
				}

			}
			return strStoreTypeIdsDetais;
		} finally {
			cursor2.close();
		}

	}
	
	// End Second Table Working
	
		
	
	
	public String[] fnGetAllRouteDescrNewStore() {

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr", null);
		try {
			String strStoreTypeNamesDetais[] = new String[cursor2.getCount()+1];
			if(cursor2.getCount()==0)
			{
				strStoreTypeNamesDetais[0]="Please Select Route";
			}
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					if(i==0)
					{
						strStoreTypeNamesDetais[i]="Please Select Route";
					}
					strStoreTypeNamesDetais[i+1] = cursor2.getString(LoncolumnIndex);
				//	// System.out.println("Fetching Data from tblRouteMstr is Desc :"+strStoreTypeNamesDetais[i+1]);
					cursor2.moveToNext();
					
				}

			}
			return strStoreTypeNamesDetais;
		} finally {
			cursor2.close();
		}

	}
	
	//tblRouteMstr(AutoIdStore integer null,RouteID integer null, RouteDescr text null);";
	
	
		
	
	public String[] fnGetAllRouteIDNewStore() 
	{

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr", null);
		try {
			String strStoreTypeIdsDetais[] = new String[cursor2.getCount()+1];
			if(cursor2.getCount()==0)
			{
				strStoreTypeIdsDetais[0]="0";
			}
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					if(i==0)
					{
						strStoreTypeIdsDetais[i]="0";
					}
					strStoreTypeIdsDetais[i+1] = cursor2.getString(LoncolumnIndex);
					//// System.out.println("Fetching Data from tblRouteMstr is ID :"+strStoreTypeIdsDetais[i+1]);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strStoreTypeIdsDetais;
		} finally {
			cursor2.close();
		}

	}
	
	public String[] fnGetAllStoreTypeNames() {

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT StoreTypeDescr FROM tblStoreTypeMstr", null);
		try {
			String strStoreTypeNamesDetais[] = new String[cursor2.getCount()+1];
			if(cursor2.getCount()==0)
			{
				strStoreTypeNamesDetais[0]="Please Select Store Type";
			}
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					if(i==0)
					{
						strStoreTypeNamesDetais[i]="Please Select Store Type";
					}
					strStoreTypeNamesDetais[i+1] = cursor2.getString(LoncolumnIndex);
				//	// System.out.println("Fetching tblStoreTypeMstr from tblRouteMstr is Desc :"+strStoreTypeNamesDetais[i+1]);
					cursor2.moveToNext();
					
				}

			}
			return strStoreTypeNamesDetais;
		} finally {
			cursor2.close();
		}

	}
	
	public String[] fnGetAllStoreTypeIds() 
	{

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT StoreTypeID FROM tblStoreTypeMstr", null);
		try {
			String strStoreTypeIdsDetais[] = new String[cursor2.getCount()+1];
			if(cursor2.getCount()==0)
			{
				strStoreTypeIdsDetais[0]="0";
			}
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					if(i==0)
					{
						strStoreTypeIdsDetais[i]="0";
					}
					strStoreTypeIdsDetais[i+1] = cursor2.getString(LoncolumnIndex);
				//	// System.out.println("Fetching tblStoreTypeMstr from tblStoreTypeMstr is Desc :"+strStoreTypeIdsDetais[i+1]);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strStoreTypeIdsDetais;
		} finally {
			cursor2.close();
		}

	}
	
	
	
	
	public void fnReleaseTableUnReuqiredData()
	{
      try
        {
           db.execSQL("Delete from tblTemp where Sstat=4" );
           db.execSQL("Delete from tblNewStoreEntries where Sstat=4" );
        //   // System.out.println("Anil Dangi SET flgTodayRoute= 0 :");
		}
      catch (Exception ex)
        {
			Log.e(TAG, ex.toString());
		}

	}
	
	
	
	
	public long savetblStoreMainAfterCountNUmberOfStore(String RouteID,String StoreID,String StoreName,String RetailerName,String emailID,String TinNo,
			String RetailerContactNo,String StoreAddress,String StorePincode,String City,String KeyAccount,int TradeChannelID, int StoreTypeId,
			int StoreCategoryId,int RetailSalesTypeId,int StorePotentialId,String StoreProductClassificationId,
			String VisitStartTS, String Imei,String BatteryStatus,int Sstat,int CityId,
			String ActualLatitude,String ActualLongitude,String Accuracy,String LocProvider)
	  {
		
		 long  syncTIMESTAMP = System.currentTimeMillis();
			Date dateobj = new Date(syncTIMESTAMP);
			SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss",Locale.ENGLISH);
			String StampEndsTime = df.format(dateobj);

		ContentValues initialValues = new ContentValues();
		
		initialValues.put("RouteID", RouteID); 
		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("StoreName", StoreName.trim()); 
		initialValues.put("RetailerName", RetailerName.trim());
		initialValues.put("emailID", emailID);
		initialValues.put("TinNo", TinNo);
		initialValues.put("RetailerContactNo", RetailerContactNo.trim());
		initialValues.put("StoreAddress", StoreAddress);
		initialValues.put("StorePincode", StorePincode);
		initialValues.put("City", City);
		initialValues.put("KeyAccount", KeyAccount);
		initialValues.put("TradeChannelID", TradeChannelID);
		
		initialValues.put("StoreAttrHierID", StoreTypeId);
		 
		initialValues.put("StoreProductClassificationId", StoreProductClassificationId.trim()); 

        initialValues.put("ActualLatitude", ActualLatitude.trim()); 
		initialValues.put("ActualLongitude", ActualLongitude.trim()); 
		initialValues.put("LocProvider", LocProvider.trim()); 
		initialValues.put("Accuracy", Accuracy.trim()); 
		//initialValues.put("Accuracy", LocProvider.trim()); 
		//// System.out.println("DateTime fnDBKenya savetblStoreMainAfterCountNUmberOfStore = "+VisitStartTS);
		initialValues.put("VisitStartTS", VisitStartTS.trim()); 
		initialValues.put("VisitEndTS", StampEndsTime.trim()); 

		initialValues.put("Imei", Imei.trim());
		initialValues.put("BatteryStatus", BatteryStatus.trim());
		initialValues.put("Sstat", Sstat); 
		initialValues.put("CityId", CityId);
		initialValues.put("AppVersion", DATABASE_VERSION);
		checkNumberOfStore++;

		return db.insert(DATABASE_TABLE_MAIN21, null, initialValues);	
	  }

/*	public void deletetblstoreMstrOnStoreIDBasis(String StoreID) {

		db.execSQL("DELETE FROM tblStoreList WHERE StoreID ='"+ StoreID +"'");
		db.execSQL("DELETE FROM tblNewStoreListEntries WHERE StoreID ='"+ StoreID +"'");

	}*/

	public void deletetblstoreMstrOnStoreIDBasis(String StoreID)
	{

		db.execSQL("DELETE FROM tblStoreList WHERE StoreID ='"+ StoreID +"'");
		db.execSQL("DELETE FROM tblNewStoreListEntries WHERE StoreID ='"+ StoreID +"'");


	}

    public void savetblStoreMain(String RouteID,String StoreID,String StoreName,String RetailerName,String emailID,
                                 String TinNo,
                                 String RetailerContactNo,String StoreAddress,String StorePincode,String City,String KeyAccount,
                                 int TradeChannelID, int StoreTypeId,
                                 int StoreCategoryId,int RetailSalesTypeId,int StorePotentialId,String StoreProductClassificationId,
                                 String VisitStartTS, String Imei,String BatteryStatus,int Sstat,String ActualLatitude,
                                 String ActualLongitude,String Accuracy,String LocProvider,int IsNewStoreDataCompleteSaved,
                                 String fetchAddress,String PaymentStage,int flgHasQuote,int flgAllowQuotation,
                                 int flgSubmitFromQuotation,String flgGSTCapture,String flgGSTCompliance,String GSTNumber,int flgGSTRecordFromServer, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking, int flgRestart, int flgStoreOrder, String StoreCity,String StorePinCode, String StoreState,String CityId,String StateId,String MapAddress,String MapCity,String MapPinCode,String MapState)
    {

        int MaxAutoStore = 0;
        int cntTotStore=0;
        cntTotStore=fnGetCountForNewStore();
        String strGetMaxIDForNewStore="0";
        //String activeRid;
        //activeRid = GetActiveRouteID();
        if(cntTotStore>0)
        {
            MaxAutoStore = fnGetMaxAutoStoreIncrementForNewStore();
            MaxAutoStore = MaxAutoStore + 1;
            strGetMaxIDForNewStore = fnGetMaxIdWithIncrementForNewStore(MaxAutoStore);
        }
        else
        {
            MaxAutoStore=0;
            MaxAutoStore = MaxAutoStore + 1;

            strGetMaxIDForNewStore = "-000^" + (1) + "$" + MaxAutoStore;

        }

        if (!StoreID.equals("") && !StoreID.equals(null) && !StoreID.equals(0))
        {

            String prevDate2Send = GetPrevDate();

            if(prevDate2Send.equals("") || prevDate2Send.equals("NA"))
            {
                long syncTIMESTAMP = System.currentTimeMillis();
                Date dateobj = new Date(syncTIMESTAMP);
                SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy",Locale.ENGLISH);
                prevDate2Send = df.format(dateobj);
            }


            saveSOAPdataStoreListNewStore(StoreID, ""+StoreTypeId, StoreName, Double.parseDouble(ActualLatitude.trim()), Double.parseDouble(ActualLongitude.trim()), "", "", prevDate2Send, MaxAutoStore,Sstat,Accuracy.trim(),LocProvider.trim(),RouteID,BatteryStatus,IsNewStoreDataCompleteSaved,fetchAddress,PaymentStage,flgHasQuote,flgAllowQuotation,flgSubmitFromQuotation,flgGSTCapture,flgGSTCompliance,GSTNumber,flgGSTRecordFromServer,flgLocationServicesOnOff,flgGPSOnOff,flgNetworkOnOff,flgFusedOnOff,flgInternetOnOffWhileLocationTracking,flgRestart,flgStoreOrder,StoreCity,StorePinCode,StoreState); // in last parameter Fdate


        }
						
						
	}	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public int checkRouteIDExistInStoreListTable(int StoreRouteID) 
	{
		
		Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblStoreList WHERE StoreRouteID="+StoreRouteID, null);

		try {
			
			int check=0;
			
			if (cursor.getCount() > 0)
			{
               if (cursor.moveToFirst()) 
               {
                   if (cursor.getInt(0) > 0) {
                       check = 1;
                   } else {
                       check = 0;
                   }
				}

			}
			return check;

		} finally {
			cursor.close();
		}

	}
	
	public long inserttblForPDAGetLastVisitDate(String StoreID,String VisitDate,String flgOrder)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("VisitDate", VisitDate.trim());
						initialValues.put("flgOrder", flgOrder.trim());
						
						// System.out.println("Sunil Data Print StoreID :"+StoreID);
						// // // // System.out.println("Sunil Data Print VisitDate :"+VisitDate);
						// // // System.out.println("Sunil Data Print flgOrder :"+flgOrder);
						// // System.out.println("Sunil Data Print Data insert in  DATABASE_TABLE_MAIN141");
						
						
						return db.insert(DATABASE_TABLE_MAIN141 , null, initialValues);	
	}
	
	public int counttblForPDAGetLastVisitDate(String StoreID) 
	{
		Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblForPDAGetLastVisitDate WHERE StoreID ='"+ StoreID + "'", null);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	public String fnGetVisitDateAndflgOrderFromtblForPDAGetLastVisitDate(String StoreID) {

		Cursor cursorE2 = db.rawQuery("SELECT VisitDate,flgOrder FROM tblForPDAGetLastVisitDate WHERE StoreID ='"
						+ StoreID + "'", null);
		String LastTransDate = "";
		int ScodecolumnIndex = 0;
		try {

			if (cursorE2.moveToFirst()) {

				for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
				{
					LastTransDate = (String) cursorE2.getString(0) +"^"+(String) cursorE2.getString(1);
					// // System.out.println("Sunil Jai Testing LastTransDate :"+LastTransDate);
					cursorE2.moveToNext();
				}
			}
			return LastTransDate;
		} finally {
			cursorE2.close();
		}

	}
	
	
	public long inserttblForPDAGetLastOrderDate(String StoreID,String OrderDate,String flgExecutionSummary)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("OrderDate", OrderDate.trim());
						initialValues.put("flgExecutionSummary", flgExecutionSummary.trim());
						
						// // System.out.println("Sunil Data Print StoreID :"+StoreID);
						// // System.out.println("Sunil Data Print OrderDate :"+OrderDate);
						// // System.out.println("Sunil Data Print flgExecutionSummary :"+flgExecutionSummary);
						// // System.out.println("Sunil Data Print Data insert in  DATABASE_TABLE_MAIN142");
						
						return db.insert(DATABASE_TABLE_MAIN142 , null, initialValues);	
						
						
	}
	
	public int counttblForPDAGetLastOrderDate(String StoreID) 
	{
		Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblForPDAGetLastOrderDate WHERE StoreID ='"
						+ StoreID + "'", null);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	
	public String fnGettblForPDAGetLastOrderDate(String StoreID) {
		int ScodecolumnIndex = 0;

		Cursor cursorE2 = db.rawQuery("SELECT OrderDate,flgExecutionSummary FROM tblForPDAGetLastOrderDate WHERE StoreID ='"+ StoreID + "' Limit 1", null);
		String LastTransDate = "";
		
		try {

			if (cursorE2.moveToFirst()) {

				for (int i = 0; i <= (cursorE2.getCount() - 1); i++)
				{
					LastTransDate = (String) cursorE2.getString(0) +"^"+(String) cursorE2.getString(1);
					cursorE2.moveToNext();
				}
			}
			return LastTransDate;
		} finally {
			cursorE2.close();
		}

	}
	
	public long inserttblForPDAGetLastVisitDetails(String StoreID,String Date123,String Order123,String Stock,String SKUName,String ExecutionQty,String ProductID)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("Date123", Date123.trim());
						initialValues.put("Order123", Order123.trim());
						initialValues.put("Stock", Stock.trim()); 
						initialValues.put("SKUName", SKUName.trim());
						initialValues.put("ExecutionQty", ExecutionQty.trim());
                        initialValues.put("ProductID", ProductID.trim());

        // // System.out.println("Tbl creation string for Sunil Data Print Data insert in  DATABASE_TABLE_MAIN143");
						return db.insert(DATABASE_TABLE_MAIN143, null, initialValues);	
	}
	
	public int counttblForPDAGetLastVisitDetails(String StoreID) 
	{														
		Cursor cursorE2 = db.rawQuery("select Count(*) from tblForPDAGetLastVisitDetails WHERE StoreID ='"+ StoreID + "'", null);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	
	
	public String[] fetchDateFromtblForPDAGetLastVisitDetails(String StoreID) 
	{
		
		Cursor cursor = db
				.rawQuery("SELECT Date123 FROM tblForPDAGetLastVisitDetails WHERE StoreID ='"+ StoreID + "'", null);

		try {
			
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						CompleteResult[i] = (String) cursor.getString(0);
						
						////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);

						
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	
	public String[] fetchAllDataFromtblForPDAGetLastVisitDetails(String StoreID) 
	{
		
		Cursor cursor = db
				.rawQuery("SELECT SKUName, Stock, Order123, ExecutionQty FROM tblForPDAGetLastVisitDetails WHERE StoreID ='"+ StoreID + "'", null);

		try {
			
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						CompleteResult[i] = (String) cursor.getString(0)
								+ "^"
								+ (String) cursor.getString(1)
								+ "^"
								+ (String) cursor.getString(2)
								+ "^"
								+ (String) cursor.getString(3);
						
						////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);

						
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	 public HashMap<String, String> getProductPicInfoMaterial(File[] fileImageName,String storeId)
	 {
		 HashMap<String, String> pathForPhotoInfo= new HashMap<>();//=null;
		 open();
		 for(int position=0;position<fileImageName.length;position++)
		 {
			 Cursor cur=db.rawQuery("Select PhotoName,MaterialID from tblStoreMaterialPhotoDetail where PhotoName = '"+ fileImageName[position].getName() +"' and StoreID = '"+storeId+"'", null);
			 if(cur.getCount()>0)
			 {
				 if(cur.moveToFirst())
				 {
					 // System.out.println("System Value :"+cur.getString(0)+"="+ cur.getString(1)+"~"+cur.getString(2));
					 pathForPhotoInfo.put(cur.getString(0), cur.getString(1));
					 
				 }
				
			 } 
		 }
		
		 close();
		 return pathForPhotoInfo;
	 }


	 
	 	  public ArrayList<HashMap<String, String>> fetch_matID_ReturnData(String storeId) {
		    	 // System.out.println("Abhinav Raj is 2");
		      open();
		      ArrayList<HashMap<String, String>> totalProductDetail= new ArrayList<>(4);
		      
		      HashMap<String, String> hmapMatIDExistingStock= new HashMap<>();
		      HashMap<String, String> hmapMatIDReturntoDistributor= new HashMap<>();
		      HashMap<String, String> hmapMatIDFreshOrder= new HashMap<>();
		         
		      HashMap<String, String> hmapMatIDDiscardDamage= new HashMap<>();
		        
		     
		      
		      
		    /*  private static final String DATABASE_CREATE_TABLE_163 = "create table tblStoreMaterialDetail " +
		      		"(RouteID text null,StoreID text null,MaterialID text null,ExistStock integer null," +
		      		"ReturntoDistributor integer null,FreshOrder integer null,DiscardDamage integer null,Sstat integer null);";*/
		      
		      //Cursor cursor = db.rawQuery("SELECT ProductID,CategoryID,ProductShortName FROM tblProductList",null);
		      Cursor cursor = db.rawQuery("SELECT MaterialID,ExistStock,ReturntoDistributor,FreshOrder,DiscardDamage FROM tblStoreMaterialDetail where StoreID='"+storeId+"'",null);
			      try
		      {
		       if(cursor.getCount()>0)
		       {
		        if (cursor.moveToFirst()) {

		         for (int i = 0; i < cursor.getCount(); i++)
		         {
		        	 hmapMatIDExistingStock.put(cursor.getString(0), cursor.getString(1));
		          
		        	 hmapMatIDReturntoDistributor.put(cursor.getString(0), cursor.getString(2));
		        	 hmapMatIDFreshOrder.put(cursor.getString(0), cursor.getString(3));
		        	 hmapMatIDDiscardDamage.put(cursor.getString(0), cursor.getString(4));
		             cursor.moveToNext();
		          
		         }
		         totalProductDetail.add(0,hmapMatIDExistingStock);
		         totalProductDetail.add(1,hmapMatIDReturntoDistributor);
		         totalProductDetail.add(2,hmapMatIDFreshOrder);
		         totalProductDetail.add(3,hmapMatIDDiscardDamage);
		         
		        }
		       }
		       
		      
		       return totalProductDetail;
		      } finally {
		       cursor.close();
		       
		       close();
		      }
		      
		      
		     }
	
	public long inserttblForPDAGetLastOrderDetails(String StoreID,String OrderDate,String ProductID,String OrderQty,String FreeQty,String PrdName,String ExecutionQty)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("OrderDate", OrderDate.trim());
						initialValues.put("ProductID", ProductID.trim());
						initialValues.put("OrderQty", OrderQty.trim()); 
						initialValues.put("FreeQty", FreeQty.trim());
						initialValues.put("PrdName", PrdName.trim());
						initialValues.put("ExecutionQty", ExecutionQty.trim());
						
						// // System.out.println("Sunil Data Print Data insert in  DATABASE_TABLE_MAIN144");
						
						
						return db.insert(DATABASE_TABLE_MAIN144 , null, initialValues);	
	}
	
	public int counttblForPDAGetLastOrderDetails(String StoreID) 
	{
		Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblForPDAGetLastOrderDetails WHERE StoreID ='"
						+ StoreID + "'", null);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	
	
	public String[] fetchOrderDateFromtblForPDAGetLastOrderDetails(String StoreID) 
	{
		
		Cursor cursor = db
				.rawQuery(
						"SELECT OrderDate FROM tblForPDAGetLastOrderDetails WHERE StoreID ='"+ StoreID + "'", null);

		try {
			
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						CompleteResult[i] = (String) cursor.getString(0);
						
						////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);

						
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}

	
	public String[] fetchAllDataFromtblForPDAGetLastOrderDetails(String StoreID) 
	{
		
		Cursor cursor = db
				.rawQuery(
						"SELECT PrdName, OrderQty, FreeQty, ExecutionQty FROM tblForPDAGetLastOrderDetails WHERE StoreID ='"+ StoreID + "'", null);

		try {
			
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						CompleteResult[i] = (String) cursor.getString(0)
								+ "^"
								+ (String) cursor.getString(1)
								+ "^"
								+ (String) cursor.getString(2)
								+ "^"
								+ (String) cursor.getString(3);
						
						////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);

						
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	
	
	public long inserttblspForPDAGetLastOrderDetails_TotalValues(String StoreID,String OrderValue,String ExecutionValue)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("OrderValue", OrderValue.trim());
						initialValues.put("ExecutionValue", ExecutionValue.trim());
						
						// // System.out.println("Sunil Data Print Data insert in  DATABASE_TABLE_MAIN145");
						
						return db.insert(DATABASE_TABLE_MAIN145 , null, initialValues);	
	}
	
	public int counttblspForPDAGetLastOrderDetails_TotalValues(String StoreID) 
	{
		Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblspForPDAGetLastOrderDetailsTotalValues WHERE StoreID ='"
						+ StoreID + "'", null);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	
	public String[] fetchAllDataFromtblspForPDAGetLastOrderDetails_TotalValues(String StoreID) 
	{
		
		Cursor cursor = db
				.rawQuery(
						"SELECT OrderValue,ExecutionValue FROM tblspForPDAGetLastOrderDetailsTotalValues WHERE StoreID ='"+ StoreID + "'", null);

		try {
			
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						CompleteResult[i] = (String) cursor.getString(0)
								+ "_"
								+ (String) cursor.getString(1);
						
						////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);

						
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	
	
	
	public long inserttblForPDAGetExecutionSummary(String StoreID,String OrderDate,String ProductID,
			String OrderQty,String flgInvStatus,String ProductQty,String PrdName)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("OrderDate", OrderDate.trim());
						initialValues.put("ProductID", ProductID.trim());
						initialValues.put("OrderQty", OrderQty.trim()); 
						initialValues.put("flgInvStatus", flgInvStatus.trim());
						initialValues.put("ProductQty", ProductQty.trim());
						initialValues.put("PrdName", PrdName.trim());
						
						
						
						// // System.out.println("Sunil Data Print Data insert in  DATABASE_TABLE_MAIN146");
						
						
						return db.insert(DATABASE_TABLE_MAIN146 , null, initialValues);	
	}
	
	/*SELECT DISTINCT Category, MAX(CreationDate) 
	FROM MonitoringJob 
	GROUP BY Category 
	ORDER BY MAX(CreationDate) DESC, Category*/
	
	public String[] fetchOrderDateFromtblForPDAGetExecutionSummary(String StoreID) 
	{
		
		Cursor cursor = db
				.rawQuery(
						"SELECT DISTINCT OrderDate FROM tblForPDAGetExecutionSummary WHERE StoreID ='"+ StoreID + "'", null);

		try {
			
			//// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
			String DateResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						DateResult[i] = (String) cursor.getString(0);
						
						// // System.out.println("Aajtak value DateResult :"+DateResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);

						
						cursor.moveToNext();
					}
				}

			}
			return DateResult;

		} finally {
			cursor.close();
		}

	}
	
	
	public int fnfetchMinNoOfSKUFromtblCouponMasterNewFormat()
	{
		
		
		Cursor cursorE2 = db.rawQuery(
				"SELECT MinNoOfSKU FROM tblCouponMasterNewFormat", null);
		
		//////////// // System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {
				for (int i = 0; i < cursorE2.getCount(); i++)
				{
					if (!cursorE2.isNull(0))
					{
						chkI = Integer.parseInt(cursorE2.getString(0));
					} else {
						chkI = 0;
					}
					cursorE2.moveToNext();
				}
				
			}

		} finally {
			cursorE2.close();
		}
		//////////// // System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
		return chkI;
		
	}
	public Double fnfetchAdditionalAmountFromtblCouponSlabNewFormat()
	{
		
		Cursor cursorE2 = db.rawQuery(
				"SELECT AdditionalAmount FROM tblCouponSlabNewFormat", null);
		
		//////////// // System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
		Double chkI = 0.0;
		try {
			if (cursorE2.moveToFirst()) {
				for (int i = 0; i < cursorE2.getCount(); i++)
				{
					if (!cursorE2.isNull(0))
					{
						chkI = Double.parseDouble((cursorE2.getString(0)));
					} else {
						chkI = 0.0;
					}
					cursorE2.moveToNext();
				}
				
			}

		} finally {
			cursorE2.close();
		}
		//////////// // System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
		return chkI;
		
	}
	
	public int countCouponNewFormatApplyOrNot(String StoreID) 
	{
		Cursor cursorE2 = db.rawQuery("SELECT ProductID,flgMust,Qty FROM tblTempNewFormat WHERE flgMust=1 AND Qty>=MinQty_Value And StoreID='"+StoreID+"'", null);
		//Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblTempNewFormat WHERE (flgMust ="+1+" AND Qty>=MinQty_Value)", null);
		//Cursor cursorE2 = db.rawQuery("SELECT Qty,MinQty_Value FROM tblTempNewFormat WHERE flgMust = 1", null);
		//Cursor cursorE2 = db.rawQuery("SELECT Qty,MinQty_Value,flgMust FROM tblTempNewFormat", null);
		int chkI = 0;
		try
		{
			// // System.out.println("Sunil grater value getCount"+cursorE2.getCount());
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) 
				{
					chkI=1;
					/*for (int i = 0; i < cursorE2.getCount(); i++)
					{
						
						
						// // System.out.println("Sunil grater value ProductID"+cursorE2.getString(0).toString());	
						// // System.out.println("Sunil grater value flgMust"+cursorE2.getString(1).toString());	
						// // System.out.println("Sunil grater value Qty"+cursorE2.getString(2).toString());	
							cursorE2.moveToNext();
						
					}*/
					cursorE2.moveToNext();
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	
	
	public long fninsertPDAProductReturnDetails(int AutoReturnIdMstr,
			int AutoReturnIdDetails, String strProductId,
			String strProdReturnQty, Double ProdRate, Double ProdReturnValue,
			int proSingleAdjQty, Double proSingleAdjAmt,String CatId)
	{

		ContentValues initialValues = new ContentValues();

		//////////// // System.out.println("Saved AutoReturnIdMstr:" + AutoReturnIdMstr+ "Saved AutoReturnIdDetails:" + "" + AutoReturnIdDetails);

		String activeRid;
		activeRid = GetActiveRouteID();
		
		initialValues.put("AutoReturnDetailsId", AutoReturnIdDetails);
		initialValues.put("ReturnIdMstr", AutoReturnIdMstr);
		initialValues.put("ProductId", strProductId.trim());
		initialValues.put("ProdReturnQty", strProdReturnQty.trim());
		initialValues.put("ProdRate", ProdRate);
		initialValues.put("ProdReturnValue", ProdReturnValue);

		initialValues.put("AdjustReturnQty", proSingleAdjQty);
		initialValues.put("AdjustReturnValue", proSingleAdjAmt);


		initialValues.put("ProdReturnReason", " ");
		initialValues.put("ProdReturnReasonDescr", " ");
		initialValues.put("ProdLastOrderDate", " ");
		initialValues.put("ProdLastOrderQyt", " ");
		initialValues.put("CatId", CatId.trim());
		initialValues.put("RouteID", Integer.parseInt(activeRid));

		

		return db.insert(DATABASE_TABLE_MAIN20, null, initialValues);
	}
	
	
	public int fnCheckflgToShowCouponNewFormat()
	{
		
		
		Cursor cursorE2 = db.rawQuery(
				"SELECT CouponApplicable FROM tblCouponApplicableNewFormat", null);
		
		//////////// // System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {
				for (int i = 0; i < cursorE2.getCount(); i++)
				{
					if (!cursorE2.isNull(0))
					{
						chkI = Integer.parseInt(cursorE2.getString(0));
					} else {
						chkI = 0;
					}
					cursorE2.moveToNext();
				}
				
			}

		} finally {
			cursorE2.close();
		}
		//////////// // System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
		return chkI;
		
	}
	
	
	public Double fnfetchMinInvoiceAmountFromtblCouponMasterNewFormat()
	{
		
		Cursor cursorE2 = db.rawQuery(
				"SELECT MinInvoiceAmount FROM tblCouponMasterNewFormat", null);
		
		//////////// // System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
		Double chkI = 0.0;
		try {
			if (cursorE2.moveToFirst()) {
				for (int i = 0; i < cursorE2.getCount(); i++)
				{
					if (!cursorE2.isNull(0))
					{
						chkI = Double.parseDouble((cursorE2.getString(0)));
					} else {
						chkI = 0.0;
					}
					cursorE2.moveToNext();
				}
				
			}

		} finally {
			cursorE2.close();
		}
		//////////// // System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
		return chkI;
		
	}

	public String[] fetchProductIDFromtblForPDAGetExecutionSummary(String StoreID)
	{

		Cursor cursor = db
				.rawQuery(
						"SELECT DISTINCT ProductID FROM tblForPDAGetExecutionSummary WHERE StoreID ='"+ StoreID + "'", null);

		try {

			//// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
			String DateResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						DateResult[i] = (String) cursor.getString(0);

						// // System.out.println("Aajtak value DateResult :"+DateResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


						cursor.moveToNext();
					}
				}

			}
			return DateResult;

		} finally {
			cursor.close();
		}

	}

	public String[] fetchPrdNameFromtblForPDAGetExecutionSummary(String StoreID) 
	{
		
		Cursor cursor = db
				.rawQuery(
						"SELECT DISTINCT PrdName FROM tblForPDAGetExecutionSummary WHERE StoreID ='"+ StoreID + "'", null);

		try {
			
			//// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
			String DateResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						DateResult[i] = (String) cursor.getString(0);
						
						// // System.out.println("Aajtak value DateResult :"+DateResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);

						
						cursor.moveToNext();
					}
				}

			}
			return DateResult;

		} finally {
			cursor.close();
		}

	}
	
	
	public String[] fetchAllDataNewFromtbltblForPDAGetExecutionSummary(String StoreID,String OrderDate,String ProductID)
	{
		
		Cursor cursor = db
				.rawQuery(
						"SELECT  OrderQty,ProductQty FROM tblForPDAGetExecutionSummary WHERE StoreID ='"+ StoreID.trim() + "' and OrderDate ='"+ OrderDate.trim() + "' and ProductID ='"+ ProductID.trim() + "'", null);

		try {
			
			//// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						CompleteResult[i] = (String) cursor.getString(0)
								+ "_"
								+ (String) cursor.getString(1);
						
						////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);

						
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	public String[] fetchAllDataFromtbltblForPDAGetExecutionSummary(String StoreID) 
	{
		
		Cursor cursor = db
				.rawQuery(
						"SELECT PrdName, OrderQty, flgInvStatus, ProductQty FROM tblForPDAGetExecutionSummary WHERE StoreID ='"+ StoreID + "'", null);

		try {
			
			//// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						CompleteResult[i] = (String) cursor.getString(0)
								+ "_"
								+ (String) cursor.getString(1)
								+ "_"
								+ (String) cursor.getString(2)
								+ "_"
								+ (String) cursor.getString(3);
						
						////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);

						
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	
	
	public String fetchNoti_textFromtblNotificationMstr() 
	  {
	   
	   int LoncolumnIndex = 0;
	   int LoncolumnIndex1 = 1;
	   
	   Cursor cursor2 = db.rawQuery("SELECT MsgServerID,Noti_text  FROM tblNotificationMstr where Noti_NewOld=1 and Noti_ReadStatus=1", null);
	   
	   try 
	   {
	    String UniqueProductShortName="Null";
	    
		   if(cursor2.getCount()>0)
		   {
			   
			   if (cursor2.moveToFirst()) 
			    {
				  
							UniqueProductShortName = cursor2.getString(LoncolumnIndex) +"_"+ cursor2.getString(LoncolumnIndex1);
					       
							
							cursor2.moveToNext();
						}
						
					}

				
	   
	    return UniqueProductShortName;
	   } finally {
	    cursor2.close();
	   }
	  }
	public void updatetblNotificationMstr(int MsgServerID,String Noti_text,int Noti_ReadStatus,String Noti_ReadDateTime,int Sstat) 
	{
		
		final ContentValues values = new ContentValues();
		values.put("Noti_ReadStatus", Noti_ReadStatus);
		values.put("Noti_ReadDateTime", Noti_ReadDateTime.trim());
		values.put("Sstat", Sstat);
		
		
		int affected = db.update(TABLE_tblNotificationMstr_Define, values,"MsgServerID=?", new String[] { ""+MsgServerID });
		
		Log.w(TAG, "tblNotificationMstr Updated..");
	}
	
	
	public int countNoRowIntblNotificationMstr() 
	{
		Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblNotificationMstr", null);
		int chkI = 0;
		try {
			// // System.out.println("Sunil LastNitificationrList cursorE2.getCount() SerialNo : "+cursorE2.getCount());
			
			if(cursorE2.getCount()>0)
			{
				cursorE2.moveToFirst();
				// // System.out.println("Sunil LastNitificationrList cursorE2.getCount() SerialNo value : "+cursorE2.getString(0).toString());
				
				chkI=Integer.parseInt(cursorE2.getString(0));
			}
			

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	
	public String[] LastNitificationrListDB() 
	  {
	   
	   int LoncolumnIndex = 0;
	   int LoncolumnIndex1 = 1;
	   
	   Cursor cursor2 = db.rawQuery("SELECT Noti_DateTime,Noti_text  FROM tblNotificationMstr Order By SerialNo desc ", null);
	   
	   try 
	   {
	    String UniqueProductShortName[] = new String[cursor2.getCount()];
	    // // System.out.println("Sunil Prev Noti List cursor2.getCount() :"+cursor2.getCount());
		   if(cursor2.getCount()>0)
		   {
			   // // System.out.println("Sunil Prev Noti List H1:");
			   if (cursor2.moveToFirst()) 
			    {
				   // // System.out.println("Sunil Prev Noti List H2:");
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						 // // System.out.println("Sunil Prev Noti List H3:");	
						if (!cursor2.isNull(LoncolumnIndex))
						{
							 // // System.out.println("Sunil Prev Noti List H4:");
							UniqueProductShortName[i] = cursor2.getString(LoncolumnIndex) + "_" + cursor2.getString(LoncolumnIndex1);
					        // // System.out.println("Sunil Prev Noti List :"+UniqueProductShortName[i]);
							
							cursor2.moveToNext();
						}
						
					}

				}  
		   }
	   
	    return UniqueProductShortName;
	   } finally {
	    cursor2.close();
	   }
	  }
	
	
	public void deletetblNotificationMstrOneRow(int SerialNo) {

		db.execSQL("DELETE FROM tblNotificationMstr WHERE SerialNo ="+ SerialNo);
		for(int i=0;i<9;i++)
		{
			final ContentValues values = new ContentValues();
			values.put("SerialNo", i+1);
		
			int affected = db.update(TABLE_tblNotificationMstr_Define, values,"SerialNo=?", new String[] { ""+(i+2) });
			
		}

	}
	public long inserttblNotificationMstr(int SerialNo,String IMEI,String Noti_text,String Noti_DateTime,
			int Noti_ReadStatus,int Noti_NewOld,
			String Noti_ReadDateTime,int Sstat,int MsgServerID)
	{
		
		               ContentValues initialValues = new ContentValues();
					
		               initialValues.put("SerialNo", SerialNo);
						initialValues.put("IMEI", IMEI.trim()); 
						initialValues.put("Noti_text", Noti_text.trim());
						initialValues.put("Noti_DateTime", Noti_DateTime.trim());
						initialValues.put("Noti_ReadStatus", Noti_ReadStatus);
						initialValues.put("Noti_NewOld", Noti_NewOld);
						initialValues.put("Noti_ReadDateTime", Noti_ReadDateTime.trim());
						initialValues.put("Sstat", Sstat);
						initialValues.put("MsgServerID", MsgServerID);
						
						
						return db.insert(TABLE_tblNotificationMstr_Define , null, initialValues);
	}
	
	
	public void updateInvoiceButtonRecordsSyncd(String flag) {

		try {
			
			Log.w(TAG, "Updating Synced Records..");
			//String flag1="3";

			final ContentValues values = new ContentValues();
			values.put("Sstat", "4");
			int affected = db.update("tblInvoiceButtonTransac", values, "Sstat=?",
					new String[] { flag });
			
			int affected1 = db.update("tblInvoiceButtonStoreMstr", values, "Sstat=?",
					new String[] { flag });
			
			
			
			/*db.execSQL("Update tblInvoiceButtonTransac Set Sstat=4 where Sstat=7");
			db.execSQL("Update tblInvoiceButtonStoreMstr Set Sstat=4 where Sstat=7");*/
			
			

		} catch (Exception ex) {
			Log.e(TAG, ex.toString());
		}

	}
	
	
	public String fnGetPdaDate() 
	  {
	   
	   int LoncolumnIndex = 0;
	  String strPDADate="";
	   Cursor cursor2 = db.rawQuery("SELECT PdaDate FROM tblPdaDate", null);
	   
	   try 
	   {
	    if(cursor2.getCount()>0)
		   {
			   if (cursor2.moveToFirst()) 
			    {
				   strPDADate = cursor2.getString(LoncolumnIndex);
			    }  
		   }
	   
	    return strPDADate;
	   } finally {
	    cursor2.close();
	   }
	  }
	
	public String fnGetServerDate() 
	  {
	   
	   int LoncolumnIndex = 0;
	  String strServerDate="";
	   Cursor cursor2 = db.rawQuery("SELECT ServerDate FROM tblAvailableVersionMstr", null);
	   
	   try 
	   {
	    if(cursor2.getCount()>0)
		   {
			   if (cursor2.moveToFirst()) 
			    {
				   strServerDate =cursor2.getString(LoncolumnIndex);
			    }  
		   }
	   
	    return strServerDate;
	   } finally {
	    cursor2.close();
	   }
	  }
	
	public long maintainPDADate()
	{
		db.execSQL("DELETE FROM tblPdaDate"); 
		Date pdaDate=new Date();
		SimpleDateFormat	sdfPDaDate = new SimpleDateFormat("dd-MMM-yyyy",Locale.ENGLISH);
		String fDatePda = sdfPDaDate.format(pdaDate).trim();
		ContentValues initialValues = new ContentValues();
		initialValues.put("PdaDate",fDatePda);
		
		return db.insert("tblPdaDate", null, initialValues);
	}
	
	
	public int fnCheckPdaDateExistOrNot()
	{
		
		int strReturnPDADateExistOrNot = 0;

		Cursor cursor2 = db.rawQuery("SELECT PdaDate FROM  tblPdaDate", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strReturnPDADateExistOrNot = 1;
					cursor2.moveToNext();
					// cursor.close();
				}

			}


		}
		catch(Exception ex)
        {

        }
        finally {
		    if(cursor2!=null) {
                cursor2.close();
            }
		}
        return strReturnPDADateExistOrNot;
	}
	public String[] fnGetStoreListForInvoice(String DistID,String RouteID,String ForDate)
    {
         /*  if(DistID.equals("null"))
           {
           	DistID="0";
           }
           if(RouteID.equals("null"))
           {
           	RouteID="0";
           }*/
           /*= cursor=db.rawQuery("SELECT StoreName || '(Distributor:' || DistName || ',Route:'|| RouteName ||',Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate AS SRDITag  from tblInvoiceButtonStoreMstr Order BY StoreName", null);;
          */ // // System.out.println("Dangi new testing  DB DistID:"+DistID);
           // // System.out.println("Dangi new testing DB RouteID:"+RouteID);
           
           if(Integer.parseInt(DistID)!=0 && Integer.parseInt(RouteID)==0 && ForDate.equals(""))
           {
           cursor=db.rawQuery("SELECT StoreName || '(Route:'|| RouteName || ',Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel from tblInvoiceButtonStoreMstr Where DistId='"+DistID+"' and Sstat<>4  Order BY StoreName", null);
           }
           else if(Integer.parseInt(DistID)!=0 && Integer.parseInt(RouteID)!=0 && ForDate.equals(""))
           {
                  cursor=db.rawQuery("SELECT StoreName || '(Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where DistId='"+DistID+"' and RouteId='"+RouteID+"' and Sstat<>4  Order BY StoreName", null); 
           }
           else if(Integer.parseInt(DistID)!=0 && Integer.parseInt(RouteID)!=0 && !ForDate.equals(""))
           {
                  cursor=db.rawQuery("SELECT StoreName  AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where DistId='"+DistID+"' and RouteId='"+RouteID+"' and InvoiceForDate='"+ForDate+"' and Sstat<>4 Order BY StoreName", null);
           }
           else if(Integer.parseInt(DistID)==0 && Integer.parseInt(RouteID)!=0 && ForDate.equals(""))
           {
                  cursor=db.rawQuery("SELECT StoreName || '(Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where RouteId='"+RouteID+"' and Sstat<>4 Order BY StoreName", null);
           }
           else if(Integer.parseInt(DistID)==0 && Integer.parseInt(RouteID)!=0 && !ForDate.equals(""))
           {
                  cursor=db.rawQuery("SELECT StoreName  AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where RouteId='"+RouteID+"' and InvoiceForDate='"+ForDate+"' and Sstat<>4 Order BY StoreName", null);
           }
           else if(Integer.parseInt(DistID)==0 && Integer.parseInt(RouteID)==0 && !ForDate.equals(""))
           {
                  cursor=db.rawQuery("SELECT StoreName || '(Route:'|| RouteName ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where InvoiceForDate='"+ForDate+"' and Sstat<>4 Order BY StoreName", null);
           }
           else if(Integer.parseInt(DistID)!=0 && Integer.parseInt(RouteID)==0 && !ForDate.equals(""))
           {
                  cursor=db.rawQuery("SELECT StoreName || '(Route:'|| RouteName ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where DistId='"+DistID+"' and InvoiceForDate='"+ForDate+"' and Sstat<>4 Order BY StoreName", null);  
           }
           else if(Integer.parseInt(DistID)==0 && Integer.parseInt(RouteID)==0 && ForDate.equals(""))
           {
                  cursor=db.rawQuery("SELECT StoreName || '(Route:'|| RouteName ||',Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr WHERE   Sstat<>4 Order BY StoreName", null);
           }
           
           try {
                  String StoreInvoiceList[]= new String[cursor.getCount()];
                  if (cursor.getCount() > 0) {

                        if (cursor.moveToFirst()) {

                               for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                                     // // System.out.println("getDataListAdapter = "+cursor.getString(1));
                                      StoreInvoiceList[i] = cursor.getString(0) + "^"+ cursor.getString(1) + "^"+ cursor.getString(2) + "^"+ cursor.getString(3);
                                      cursor.moveToNext();
                               }
                        }

                  }
                  
                  return StoreInvoiceList;

           } finally {
                  cursor.close();
           }
          
    }
	
	 /* public String[] fnGetStoreListForInvoice(String DistID,String RouteID,String ForDate)
	     {
	            if(DistID.equals("null"))
	            {
	            	DistID="0";
	            }
	            if(RouteID.equals("null"))
	            {
	            	RouteID="0";
	            }
	            = cursor=db.rawQuery("SELECT StoreName || '(Distributor:' || DistName || ',Route:'|| RouteName ||',Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate AS SRDITag  from tblInvoiceButtonStoreMstr Order BY StoreName", null);;
	            // // System.out.println("Dangi new testing  DB DistID:"+DistID);
	            // // System.out.println("Dangi new testing DB RouteID:"+RouteID);
	            
	            if(Integer.parseInt(DistID)!=0 && Integer.parseInt(RouteID)==0 && ForDate.equals(""))
	            {
	            cursor=db.rawQuery("SELECT StoreName || '(Route:'|| RouteName || ',Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel from tblInvoiceButtonStoreMstr Where DistId='"+DistID+"'  Order BY StoreName", null);
	            }
	            else if(Integer.parseInt(DistID)!=0 && Integer.parseInt(RouteID)!=0 && ForDate.equals(""))
	            {
	                   cursor=db.rawQuery("SELECT StoreName || '(Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where DistId='"+DistID+"' and RouteId='"+RouteID+"'  Order BY StoreName", null); 
	            }
	            else if(Integer.parseInt(DistID)!=0 && Integer.parseInt(RouteID)!=0 && !ForDate.equals(""))
	            {
	                   cursor=db.rawQuery("SELECT StoreName AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where DistId='"+DistID+"' and RouteId='"+RouteID+"' and InvoiceForDate='"+ForDate+"' Order BY StoreName", null);
	            }
	            else if(Integer.parseInt(DistID)==0 && Integer.parseInt(RouteID)!=0 && ForDate.equals(""))
	            {
	                   cursor=db.rawQuery("SELECT StoreName || '(Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where RouteId='"+RouteID+"' Order BY StoreName", null);
	            }
	            else if(Integer.parseInt(DistID)==0 && Integer.parseInt(RouteID)!=0 && !ForDate.equals(""))
	            {
	                   cursor=db.rawQuery("SELECT StoreName  AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where RouteId='"+RouteID+"' and InvoiceForDate='"+ForDate+"' Order BY StoreName", null);
	            }
	            else if(Integer.parseInt(DistID)==0 && Integer.parseInt(RouteID)==0 && !ForDate.equals(""))
	            {
	                   cursor=db.rawQuery("SELECT StoreName || '(Route:'|| RouteName ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where InvoiceForDate='"+ForDate+"' Order BY StoreName", null);
	            }
	            else if(Integer.parseInt(DistID)!=0 && Integer.parseInt(RouteID)==0 && !ForDate.equals(""))
	            {
	                   cursor=db.rawQuery("SELECT StoreName || '(Route:'|| RouteName ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Where DistId='"+DistID+"' and InvoiceForDate='"+ForDate+"' Order BY StoreName", null);  
	            }
	            else if(Integer.parseInt(DistID)==0 && Integer.parseInt(RouteID)==0 && ForDate.equals(""))
	            {
	                   cursor=db.rawQuery("SELECT StoreName || '(Route:'|| RouteName ||',Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblInvoiceButtonStoreMstr Order BY StoreName", null);
	            }
	            
	            try {
	                   String StoreInvoiceList[]= new String[cursor.getCount()];
	                   if (cursor.getCount() > 0) {

	                         if (cursor.moveToFirst()) {

	                                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
	                                      // // System.out.println("getDataListAdapter = "+cursor.getString(1));
	                                       StoreInvoiceList[i] = cursor.getString(0) + "^"+ cursor.getString(1) + "^"+ cursor.getString(2) + "^"+ cursor.getString(3);
	                                       cursor.moveToNext();
	                                }
	                         }

	                   }
	                   
	                   return StoreInvoiceList;

	            } finally {
	                   cursor.close();
	            }
	           
	     }
	*/
	 public String[] fnGetDistinctDistributorsID()
     {
            
            Cursor cursor=db.rawQuery("SELECT DISTINCT DistID from tblInvoiceButtonStoreMstr Order BY DistId", null);

            try 
            {
                   String DistinctDistributorsID[]= new String[cursor.getCount()+1];
                   if(cursor.getCount()==0)
					{
                	   DistinctDistributorsID[0]="0";
					}
                   else {

                         if (cursor.moveToFirst()) 
                         {

                                for (int i = 0; i < cursor.getCount(); i++) 
                                {
                                	if(i==0)
    								{
                                		DistinctDistributorsID[i]="0";
    								}
                                      
                                       DistinctDistributorsID[i+1] = cursor.getString(0);
                                       cursor.moveToNext();
                                }
                         }

                   }
                   return DistinctDistributorsID;

            } finally {
                   cursor.close();
            }
           
     }
    
	  public String[] fnGetDistinctDistributorsName()
	     {
	            Cursor cursor=db.rawQuery("SELECT DISTINCT DistName from tblInvoiceButtonStoreMstr Order BY DistId", null);

	            try {
	                   String DistinctDistributorsName[]= new String[cursor.getCount()+1];
	                   if(cursor.getCount()==0)
						{
	                	   DistinctDistributorsName[0]="Please Select Distributor";
						}
			            else
			            {
			            	
			                         if (cursor.moveToFirst()) 
			                         {
			
			                                for (int i = 0; i < cursor.getCount(); i++) 
			                                {
			                                	if(i==0)
			    								{
			                                		DistinctDistributorsName[i]="Please Select Distributor";
			    								}
			                                      
			                                       DistinctDistributorsName[i+1] = cursor.getString(0);
			                                       cursor.moveToNext();
			                                }
			                         }
			
			                   
			             }
	                   return DistinctDistributorsName;

	            } finally {
	                   cursor.close();
	            }
	           
	     }
		
	  
	
	public long saveInvoiceButtonStoreTransac(String IMEIno, String TransDate,
			String StoreID, String ProdID,String ProductShortName,Double ProductRate,int OrderQty,
			int DelQty, int FreeQty,String OrderID,String CatID,String Sstat,int flgCancel,Double DiscountVal,String RutID
			,String additionalDiscount) {
		
		
		ContentValues initialValues = new ContentValues();
		
		initialValues.put("IMEIno", IMEIno.trim());
		initialValues.put("TransDate", TransDate.trim());
		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("ProdID", ProdID.trim());
		initialValues.put("ProductShortName", ProductShortName.trim());
		initialValues.put("ProductPrice", ProductRate);
		initialValues.put("OrderQty", OrderQty);
		initialValues.put("DelQty", DelQty);
		initialValues.put("FreeQty", FreeQty);
		

		initialValues.put("Sstat", Sstat.trim());
		
		initialValues.put("RouteID", Integer.parseInt(RutID));
		initialValues.put("OrderID", OrderID.trim());
		initialValues.put("CatID", CatID.trim());
		initialValues.put("flgCancel", flgCancel);
		initialValues.put("DiscountVal", DiscountVal);
		initialValues.put("additionalDiscount", additionalDiscount);
		
		//initialValues.put(Key_DisplayUnit, DisplayUnit);
		
		////// // System.out.println("inserting saveStoreTransac records..");

		return db.insert(DATABASE_TABLE_MAIN114, null, initialValues);
	}
	
	public String[] ProcessCancelStoreReq() 
	{

		int LoncolumnIndex = 0;
		int LoncolumnIndex2 = 1;

		Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblInvoiceButtonStoreMstr WHERE (Sstat=10) and Sstat<>4",null);
		//// // System.out.println("Nitish Invoice :"+cursor2.getCount());
		try 
		  {
			String strAreaIdsDetais[] = new String[cursor2.getCount()];
			
			////// // System.out.println("records count[ProcessStoreReq]: "+cursor2.getCount());
			//// // System.out.println("Nitish Invoice 2 :"+cursor2.getCount());
			if (cursor2.moveToFirst()) 
			  {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					strAreaIdsDetais[i] = (String) cursor2.getString(LoncolumnIndex)+ "%"+ (String) cursor2.getString(LoncolumnIndex2);
					
					////// // System.out.println("VAL1: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"VAL2: "+(String) cursor2.getString(LoncolumnIndex2));
					cursor2.moveToNext();
                 }

			  }
			return strAreaIdsDetais;
		   } 
		finally 
		{
			
			cursor2.close();
		}

	}
	
	
	public int CheckNonSubmitDataIntblInvoiceButtonStoreMstr() 
	{

		int LoncolumnIndex = 0;
		int LoncolumnIndex2 = 1;

		Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblInvoiceButtonStoreMstr WHERE (Sstat = 7 ) or (Sstat = 9 )  ",null);
		try 
		  {
			int check=0;
			
			if (cursor2.moveToFirst()) 
			  {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					check=1;
					cursor2.moveToNext();
                 }

			  }
			return check;
		   } 
		finally 
		{
			cursor2.close();
		}

	}
	
	/*private static final String DATABASE_CREATE_TABLE_222 = "create table tblStoreProductClassificationTypeListMstr(AutoIdStore integer null," +
			"CategoryNodeID integer null,CategoryNodeType integer null, Category text null,ProductTypeNodeID integer null,ProductTypeNodeType integer null,ProductType text null,IsCategorySeleted int null,IsSubCategorySeleted int null,SubCategoryValue text null);";
*/
	
	public HashMap<String, String> FetchtblStoreProductClassificationType()
	{

		   open();
		   Cursor cursor = db.rawQuery("SELECT ProductTypeNodeID,CategoryNodeID,CategoryNodeType,Category,ProductTypeNodeType,ProductType FROM tblStoreProductClassificationTypeListMstr" ,null);
			   try 
		   {
		    HashMap<String, String> SchemeIDFreePRodQtyDetails= new HashMap<>();
		    if(cursor.getCount()>0)
		    {
		     if (cursor.moveToFirst())
		     {
		      for (int i = 0; i <= (cursor.getCount() - 1); i++) 
		      {
		       SchemeIDFreePRodQtyDetails.put(cursor.getString(0), cursor.getString(1) +"^"+ cursor.getString(2) +"^"+ cursor.getString(3) +"^"+ cursor.getString(0) +"^"+ cursor.getString(4) +"^"+ cursor.getString(5));
		       cursor.moveToNext();
		      }
		      }
		    }
		    return SchemeIDFreePRodQtyDetails;
		    }
		   finally 
		   {
		    cursor.close();
		    close();
		   }
		  
 
	}
	
	
	
	public String[] ProcessConformStoreReq() 
 {

  int LoncolumnIndex = 0;
  int LoncolumnIndex2 = 1;    //tblInvoiceButtonStoreMstr

  Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblInvoiceButtonStoreMstr WHERE (Sstat=10) and Sstat<>4",null);
  try 
    {
   String strAreaIdsDetais[] = new String[cursor2.getCount()];
   
   ////// // System.out.println("records count[ProcessStoreReq]: "+cursor2.getCount());
   
   if (cursor2.moveToFirst()) 
     {

    for (int i = 0; i < cursor2.getCount(); i++) 
    {
     strAreaIdsDetais[i] = (String) cursor2.getString(LoncolumnIndex)+ "%"+ (String) cursor2.getString(LoncolumnIndex2);
     
     ////// // System.out.println("VAL1: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"VAL2: "+(String) cursor2.getString(LoncolumnIndex2));
     cursor2.moveToNext();
                 }

     }
   return strAreaIdsDetais;
     } 
  finally 
  {
   cursor2.close();
  }

 }
	 public String[] fnGetDistinctRouteId(String DistId)
     {
            //String[] DistinctDistributorsID;
            Cursor cursor=db.rawQuery("SELECT DISTINCT RouteId from tblInvoiceButtonStoreMstr Where DistId='"+DistId+"'  Order BY RouteId", null);

            try {
                   String DistinctRouteId[]= new String[cursor.getCount()+1];
                   if(cursor.getCount()==0)
					{
                	   DistinctRouteId[0]="0";
					}
		            else
			            {
                   if (cursor.getCount() > 0) {

                         if (cursor.moveToFirst()) {

                                for (int i = 0; i <cursor.getCount(); i++) 
                                {
                                	if(cursor.getCount()==0)
                					{
                                	   DistinctRouteId[0]="0";
                					}
                                       DistinctRouteId[i+1] = cursor.getString(0);
                                       cursor.moveToNext();
                                }
                         }

                   }
            }
                   return DistinctRouteId;

            } finally {
                   cursor.close();
            }
           
     }
	
	  public String[] fnGetDistinctRouteName(String DistId)
	     {
	            //String[] DistinctDistributorsID;
	            Cursor cursor=db.rawQuery("SELECT DISTINCT RouteName from tblInvoiceButtonStoreMstr Where DistId='"+DistId+"'  Order BY RouteId", null);

	            try {
	                   String DistinctRouteName[]= new String[cursor.getCount()+1];
	                   if(cursor.getCount()==0)
						{
	                	   DistinctRouteName[0]="Please Select Route";
						}
			            else
				            {
		                   
		
		                         if (cursor.moveToFirst()) 
		                         {
		
		                                for (int i = 0; i < cursor.getCount(); i++) 
		                                {
		                                	if(i==0)
		    								{
		                                		DistinctRouteName[0]="Please Select Route";
		    								}
		                                       DistinctRouteName[i+1] = cursor.getString(0);
		                                       cursor.moveToNext();
		                                }
		                         }
		
		                  
		            }
	                   return DistinctRouteName;

	            } finally {
	                   cursor.close();
	            }
	           
	     }
	
	public void deleteOldInvoiceButtonStoreTransac(String sID2del) {
		// int entryCount;
		db.execSQL("DELETE FROM tblInvoiceButtonTransac WHERE StoreID ='" + sID2del + "'");
		

	}
	
	
	//public void UpdateInvoiceButtonStoreFlag(String sID, int flag2set, String RouteId, String DistId, String Invdate,int flgCancel)
		public void UpdateInvoiceButtonStoreFlag(String sID, int flag2set,int flgCancel,String OrderID)
		{

			try
			 {

				
				
				final ContentValues values = new ContentValues();
				values.put("Sstat", flag2set);
				values.put("flgCancel", flgCancel);
	            ////// // System.out.println("Updating Status for Store ID: " + sID);
				//int affected = db.update("tblInvoiceButtonStoreMstr", values, "StoreID=? AND RouteId=? AND DistId=? AND InvoiceForDate=?",new String[] { sID,RouteId,DistId,Invdate });
				
				int affected = db.update("tblInvoiceButtonStoreMstr", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
				
				//int affected2 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
				//int affected1 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
				
				
			
				
				
			 }
			catch (Exception ex)
			{
				Log.e(TAG, ex.toString());
			}

		}
		
		public void UpdatetblInvoiceButtonTransac(String sID, int flag2set,int flgCancel,String OrderID)
		{

			try
			 {

				
				
				final ContentValues values = new ContentValues();
				values.put("Sstat", flag2set);
				values.put("flgCancel", flgCancel);
	           int affected1 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
				
				
			
				
				
			 }
			catch (Exception ex)
			{
				Log.e(TAG, ex.toString());
			}

		}
		
		
		public void deleteInvoiceRelatedTableEtrySavedData(String sID,String OrderID)
		{

			try
			 {

				
				db.execSQL("DELETE FROM tblInvoiceButtonTransac WHERE StoreID='"+sID+"' and OrderID='"+OrderID+"'");
				
				
			 }
			catch (Exception ex)
			{
				Log.e(TAG, ex.toString());
			}

		}
		public void UpdateInvoiceButtonCancelStoreSynFlag(String sID, int flag2set,int flgCancel)
		{

			try
			 {

				final ContentValues values = new ContentValues();
				// // System.out.println("After Sync Successful Sstat: " + flag2set);
				// // System.out.println("After Sync Successful flgCancel: " + flgCancel);
				values.put("Sstat", flag2set);
				values.put("flgCancel", flgCancel);
	           
				int affected = db.update("tblInvoiceButtonStoreMstr", values, "StoreID=?",new String[] { sID });
				
				
				
			
				
				
			 }
			catch (Exception ex)
			{
				Log.e(TAG, ex.toString());
			}

		}
		
	
	
	public String FetchPNameInvoice(String ProductId) 
	//public String FetchPNameInvoice() 
	{

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT ProductName FROM tblInvoiceButtonProductMstr where ProductId='"+ProductId+"'", null);
		//Cursor cursor = db.rawQuery("SELECT ProductName FROM tblInvoiceButtonProductMstr", null);
		
		try 
		{
			String StoreName="0";// = new String[cursor.getCount()];
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName= (String) cursor.getString(ScodecolumnIndex);
					////// // System.out.println("product short name :"+StoreName[i]);
					cursor.moveToNext();
				}
			}
		  return StoreName;
		} 
		finally 
		{
			cursor.close();
		}
	}
	
	public String[] FetchCategoryIDfromInvoiceProduct() 
	{
		int ScodecolumnIndex = 0;
		
		Cursor cursor = db.rawQuery("SELECT CatID FROM tblInvoiceButtonStoreProductwiseOrder",null);
		try 
		{
			String TaxRate[] = new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{
				////// // System.out.println("CategoryID Sunil Available");
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					TaxRate[i] = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			////// // System.out.println("CategoryID Sunil: not");
		return TaxRate;
		}
		finally
		{
			cursor.close();
		}
	}
	
	public String[] FetchOrderQtyInvoice(String StoreID,String InvoiceForDate,String OrderID) {

		int ScodecolumnIndex = 0;

		
		Cursor cursor = db.rawQuery("SELECT OrderQty FROM tblInvoiceButtonStoreProductwiseOrder where StoreID='"+StoreID+"'  and OrderID='"+OrderID+"'",null);
		try {
			String StoreName[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex);
					// // System.out.println("Sunil data OrderQty FROM tblInvoiceButtonStoreProductwiseOrder: "+ StoreName[i]);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}
	}
	
	public String[] FetchOrderDiscountInvoice(String StoreID,String InvoiceForDate,String OrderID) {

		int ScodecolumnIndex = 0;

		
		Cursor cursor = db.rawQuery("SELECT TotLineDiscVal FROM tblInvoiceButtonStoreProductwiseOrder where StoreID='"+StoreID+"'  and OrderID='"+OrderID+"'",null);
		try {
			String StoreName[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex);
					// // System.out.println("Sunil data OrderQty FROM tblInvoiceButtonStoreProductwiseOrder: "+ StoreName[i]);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}
	}
	public String[] FetchOrderFreeQtyInvoice(String StoreID,String InvoiceForDate,String OrderID) {

		int ScodecolumnIndex = 0;

		
		Cursor cursor = db.rawQuery("SELECT Freeqty FROM tblInvoiceButtonStoreProductwiseOrder where StoreID='"+StoreID+"'  and OrderID='"+OrderID+"'",null);
		try {
			String StoreName[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex);
					// // System.out.println("Sunil data OrderQty FROM tblInvoiceButtonStoreProductwiseOrder: "+ StoreName[i]);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}
	}
	public String[] FetchRateInvoice(String StoreID,String InvoiceForDate,String OrderID)
	//public String[] FetchRateInvoice()
	{

		int ScodecolumnIndex = 0;

		
		Cursor cursor = db.rawQuery("SELECT ProductPrice FROM tblInvoiceButtonStoreProductwiseOrder where StoreID='"+StoreID+"' and OrderID='"+OrderID+"'",null);
		//Cursor cursor = db.rawQuery("SELECT ProductPrice FROM tblInvoiceButtonStoreProductwiseOrder",null);
		
		try {
			String StoreName[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex);
					// // System.out.println("Sunil data ProductPrice FROM tblInvoiceButtonStoreProductwiseOrder: "+ StoreName[i]);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}
	}
	
	public String[] FetchPidInvoice(String StoreID,String InvoiceForDate,String OrderID)
	//public String[] FetchPidInvoice() 
	
	{
		int ScodecolumnIndex = 0;
		////// // System.out.println("a");
		// // System.out.println("Sameer cursor StoreID :"+ StoreID);
		// // System.out.println("Sameer cursor InvoiceForDate :"+ InvoiceForDate);
		
		//Cursor cursor = db.rawQuery("SELECT ProductID FROM tblProductList where CategoryID='"+CATID+"'",null);
		Cursor cursor = db.rawQuery("SELECT ProductId FROM tblInvoiceButtonStoreProductwiseOrder where StoreID='"+StoreID+"'  and OrderID='"+OrderID+"'",null);
		//Cursor cursor = db.rawQuery("SELECT ProductId FROM tblInvoiceButtonStoreProductwiseOrder",null);
		
		////// // System.out.println("b");
		try 
		{
			String ProductId[] = new String[cursor.getCount()];
			
			// // System.out.println("Sameer cursor count in DBAdapter1"+ cursor.getCount());
			////// // System.out.println("c");
			if (cursor.moveToFirst()) 
			{
				////// // System.out.println("d");
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					////// // System.out.println("e");
					ProductId[i] = (String) cursor.getString(ScodecolumnIndex);

					// // System.out.println("Sunil data ProductID FROM tblInvoiceButtonStoreProductwiseOrder: "+ ProductId[i]);
					cursor.moveToNext();
				}
			}
		 ////// // System.out.println("f");
		 return ProductId;
		}
		finally
		{
			cursor.close();
		}
	}
	
	public String FetchStoreNameBasedStoreID(String StoreID,String Data) 
	{

		int ScodecolumnIndex = 0;
		int ScodecolumnIndex1 = 1;
		int ScodecolumnIndex2 = 2;

		Cursor cursor = db.rawQuery("SELECT StoreName,RouteName,InvoiceForDate FROM tblInvoiceButtonStoreMstr where StoreID='"+StoreID+"' and InvoiceForDate='"+Data+"'", null);
		//Cursor cursor = db.rawQuery("SELECT ProductName FROM tblInvoiceButtonProductMstr", null);
		
		try 
		{
			String StoreName="0";// = new String[cursor.getCount()];
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName= (String) cursor.getString(ScodecolumnIndex) +"("+(String) cursor.getString(ScodecolumnIndex1) +")("+(String) cursor.getString(ScodecolumnIndex2) +")";
					////// // System.out.println("product short name :"+StoreName[i]);
					cursor.moveToNext();
				}
			}
		  return StoreName;
		} 
		finally 
		{
			cursor.close();
		}
	}
	
	
	public String FetchDistNameBasedDistID(String DistId) 
	{
		
		int ScodecolumnIndex = 0;
// // System.out.println("Sanjay testing DistID :"+DistId);
		
		//Cursor cursor = db.rawQuery("SELECT DistName FROM tblInvoiceButtonStoreMstr where DistId='"+DistId+"'", null);
		Cursor cursor = db.rawQuery("SELECT DistName FROM tblInvoiceButtonStoreMstr where DistId='"+DistId+"'", null);
		try 
		{
			String StoreName="NA";// = new String[cursor.getCount()];
			// // System.out.println("Sanjay testing cursor.getCount() :"+cursor.getCount());
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName= (String) cursor.getString(ScodecolumnIndex);
					// // System.out.println("Sanjay testing StoreName :"+StoreName);
					cursor.moveToNext();
				}
			}
		  return StoreName;
		} 
		finally 
		{
			cursor.close();
		}
	}
	
	
	
	
	
	public long inserttblInvoiceButtonStoreMstr(String StoreID,String StoreName,String RouteID,
			String RouteName,String DistID,String DistName,String InvoiceForDate,String flgSubmit,String IMEIno,String OrderID)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("StoreName", StoreName.trim());
						initialValues.put("RouteID", RouteID.trim());
						initialValues.put("RouteName", RouteName.trim());
						initialValues.put("DistID", DistID.trim());
						initialValues.put("DistName", DistName.trim());
						initialValues.put("InvoiceForDate", InvoiceForDate.trim());
						initialValues.put("flgSubmit", flgSubmit.trim());
						initialValues.put("Sstat",0);
						initialValues.put("IMEIno",IMEIno);
						initialValues.put("OrderID","NA");
						initialValues.put("flgCancel",0);
						initialValues.put("OrderID",OrderID);
						initialValues.put("ServerOrdersFlg",0);
						
						
						
						
						
						return db.insert(DATABASE_TABLE_MAIN111 , null, initialValues);	
	}
	public long inserttblInvoiceButtonProductMstr(String ProductId,String ProductName)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("ProductId", ProductId.trim()); 
						initialValues.put("ProductName", ProductName.trim());
						
						
						return db.insert(DATABASE_TABLE_MAIN112 , null, initialValues);	
	}
	
	public long inserttblInvoiceButtonStoreProductwiseOrder(String StoreID,String ProductID,String OrderQty,
			String ProductPrice,String InvoiceForDate,String OrderID,String CatID,int Freeqty,double TotLineDiscVal)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("ProductID", ProductID.trim());
						initialValues.put("OrderQty", OrderQty.trim());
						initialValues.put("ProductPrice", ProductPrice.trim());
						initialValues.put("InvoiceForDate", InvoiceForDate.trim());
						initialValues.put("OrderID", OrderID.trim());
						initialValues.put("CatID", CatID.trim());
						initialValues.put("Freeqty", Freeqty);
						initialValues.put("TotLineDiscVal", TotLineDiscVal);
						
						return db.insert(DATABASE_TABLE_MAIN113 , null, initialValues);	
	}
	
	
	
	public int getOverAllSampleQty(String sID2Fetch) {

		// id = getAllEntries();

		int SnamecolumnIndex1 = 0;
		int OverAllSampleQty=0;
		// int Stock,int OrderQty, Double OrderVal, int FreeQty, Double DisVal

		Cursor cursor = db.rawQuery("SELECT Sum(SampleQuantity)  FROM tblTransac WHERE StoreID ='"
						+ sID2Fetch + "'", null);
		try {
			if(cursor.getCount()>0)
			{
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {

					OverAllSampleQty = Integer.parseInt(cursor.getString(SnamecolumnIndex1));

					cursor.moveToNext();
					// cursor.close();

				}

			}
			}
			return OverAllSampleQty;
		} finally {
			cursor.close();
		}

	}

	public int counttblCountRoute() 
	{
		Cursor cursorE2=null;
		int chkI = 0;
		try {
			 cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblRouteMstr", null);
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}
			

		} catch(Exception ex)
			{
				
			}
		finally {
			if(cursorE2!=null)
			{
			cursorE2.close();
			}
		}
		return chkI;
	}
	public long savetblAvailbUpdatedVersion(String VersionID, String VersionSerialNo,String VersionDownloadStatus,String ServerDate)
	{
						
						ContentValues initialValues = new ContentValues();
						
						initialValues.put("VersionID", VersionID.trim()); 
						initialValues.put("VersionSerialNo", VersionSerialNo.trim());
						initialValues.put("VersionDownloadStatus", VersionDownloadStatus.trim());
						initialValues.put("ServerDate", ServerDate.trim());
						return db.insert(TABLE_tblAvailableVersionMstr_Define, null, initialValues);
	}
	/*public String getVersionNumber() {
		Cursor cursor = SQLiteDatabase.openOrCreateDatabase(":memory:", null).rawQuery("select sqlite_version() AS sqlite_version", null);
		String sqliteVersion = "";
		while(cursor.moveToNext()){
		   sqliteVersion += cursor.getString(0);
		}
		return sqliteVersion;
		
	}*/
	
	//imei,startTS,rID,getVersionNumber,DayEndFlg,ChangeRouteFlg
	
	public String FetchInvoiceButtonSstat1(String StoreID,String OrderID)
	//public String[] FetchInvoiceButtonStoreStatus()
	{

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT Sstat FROM tblInvoiceButtonStoreMstr WHERE StoreID ='"+ StoreID.trim()  + "' and  OrderID ='"+ OrderID.trim()  + "'", null);
		//Cursor cursor = db.rawQuery("SELECT Sstat FROM tblInvoiceButtonStoreMstr", null);
		// // System.out.println("Arjun cursor.getCount() :"+cursor.getCount());
		try 
		{
			String StoreName ="0";// new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} 
		finally
		{
			cursor.close();
		}
	}
	
	public String FetchInvoiceButtonSstat(String StoreID,String OrderID)
	//public String[] FetchInvoiceButtonStoreStatus()
	{

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT Sstat FROM tblInvoiceButtonTransac WHERE StoreID ='"+ StoreID.trim()  + "' and  OrderID ='"+ OrderID.trim()  + "'", null);
		//Cursor cursor = db.rawQuery("SELECT Sstat FROM tblInvoiceButtonStoreMstr", null);
		// // System.out.println("Arjun cursor.getCount() :"+cursor.getCount());
		try 
		{
			String StoreName ="0";// new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} 
		finally
		{
			cursor.close();
		}
	}
	
	
	
	public String[] fngetDistictOrderIdsForSubmission()
	//public String[] FetchInvoiceButtonStoreStatus()
	{

		int ScodecolumnIndex = 0;
open();
		Cursor cursor = db.rawQuery("SELECT DISTINCT OrderID FROM tblInvoiceButtonTransac  order by OrderID Desc", null);
		//Cursor cursor = db.rawQuery("SELECT Sstat FROM tblInvoiceButtonStoreMstr", null);
		// // System.out.println("Arjun cursor.getCount() :"+cursor.getCount());
		try 
		{
			String[] StoreName =new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} 
		finally
		{
			cursor.close();
			close();
		}
	}
	
	public void UpdateTblDayStartEndDetails(int rID, int btnClickFlg) {//btnClickFlg=1(clicked on Day End) , btnClickFlg=1(clicked on ChangeRoute)

		final ContentValues values = new ContentValues();
		long syncTIMESTAMP = System.currentTimeMillis();
		Date dateobj = new Date(syncTIMESTAMP);
		SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss",Locale.ENGLISH);
		String EndTS = df.format(dateobj);
		values.put("EndTime", EndTS);

		if(btnClickFlg==1)
		{
			values.put("DayEndFlag", 1);
			values.put("ChangeRouteFlg", 0);
		}
		if(btnClickFlg==2)
		{
			values.put("DayEndFlag", 0);
			values.put("ChangeRouteFlg", 1);
		}

		int affected = db.update("tblDayStartEndDetails", values, "RouteID=?",
				new String[] { ""+rID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdatetblDayStartEndDetails Updated..");
	}
	
	public long insertTblDayStartEndDetails(String imei,String startTS, String rID, int DayEndFlg, int ChangeRouteFlg, String ForDate, String strAppVersionID )//,int AppVersionID//, String getVersionNumber
	{
		db.execSQL("DELETE FROM tblDayStartEndDetails");
		ContentValues initialValues = new ContentValues();

		
		initialValues.put("IMEINo",imei);
		initialValues.put("SyncTime",startTS.trim());
		initialValues.put("RouteID", rID);
		//initialValues.put("VersionNo", getVersionNumber.trim());
		initialValues.put("DayEndFlag", DayEndFlg);
		initialValues.put("ChangeRouteFlg", ChangeRouteFlg);
		initialValues.put("ForDate", ForDate);
		//initialValues.put("AppVersionID", AppVersionID);
		initialValues.put("AppVersionID", strAppVersionID.trim());
		initialValues.put("Sstat", 0);
		
		
		//initialValues.put("StoreID", StoreID);
		
		//initialValues.put("Sstat", 0);
		
		////// // System.out.println("inserting records in Details  TblDayStartEndDetails..");
		////// // System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN12, null, initialValues);
	}
	public int FetchVersionDownloadStatus()
	{
		int SnamecolumnIndex1 = 0;
		int CatId=0;

		Cursor cursor = db.rawQuery("SELECT VersionDownloadStatus from tblAvailableVersionMstr", null);
		try {
			//String OldDateInfo[] = new String[cursor.getCount() ];
			if (cursor.moveToFirst())
			{
				
				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					//CatId = cursor.getString(SnamecolumnIndex1).toString();
					String abc =(String) cursor.getString(SnamecolumnIndex1);
					CatId=Integer.parseInt(abc);
					cursor.moveToNext();
				}

			}
			return CatId;
		} finally {
			cursor.close();
		}
		
	}
	
	public long inserttblFirstOrderDetailsOnLastVisitDetailsActivity(String StoreID,String Date,String SKUID,int OrderQty,String FreeQty,
			int Stock,String SKUName)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("Date", Date.trim());
						initialValues.put("SKUID", SKUID);
						initialValues.put("OrderQty", OrderQty);
						initialValues.put("FreeQty", FreeQty.trim());
						initialValues.put("Stock", Stock);
						initialValues.put("SKUName", SKUName);
						
						//// // System.out.println("Aaaj insert  value table 101");
						 //// // System.out.println("Ashish and Anuj insert  value table 101 : "+SKUName);
						
						return db.insert(DATABASE_TABLE_MAIN101 , null, initialValues);	
	}
	
	public long inserttblSecondVisitDetailsOnLastVisitDetailsActivity(String StoreID,String Date,String SKUID,int OrderQty,String SKUName)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("Date", Date.trim());
						initialValues.put("SKUID", SKUID);
						initialValues.put("OrderQty", OrderQty);
						initialValues.put("SKUName", SKUName.trim());
						
						
						//// // System.out.println("Aaaj insert  value table 102");
						return db.insert(DATABASE_TABLE_MAIN102 , null, initialValues);	
	}
	
	public long inserttblLODOnLastSalesSummary(String StoreID,String Date,String SKUID,int Qty,String SKUName)
	{
		  
		               ContentValues initialValues = new ContentValues();
					
						initialValues.put("StoreID", StoreID.trim()); 
						initialValues.put("Date", Date.trim());
						initialValues.put("SKUID", SKUID);
						initialValues.put("Qty", Qty);
						initialValues.put("SKUName", SKUName.trim());
						
						//// // System.out.println("Aaaj insert  value table 103");
						
						return db.insert(DATABASE_TABLE_MAIN103 , null, initialValues);	
	}
	
	public String fnGettblFirstOrderDetailsOnLastVisitDetailsActivity(String StoreID) {
		int ScodecolumnIndex = 0;

		Cursor cursorE2 = db.rawQuery("SELECT Date FROM tblFirstOrderDetailsOnLastVisitDetailsActivity WHERE StoreID ='"+ StoreID + "' Limit 1", null);
		String LastTransDate = "";
		
		try {

			if (cursorE2.moveToFirst()) {

				for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
					LastTransDate = (String) cursorE2.getString(
                            ScodecolumnIndex);
					cursorE2.moveToNext();
				}
			}
			return LastTransDate;
		} finally {
			cursorE2.close();
		}

	}
	
	public String[] fetchAllDataFromtblFirstOrderDetailsOnLastVisitDetailsActivity(String strStoreID) 
	{
		/*StoreID text null, " +
		"Date string null,SKUID text  null,OrderQty integer null,FreeQty integer null,Stock integer null,SKUName text null);";
		*/
		Cursor cursor = db
				.rawQuery(
						"SELECT SKUName, Stock, OrderQty, FreeQty FROM tblFirstOrderDetailsOnLastVisitDetailsActivity WHERE StoreID ='"+ strStoreID + "'", null);

		try {
			
			//// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						CompleteResult[i] = (String) cursor.getString(0)
								+ "_"
								+ (String) cursor.getString(1)
								+ "_"
								+ (String) cursor.getString(2)
								+ "_"
								+ (String) cursor.getString(3);
						
						////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
						//// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);

						
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	public int counttblSecondVisitDetailsOnLastVisitDetailsActivity(String StoreID) 
	{
		Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblSecondVisitDetailsOnLastVisitDetailsActivity WHERE StoreID ='"
						+ StoreID + "'", null);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	public String fnGettblSecondVisitDetailsOnLastVisitDetailsActivity(String StoreID) {

		Cursor cursorE2 = db.rawQuery("SELECT Date FROM tblSecondVisitDetailsOnLastVisitDetailsActivity WHERE StoreID ='"
						+ StoreID + "'", null);
		String LastTransDate = "";
		int ScodecolumnIndex = 0;
		try {

			if (cursorE2.moveToFirst()) {

				for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
					LastTransDate = (String) cursorE2.getString(
                            ScodecolumnIndex);
					cursorE2.moveToNext();
				}
			}
			return LastTransDate;
		} finally {
			cursorE2.close();
		}

	}
	
	public String[] fetchtblSecondVisitDetailsOnLastVisitDetailsActivity(String sID2Fetch) {

		// id = getAllEntries();

		int SnamecolumnIndex1 = 0;
		int SnamecolumnIndex2 = 1;

		Cursor cursor = db
				.rawQuery(
						"SELECT SKUName, OrderQty  FROM tblSecondVisitDetailsOnLastVisitDetailsActivity WHERE StoreID ='"
								+ sID2Fetch + "'", null);
		try {

			String ProductTarget[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {

					ProductTarget[i] = (String) cursor.getString(
                            SnamecolumnIndex1)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex2);

					cursor.moveToNext();
					// cursor.close();

				}

			}
			return ProductTarget;
		} finally {
			cursor.close();
		}

	}
	
	public void truncateSKUDataTable()
	{
		db.execSQL("DELETE FROM tblSKUWiseDaySummary");
		
	}
	
	
	public void truncateStoreWiseDataTable()
	{
		db.execSQL("DELETE FROM tblStoreWiseDaySummary");
		
	}
	
	public void truncateStoreAndSKUWiseDataTable()
	{
		db.execSQL("DELETE FROM tblStoreSKUWiseDaySummary");
		
	}
	
	public void truncateAllSummaryDataTable()
	{
		db.execSQL("DELETE FROM tblAllSummary");
		
	}
	
	
	
	
	
	public void reTruncateRouteTbl()
	{
		db.execSQL("DELETE FROM tblRouteMstr");
		//db.execSQL("DELETE FROM tblAvailableVersionMstr");
	}
	public void reCreateDB() 
	{
        sPref=context.getSharedPreferences(CommonInfo.Preference, context.MODE_PRIVATE);
        SharedPreferences.Editor editor=sPref.edit();
        editor.clear();
        editor.commit();

        try {
            sPrefAttandance=context.getSharedPreferences(CommonInfo.AttandancePreference, context.MODE_PRIVATE);
            SharedPreferences.Editor editor1=sPrefAttandance.edit();
            editor1.clear();
            editor1.commit();
        }
        catch (Exception e)
        {

        }
        db.execSQL("Delete FROM tblMerchandisingInstructionDetails");
        db.execSQL("Delete FROM tblLastOutstanding");

        db.execSQL("Delete FROM tblInvoiceLastVisitDetails");
        db.execSQL("Delete FROM tblProductAlertNearestSchmApld");
		db.execSQL("DELETE FROM tblStoreList"); 
		db.execSQL("DELETE FROM tblProductList");
		db.execSQL("DELETE FROM tblProductSegementMap");
		db.execSQL("DELETE FROM tblCatagoryMstr");
		
		db.execSQL("DELETE FROM tblVisibilityMstr");
		db.execSQL("DELETE FROM tblVisibilityDetails");
		
		
		
		db.execSQL("DELETE FROM tblNewStoreListEntries");
		db.execSQL("DELETE FROM tblPDALastInvoiceDet");
		db.execSQL("DELETE FROM tblPDATargetQtyForSecondPage");
		db.execSQL("DELETE FROM tblPDAProductReturnMstr");
		db.execSQL("DELETE FROM tblPDAProductReturnDetails");
        db.execSQL("DELETE FROM  tblProductADDONScheme");

        db.execSQL("DELETE FROM tblTransac");
		db.execSQL("DELETE FROM tblInvoice");
		db.execSQL("DELETE FROM tblStoreProductMap");
		db.execSQL("DELETE FROM tblSchemeList");
		db.execSQL("DELETE FROM tblSchemeDetails");
		db.execSQL("DELETE FROM tblschemeStoreTypeMap");
		db.execSQL("DELETE FROM tblschemeProductMap");
		db.execSQL("DELETE FROM tblspForPDASchemeApplicableList");
		db.execSQL("DELETE FROM tblPDAIsSchemeApplicable");
		db.execSQL("DELETE FROM tblLastTransactionDetails");
		db.execSQL("DELETE FROM tblPDALastTranDateForSecondPage");
		db.execSQL("DELETE FROM tblStorTypeMstr");
		db.execSQL("DELETE FROM tblSyncSummuryDetails");
		
		db.execSQL("DELETE FROM tblSyncSummuryForProductDetails");
		db.execSQL("DELETE FROM tblStrachApplicableOnScheme");
		db.execSQL("DELETE FROM tblStrachOnSchemeDetails");
		db.execSQL("DELETE FROM tblOutLetInfoOnQuadVolumeCategoryBasis");
		db.execSQL("DELETE FROM tblSelectedStoreIDinChangeRouteCase");
		db.execSQL("DELETE FROM tblSysVisitID");
		db.execSQL("DELETE FROM tblDaySummaryNew");
		
		db.execSQL("DELETE FROM tblFirstOrderDetailsOnLastVisitDetailsActivity");
		db.execSQL("DELETE FROM tblSecondVisitDetailsOnLastVisitDetailsActivity");
		db.execSQL("DELETE FROM tblLODOnLastSalesSummary");
		
		
		//db.execSQL("DELETE FROM tblInvoiceButtonStoreMstr");
		db.execSQL("DELETE FROM tblInvoiceButtonProductMstr");
		//db.execSQL("DELETE FROM tblInvoiceButtonStoreProductwiseOrder");
		//db.execSQL("DELETE FROM tblInvoiceButtonTransac");
		
		db.execSQL("DELETE FROM  tblForPDAGetLastVisitDate");
		db.execSQL("DELETE FROM  tblForPDAGetLastOrderDate");
		db.execSQL("DELETE FROM  tblForPDAGetLastVisitDetails");
		db.execSQL("DELETE FROM  tblForPDAGetLastOrderDetails");
		db.execSQL("DELETE FROM  tblspForPDAGetLastOrderDetailsTotalValues");
		db.execSQL("DELETE FROM  tblForPDAGetExecutionSummary");
		db.execSQL("DELETE FROM  tblStoreSchemeFreeProQtyOtherDetails");
		

		
		db.execSQL("DELETE FROM  tblSchemeStoreMapping");
		db.execSQL("DELETE FROM  tblSchemeMstr");
		db.execSQL("DELETE FROM  tblSchemeSlabDetail");
		db.execSQL("DELETE FROM  tblSchemeSlabBucketDetails");
		db.execSQL("DELETE FROM  tblSchemeSlabBucketProductMapping");
		db.execSQL("DELETE FROM  tblSchemeSlabBenefitsBucketDetails");
		db.execSQL("DELETE FROM  tblSchemeSlabBenefitsProductMappingDetail");
		db.execSQL("DELETE FROM  tblSchemeSlabBenefitsValueDetail");
		db.execSQL("DELETE FROM  tblProductRelatedScheme");
		db.execSQL("DELETE FROM  tblStoreProdcutPurchaseDetails");
		db.execSQL("DELETE FROM  tblStoreProductAppliedSchemesBenifitsRecords");

		db.execSQL("DELETE FROM  tblStoreProductPhotoDetail");
		db.execSQL("DELETE FROM  tblStoreReturnDetail");
		
		
		db.execSQL("DELETE FROM  tblAlrtVal");
		db.execSQL("DELETE FROM  tblProductMappedWithSchemeSlabApplied");
		
		   db.execSQL("DELETE FROM tblPOSMaterialMstr");
		  db.execSQL("DELETE FROM tblStoreIDAndMaterialIDMap");
		  db.execSQL("DELETE FROM  tblStoreMaterialDetail");
		  db.execSQL("DELETE FROM  tblStoreMaterialPhotoDetail");
		  

		Log.w(TAG, "Table re-creation completed..");
	}
	
	// ---opens the database---
	/*public DBAdapterKenya open() throws SQLException {
		db = DBHelper.getWritableDatabase();
		return this;
	}
*/
	// ---closes the database---
	/*public void close() {
		DBHelper.close();
	}*/
	
	public void refreshDataFromDB()
	{
		//db.execSQL("DELETE FROM tblProductList");
		//db.execSQL("DELETE FROM tblPDAProductReturnMstr");
		//db.execSQL("DELETE FROM tblStoreProductMap");
		//db.execSQL("DELETE FROM tblSchemeList");
		//db.execSQL("DELETE FROM tblSchemeDetails");
		
		//db.execSQL("DELETE FROM tblschemeProductMap");
		//db.execSQL("DELETE FROM tblspForPDASchemeApplicableList");
		//db.execSQL("DELETE FROM tblLastTransactionDetails");
		//db.execSQL("DELETE FROM tblPDALastTranDateForSecondPage");
		//db.execSQL("DELETE FROM tblSyncSummuryForProductDetails");

	}	

	public void Delete_tblProductList_for_refreshData()
	{
		db.execSQL("DELETE FROM tblProductList");
		db.execSQL("DELETE FROM tblProductSegementMap");
	}
	 public void Delete_tblCategory_for_refreshData()
	 {
		 db.execSQL("DELETE FROM tblCatagoryMstr");
	 }
	 
	 public void Delete_tblStore_for_refreshData()
	 {
		 db.execSQL("DELETE FROM tblStoreList");
	 }
	 
	 
	 public void Delete_tblStore_for_refreshDataButNotNewStore()
	  {
	   //db.execSQL("DELETE FROM tblStoreList where ISNewStore<>1");
          db.execSQL("DELETE FROM tblStoreList where ISNewStore<>1");
	  }
	 
	 
	 
	 
	 public void Delete_tblMaterialAndStoreIDMap()
		{
			db.execSQL("DELETE FROM tblPOSMaterialMstr");
			
			db.execSQL("DELETE FROM tblStoreIDAndMaterialIDMap");
		}
	 
	 
	 
	 
	public void Delete_tblStoreProductMap_for_refreshData()
	{
		db.execSQL("DELETE FROM tblSchemeStoreMapping");
		
		db.execSQL("DELETE FROM tblSchemeMstr");
		
		db.execSQL("DELETE FROM tblSchemeSlabDetail");
		
		db.execSQL("DELETE FROM tblSchemeSlabBucketDetails");
		
		db.execSQL("DELETE FROM tblSchemeSlabBucketProductMapping");
		
		db.execSQL("DELETE FROM tblSchemeSlabBenefitsBucketDetails");
		
		db.execSQL("DELETE FROM tblSchemeSlabBenefitsProductMappingDetail");
		
		db.execSQL("DELETE FROM tblSchemeSlabBenefitsValueDetail");
		
		db.execSQL("DELETE FROM tblProductRelatedScheme");
        db.execSQL("DELETE FROM tblProductADDONScheme");
        db.execSQL("DELETE FROM tblProductAlertNearestSchmApld");
	}
	public void Delete_tblSchemeList_for_refreshData()
	{
		db.execSQL("DELETE FROM tblSchemeList");
	}
	public void Delete_tblSchemeDetails_for_refreshData()
	{
		db.execSQL("DELETE FROM tblLastTransactionDetails");
	}
	public void Delete_tblschemeProductMap_for_refreshData()
	{
		db.execSQL("DELETE FROM tblschemeProductMap");
	}
	public void Delete_tblspForPDASchemeApplicableList_for_refreshData()
	{
		db.execSQL("DELETE FROM tblspForPDASchemeApplicableList");
	}
	
	
	public void Delete_tblLastTransactionDetails_for_refreshData()
	{
		db.execSQL("DELETE FROM tblLastTransactionDetails");
	}
	public void Delete_tblPDALastTranDateForSecondPage_for_refreshData()
	{
		
		db.execSQL("DELETE FROM tblPDALastTranDateForSecondPage");
	}
	
	public void Delete_tblSyncSummuryForProductDetails_for_refreshData()
	{
		db.execSQL("DELETE FROM tblSyncSummuryForProductDetails");
	}
	
	public boolean doesDatabaseExist(ContextWrapper context, String dbName) {
		File dbFile = context.getDatabasePath(dbName);

		return dbFile.exists();
	}
	
	
	public void dropAvailbUpdatedVersionTBL() 
	{
       db.execSQL("DROP TABLE IF EXISTS tblAvailableVersionMstr");
		
	}
	
	public void createAvailbUpdatedVersionTBL()
	{
		try
		  {
           db.execSQL(TABLE_tblAvailableVersionMstr_Definition);
		  }
		catch (Exception e)
		  {
			
		  }

	}
	
	
	public long insertTblDaySummaryNew(int TargetCalls,int ActualCallOnRoute, int ActualCallOffRoute, int ProdCallOnRoute, int ProdCallOffRoute, Double TargetSalesForDay,Double TotalSalesForDay,int CallsRemaining,Double TargetSalesMTD,Double AchievedSalesMTD,int ProdStoresMTD,Double RunRate)
	{
		ContentValues initialValues = new ContentValues();
		initialValues.put("TargetCalls",TargetCalls);
		initialValues.put("ActualCallOnRoute",ActualCallOnRoute);
		initialValues.put("ActualCallOffRoute", ActualCallOffRoute);
		initialValues.put("ProdCallOnRoute", ProdCallOnRoute);
		initialValues.put("ProdCallOffRoute", ProdCallOffRoute);
		initialValues.put("TargetSalesForDay", TargetSalesForDay);
		initialValues.put("TotalSalesForDay", TotalSalesForDay);
		initialValues.put("CallsRemaining", CallsRemaining);
		initialValues.put("TargetSalesMTD", TargetSalesMTD);
		initialValues.put("AchievedSalesMTD", AchievedSalesMTD);
		initialValues.put("ProdStoresMTD", ProdStoresMTD);
		initialValues.put("RunRate", RunRate);
		return db.insert(DATABASE_TABLE_SummaryDayTableSummaryNew, null, initialValues);
	}
	
	public int getTargetCall()
	{
		int LoncolumnIndex = 0;
		int TargetCall = 0;
		
	
		Cursor cursor2 = db.rawQuery("SELECT TargetCalls FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
	
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							if(Integer.parseInt(cursor2.getString(LoncolumnIndex))>0)
							{
								TargetCall =Integer.parseInt(cursor2.getString(LoncolumnIndex));
								////// // System.out.println("Summary Target Call :"+TargetCall);
							}
							
							//TotSalesValueStoreBasis =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
							cursor2.moveToNext();
						}
						
						
					}
	
				}
			}
			
			return TargetCall;
		} finally {
			cursor2.close();
		}
	}
	
	public int fnChkFlgTodayRoute(String CurrentRouteID)
	{
		int LoncolumnIndex = 0;
		int FchkFlgOnRoute = 0;
		Cursor cursor2 = db.rawQuery("SELECT Active FROM tblRouteMstr where ID='"+CurrentRouteID+"'", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							FchkFlgOnRoute =Integer.parseInt(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return FchkFlgOnRoute;
		} finally {
			cursor2.close();
		}
	}
	
	public int fnGetActualCallOnRouteFromSummaryTable()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
	{

		int LoncolumnIndex = 0;
		int ActualCall = 0;
		Cursor cursor2= db.rawQuery("SELECT ActualCallOnRoute FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							ActualCall =Integer.parseInt(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return ActualCall;
		} finally {
			cursor2.close();
		}
	}
	public int fnGetActualCallOffRouteFromSummaryTable()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
	{

		int LoncolumnIndex = 0;
		int ActualCall = 0;
		Cursor cursor2= db.rawQuery("SELECT ActualCallOffRoute FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							ActualCall =Integer.parseInt(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return ActualCall;
		} finally {
			cursor2.close();
		}
	}
	public int fnGetProductiveCallOnRoute()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
	{

		int LoncolumnIndex = 0;
		int ProductiveCall = 0;
		Cursor cursor2= db.rawQuery("SELECT ProdCallOnRoute FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							ProductiveCall =Integer.parseInt(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return ProductiveCall;
		} finally {
			cursor2.close();
		}
	}
	public int fnGetProductiveCallOffRoute()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
	{

		int LoncolumnIndex = 0;
		int ProductiveCall = 0;
		Cursor cursor2= db.rawQuery("SELECT ProdCallOffRoute FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							ProductiveCall =Integer.parseInt(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return ProductiveCall;
		} finally {
			cursor2.close();
		}
	}
	public int fnGetActualCallOnOffRoute()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
	{

		int LoncolumnIndex = 0;
		int ActualCall = 0;
		Cursor cursor2= db.rawQuery("SELECT Count(StoreID) FROM tblInvoice", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							ActualCall =Integer.parseInt(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return ActualCall;
		} finally {
			cursor2.close();
		}
	}
	public int fnGetProductiveCallOnOffRoute()//If fnChkFlgTodayRoute=1 it will get added to Productive Call On Route Else get Added in Off Route
	{

		int LoncolumnIndex = 0;
		int ActualProductiveCall = 0;
		Double TotInvoiceValCall = 0.00;
		Cursor cursor2 = db.rawQuery("SELECT Count(StoreID) FROM tblInvoice where InvoiceVal>" + TotInvoiceValCall, null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							ActualProductiveCall =Integer.parseInt(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return ActualProductiveCall;
		} finally {
			cursor2.close();
		}
	}
	
	public double fnGetTargetSalesforDayRoute()
	{
		int LoncolumnIndex = 0;
		Double TargetSalesForDay = 0.00;
		Cursor cursor2 = db.rawQuery("SELECT TargetSalesForDay FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							TargetSalesForDay =Double.parseDouble(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return TargetSalesForDay;
		} finally {
			cursor2.close();
		}
	}
	public double fnGetTotalSalesforDay()
	{

		int LoncolumnIndex = 0;
		Double TotalSalesForDay =fnGetTotalSalesforDayRouteFromtblSummaryNew();// 0.00;
		String TotalSalesInvoice=fnGetTotalSales();
		////// // System.out.println("Abhinav Raj Summary New TotSalesValue from function now: "+TotalSalesInvoice);
		Double OverAllSalesForDay=0.00;
		Double ckk11=Double.parseDouble(TotalSalesInvoice.replace(",", ""));
		//// // System.out.println("Abhinav Raj Summary New ckk11 from function now: "+ckk11);
		//// // System.out.println("Abhinav Raj Summary New OverAllSalesForDay from function now: "+TotalSalesForDay);
		
		OverAllSalesForDay=TotalSalesForDay+ckk11;
		
		
		//// // System.out.println("Abhinav Raj Summary New OverAllSalesForDay from function now: "+OverAllSalesForDay);
		//OverAllSalesForDay=Double.parseDouble(new DecimalFormat("##.##").format(OverAllSalesForDay));
		//OverAllSalesForDay=Double.parseDouble(decimalFormat.format(OverAllSalesForDay));
		////// // System.out.println("Abhinav Raj Summary New OverAllSalesForDay from function 2 now: "+OverAllSalesForDay);
		return OverAllSalesForDay;
		
	}
	
	private double fnGetTotalSalesforDayRouteFromtblSummaryNew()
	{
		int LoncolumnIndex = 0;
		Double TotalSalesForDay = 0.00;
		Cursor cursor2 = db.rawQuery("SELECT TotalSalesForDay FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							TotalSalesForDay =Double.parseDouble(cursor2.getString(LoncolumnIndex));
							////// System.out.println("Abhinav Raj Summary New TotalSalesForDay from function: "+TotalSalesForDay);
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return TotalSalesForDay;
		} finally {
			cursor2.close();
		}
	}
	public double fnGetTargetSalesMTDforDayRouteFromtblSummaryNew()
	{
		int LoncolumnIndex = 0;
		Double TotalSalesForDay = 0.00;
		Cursor cursor2 = db.rawQuery("SELECT TargetSalesMTD FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							TotalSalesForDay =Double.parseDouble(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return TotalSalesForDay;
		} finally {
			cursor2.close();
		}
	}
	private double fnGetAchivedSalesMTDforDayRouteFromtblSummaryNew()
	{
		int LoncolumnIndex = 0;
		Double TotalSalesForDay = 0.00;
		Cursor cursor2 = db.rawQuery("SELECT AchievedSalesMTD FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							TotalSalesForDay =Double.parseDouble(cursor2.getString(LoncolumnIndex));
							/*////// System.out.println("Abhinav Raj Summary New TotalSalesForDay from function what 1 now: "+TotalSalesForDay);
							TotalSalesForDay=Double.parseDouble(decimalFormat.format(TotalSalesForDay));
							////// System.out.println("Abhinav Raj Summary New TotalSalesForDay from function what 2 now: "+TotalSalesForDay);*/
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return TotalSalesForDay;
		} finally {
			cursor2.close();
		}
	}
	public double fnGetOverAllAchivedSalesMTD()
	{

		int LoncolumnIndex = 0;
		Double TotalSalesForDay =fnGetAchivedSalesMTDforDayRouteFromtblSummaryNew();// 0.00;
		String TotalSalesInvoice=fnGetTotalSales();
		Double OverAchivedSalesForDay=0.00;
		Double chk11=Double.parseDouble(TotalSalesInvoice);
		OverAchivedSalesForDay=TotalSalesForDay+chk11;
		//Sval= Double.parseDouble(new DecimalFormat("##.##").format(Sval));
		//OverAchivedSalesForDay=Double.parseDouble(decimalFormat.format(OverAchivedSalesForDay));
		//OverAchivedSalesForDay=Double.parseDouble(new DecimalFormat("###.##").format(OverAchivedSalesForDay));
		////// System.out.println("Abhinav Raj Summary New What 3 OverAchivedSalesForDay:"+OverAchivedSalesForDay);
		return OverAchivedSalesForDay;
		
	}
	public int fnGetProdStoresMTD()
	{

		int LoncolumnIndex = 0;
		int ProdStoresMTD = 0;
		Cursor cursor2 = db.rawQuery("SELECT ProdStoresMTD FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							ProdStoresMTD =Integer.parseInt(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return ProdStoresMTD;
		} finally {
			cursor2.close();
		}
	}
	public double fnGetRunRate()
	{

		int LoncolumnIndex = 0;
		Double RunRate = 0.00;
		Cursor cursor2 = db.rawQuery("SELECT RunRate FROM tblDaySummaryNew", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							RunRate =Double.parseDouble(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
					}
				}
			}
			
			return RunRate;
		} finally {
			cursor2.close();
		}
	}
	
	
	public HashMap<String,String> fetchHmapInvoiceOrderIDandStatus() 
    {

     HashMap<String, String> hmapOrderIDandClickStatus= new HashMap<>();
     open();
     Cursor cursor = db.rawQuery("SELECT OrderID,Sstat FROM tblInvoiceButtonStoreMstr", null);
     try
     {
      if(cursor.getCount()>0)
      {
       if (cursor.moveToFirst()) {

        for (int i = 0; i < cursor.getCount(); i++) {
          hmapOrderIDandClickStatus.put((String) cursor.getString(0),(String) cursor.getString(1));
         cursor.moveToNext();
        }
       }
      }
      return hmapOrderIDandClickStatus;
     } finally {
      cursor.close();
      close();
     }
     
    }
	
	
	private String[] fnGetServerOrdersFlgWith1()
    {

     int ScodecolumnIndex = 0;
     
     Cursor cursor = db.rawQuery("SELECT OrderID  FROM tblInvoiceButtonStoreMstr Where ServerOrdersFlg=1", null);
     try {
      String allData[]=new String[cursor.getCount()];
      if (cursor.moveToFirst()) {

       for (int i = 0; i < cursor.getCount(); i++)
       {
        ScodecolumnIndex = 1;
        allData[i] = (String) cursor.getString(0).trim();
        //// System.out.println("Value inserting 231 fetching :"+allData[i]);
        cursor.moveToNext();
        // cursor.close();
       }

      }
       ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
      return allData;
     } finally {
      cursor.close();
     }
    }
	
	
	public void fnDeletetblInvoiceButtonProductMstr()
    {
         try
           {
          db.execSQL("DELETE FROM tblInvoiceButtonProductMstr");
     }
         catch (Exception ex)
           {
      Log.e(TAG, ex.toString());
     }

    }
	
	
	
	
	
	
	public void fnAllServerOrdersFlgWith0()
    {
         try
           {
          open();
              db.execSQL("Update tblInvoiceButtonStoreMstr Set ServerOrdersFlg=1 where ServerOrdersFlg=0");
              close();
              
     }
         catch (Exception ex)
           {
      Log.e(TAG, ex.toString());
     }

    }
	
	
	
     public void fnDeleteUnWantedSubmitedInvoiceOrders()
    {
         try
           {
          String[] arrOrdersServerOrdersFlg=fnGetServerOrdersFlgWith1();
          if(arrOrdersServerOrdersFlg.length>0)
          {
           for(int i=0;i<arrOrdersServerOrdersFlg.length;i++)
           {
            db.execSQL("Delete from tblInvoiceButtonStoreMstr where OrderID='"+arrOrdersServerOrdersFlg[i]+"'");
                db.execSQL("Delete from tblInvoiceButtonStoreProductwiseOrder where OrderID='"+arrOrdersServerOrdersFlg[i]+"'");
                db.execSQL("Delete from tblInvoiceButtonTransac where OrderID='"+arrOrdersServerOrdersFlg[i]+"'");
           }
          }
              
     }
         catch (Exception ex)
           {
      Log.e(TAG, ex.toString());
     }

    }
	
	
	public void fnDeletetblInvoiceSubmittedRecords(String OrderID)
    {
         try
           {
              db.execSQL("Delete from tblInvoiceButtonStoreMstr where OrderID='"+OrderID+"'");
              db.execSQL("Delete from tblInvoiceButtonStoreProductwiseOrder where OrderID='"+OrderID+"'");
              db.execSQL("Delete from tblInvoiceButtonTransac where OrderID='"+OrderID+"'");
     }
         catch (Exception ex)
           {
      Log.e(TAG, ex.toString());
     }

    }

	
	public void reTruncateInvoiceButtonTable() 
	{
		db.execSQL("DELETE FROM tblInvoiceButtonStoreMstr");
		//db.execSQL("DELETE FROM tblInvoiceButtonProductMstr");
		db.execSQL("DELETE FROM tblInvoiceButtonStoreProductwiseOrder");
		db.execSQL("DELETE FROM tblInvoiceButtonTransac");
	}
	public int counttblCatagoryMstr() 
	{
		Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblCatagoryMstr", null);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}

	
	
	
	
/*	public int fnChkStoreIdExistInDaySumaryTbl(String StrID)//On Store Selection VisitStart Activity
	{
		int flgChkStatus=0;
		
		int LoncolumnIndex = 0;
		

		Cursor cursor2 = db.rawQuery("SELECT StoreID FROM  tblDaySummary where StoreID='"+ StrID + "'", null);
		try {
	
			
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) {
	
					for (int i = 0; i < cursor2.getCount(); i++) {
						flgChkStatus = 1;
						cursor2.moveToNext();
						// cursor.close();
					}
	
				}
			}
			return flgChkStatus;
		} finally {
			cursor2.close();
		}
	}
	
	public long fnInsertStoreIfNotExistIntblDaySummary(String StrID)//On Store Selection VisitStart Activity/Add Store Activity
	{
		//This function will get called if fnChkStoreIdExistInDaySumaryTbl returns 0.
		
		ContentValues initialValues = new ContentValues();


		initialValues.put("StoreID", StrID);
		initialValues.put("flgTarget", 0);
		initialValues.put("flgActualVisited", 0);
		initialValues.put("flgProductiveDay", 0);
		initialValues.put("flgProductiveMTD", 0);
		initialValues.put("DaySales", 0.00);
		initialValues.put("MTDSales", 0.00);
		
		//////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_Summarytable, null, initialValues);
		
	}
	
	public void updatePDAStoreFlgActualVisitIntblDaySummary(String StrID) //On Store Selection VisitStart Activity
	{
		final ContentValues values = new ContentValues();
		values.put("flgActualVisited", 1);
		
		int affected = db.update(DATABASE_TABLE_Summarytable, values,"StoreID=?", new String[] { StrID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreStartVisit Updated..");
	}
	
	public void updatePDAStoreFlgProductiveDayVisitIntblDaySummary(String StrID,int flgProductiveDay,int flgProductiveMTD) 
	{
		final ContentValues values = new ContentValues();
		values.put("flgProductiveDay", flgProductiveDay);
		values.put("flgProductiveMTD", flgProductiveMTD);
		
		int affected = db.update(DATABASE_TABLE_Summarytable, values,"StoreID=?", new String[] { StrID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreStartVisit Updated..");
	}
	public void updatePDAStoreProductiveDaySalesIntblDaySummary(String StrID,Double DaySales)
	{
		final ContentValues values = new ContentValues();
		values.put("DaySales", DaySales);
		
		
		int affected = db.update(DATABASE_TABLE_Summarytable, values,"StoreID=?", new String[] { StrID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreStartVisit Updated..");
	}
	public void updatePDAStoreProductiveMTDSalesIntblDaySummary(String StrID,Double MTDSales) 
	{
		final ContentValues values = new ContentValues();
		values.put("MTDSales", MTDSales);
		
		
		int affected = db.update(DATABASE_TABLE_Summarytable, values,"StoreID=?", new String[] { StrID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreStartVisit Updated..");
	}
	public void fnChkStoreInvoiceUpdateProductiveFlgsAndSales(String StrID)//On Order Activity --Submit, Save, Save Exit
	{//TotInv=is the total invoice on activity create method will be one time when ever the Order Activity Starts
		//This should be done before deleting transaction table
		String flgChkStoreInvoiceStatusAmount="";
		flgChkStoreInvoiceStatusAmount=fnGetStoreBasiscTotalSalesForSummarytbl(StrID);
		if(Integer.parseInt(flgChkStoreInvoiceStatusAmount.split("^")[0])==1)//1= Means Sales is greater then 0 
		{
			updatePDAStoreFlgProductiveDayVisitIntblDaySummary(StrID,1,1);
		}
		if(Integer.parseInt(flgChkStoreInvoiceStatusAmount.split("^")[0])==0)
		{
			updatePDAStoreFlgProductiveDayVisitIntblDaySummary(StrID,0,0);
		}
		updatePDAStoreProductiveDaySalesIntblDaySummary(StrID,0.00);
		String storeMTDSales="0.00";
		storeMTDSales=fnGetStoreBasiscMTDSalesInSummarytbl(StrID);
		Double dblTotInv=Double.parseDouble(decimalFormat.format(flgChkStoreInvoiceStatusAmount.split("^")[1]));
		Double dblstoreMTDSales=Double.parseDouble(decimalFormat.format(storeMTDSales));
		dblstoreMTDSales=dblstoreMTDSales-dblTotInv;
		dblstoreMTDSales=Double.parseDouble(decimalFormat.format(dblstoreMTDSales));
		updatePDAStoreProductiveMTDSalesIntblDaySummary(StrID,dblstoreMTDSales);
	}
	public void fnUpdatetblSumrySalesColumn(String StrID)
	{//This will called after the Saving insertion of records in Transaction table
		String StoreNewTotInvoice="";
		StoreNewTotInvoice=fnGetStoreBasiscTotalSalesForSummarytbl(StrID);
		if(Integer.parseInt(StoreNewTotInvoice.split("^")[0])==1)//1= Means Sales is greater then 0 
		{
			Double dblTotInv=Double.parseDouble(decimalFormat.format(StoreNewTotInvoice.split("^")[1]));
			updatePDAStoreProductiveDaySalesIntblDaySummary(StrID,dblTotInv);
			String storeMTDSales="0.00";
			storeMTDSales=fnGetStoreBasiscMTDSalesInSummarytbl(StrID);
			Double dblstoreMTDSales=Double.parseDouble(decimalFormat.format(storeMTDSales));
			dblstoreMTDSales=dblstoreMTDSales+dblTotInv;
			dblstoreMTDSales=Double.parseDouble(decimalFormat.format(dblstoreMTDSales));
			updatePDAStoreProductiveMTDSalesIntblDaySummary(StrID,dblstoreMTDSales);
		}
		
		
	}
	public String fnGetStoreBasiscMTDSalesInSummarytbl(String StrID) 
	{

		int LoncolumnIndex = 0;
		String TotMTDSalesStore = "0.00";
		
	
		Cursor cursor2 = db.rawQuery("SELECT MTDSales FROM tblDaySummary where StoreID'"+StrID+"'", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
	
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							if(Integer.parseInt(cursor2.getString(LoncolumnIndex).toString())>0)
							{
								TotMTDSalesStore =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());	
							}
							
							//TotSalesValueStoreBasis =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
							cursor2.moveToNext();
						}
						
						
					}
	
				}
			}
			else
			{
				TotMTDSalesStore ="0.00";	
				cursor2.moveToNext();
			}
			return TotMTDSalesStore;
		} finally {
			cursor2.close();
		}
		
	}
	
	public String fnGetStoreBasiscTotalSalesForSummarytbl(String StrID) 
	{
		int LoncolumnIndex = 0;
		String TotSalesValueStoreBasis = "0^0.00";
		
	
		Cursor cursor2 = db.rawQuery("SELECT SUM(InvoiceVal) FROM tblInvoice where StoreID'"+StrID+"'", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) 
				{
	
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							if(Integer.parseInt(cursor2.getString(LoncolumnIndex).toString())>0)
							{
								TotSalesValueStoreBasis ="1^"+ Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());	
							}
							
							//TotSalesValueStoreBasis =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
							cursor2.moveToNext();
						}
						
						
					}
	
				}
			}
			else
			{
				TotSalesValueStoreBasis ="0^0.00";	
				
			}
			return TotSalesValueStoreBasis;
		} finally {
			cursor2.close();
		}
	}
	
	
	public String fnGetSummaryTargetCalls()//TargetCalls For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Count(StoreID) FROM tblDaySummary where flgTarget=1", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {
	
					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	public String fnGetActualCallsOnRoute()//ActualCallsOnRoute For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Count(StoreID) FROM tblDaySummary where flgTarget=1 and flgActualVisited=1", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {
	
					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	
	public String fnGetActualCallsOffRoute()//ActualCallsOffRoute For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Count(StoreID) FROM tblDaySummary where flgTarget=0 and flgActualVisited=1", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {
	
					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	public String fnGetProductiveCallsOnRoute()//ProductiveCallsOnRoute For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Count(StoreID) FROM tblDaySummary where flgTarget=1 and flgActualVisited=1 and flgProductiveDay=1", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {
	
					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	public String fnGetProductiveCallsOffRoute()//ProductiveCallsOffRoute For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Count(StoreID) FROM tblDaySummary where flgTarget=0 and flgActualVisited=1 and flgProductiveDay=1", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {
	
					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	public String fnGetTotalSalesValueForDay()//TotalSalesValueForDay For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Sum(DaySales) FROM tblDaySummary", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {
	
					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	
	public String fnGetAchievedSalesValueTillDate()//AchievedSalesValueTillDate For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Sum(MTDSales) FROM tblDaySummary", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {
	
					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	*/
private int fnGetAutoIdStoreOnReturnPAge(String StoreID) {
		// int chkValue=fnChkStoreIdExistsInReturnMstr(StoreID);
		// ////// System.out.println("chkValue :" + chkValue);
		// int inAutoIdForInsert=1;
		// if(chkValue==0)
		// {
		// ////// System.out.println("inAutoIdForInsert before function call when chkValue is 0:"
		// + inAutoIdForInsert);
		// inAutoIdForInsert=fnGetMaxAutoIncrementForReturnMstr();
		// ////// System.out.println("inAutoIdForInsert after function call when chkvalue is 0:"
		// + inAutoIdForInsert);
		// insertPDAProductReturnMstr(inAutoIdForInsert,StoreID);
		// }
		/*
		 * else { ////// System.out.println(
		 * "inAutoIdForInsert before function call when chkValue is 1:" +
		 * inAutoIdForInsert);
		 * inAutoIdForInsert=fnGetMaxAutoIncrementForReturnMstr();
		 * ////// System.out.println
		 * ("inAutoIdForInsert after function call when chkvalue is 1:" +
		 * inAutoIdForInsert);
		 * insertPDAProductReturnMstr(inAutoIdForInsert,StoreID); }
		 */
        ////// System.out.println("autoid :" + autoid);
		return fnGetAutoIDReturnMstr(StoreID);
	}
	public int fnGetMaxAutoIncrementForReturnMstr() {

		int LoncolumnIndex = 0;
		int strAutoReturnIdMstr = 1;
		String strAutoReturnMstrText;

		Cursor cursor2 = db.rawQuery(
				"SELECT Max(AutoReturnIdMstr) FROM  tblPDAProductReturnMstr",
				null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					// strAutoReturnMstrText= cursor2.getString(LoncolumnIndex);
					// ////// System.out.println("strAutoReturnMstrText :"
					// +strAutoReturnMstrText);
					if (cursor2.getString(LoncolumnIndex) != null) {
						strAutoReturnIdMstr = Integer.parseInt(cursor2
								.getString(LoncolumnIndex)) + 1;
					} else {
						strAutoReturnIdMstr = 1;
					}
					// strAutoReturnIdMstr
					// =Integer.parseInt(cursor2.getString(LoncolumnIndex));
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			////// System.out.println("strAutoReturnIdMstr :" + strAutoReturnIdMstr);
			return strAutoReturnIdMstr;
		} finally {
			cursor2.close();
		}

	}

	
	
	
	
	private int fnChkAutoIdMstrForReturnDetails(int ReturnIdMstr, String pdaOrderID) {

		int LoncolumnIndex = 0;
		int strReturnIdDetails = 0;

		Cursor cursor2 = db
				.rawQuery(
						"SELECT AutoReturnDetailsId FROM  tblPDAProductReturnDetails where ReturnIdMstr='"+ ReturnIdMstr +"'  and OrderIDPDA='"+pdaOrderID+"'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strReturnIdDetails = 1;
					cursor2.moveToNext();
					// cursor.close();
				}

			}

			return strReturnIdDetails;
		} finally {
			cursor2.close();
		}

	}

	
	/*public int fnGetAutoIdStoreOnReturnPAgeMain(String StoreID,
			String Returndate, Double previousCreditAmt) {
		int chkValue = fnChkStoreIdExistsInReturnMstr(StoreID);
		////// System.out.println("chkValue :" + chkValue);
		int inAutoIdForInsert = 1;
		if (chkValue == 0) {
			inAutoIdForInsert = fnGetMaxAutoIncrementForReturnMstr();
			insertPDAProductReturnMstr(inAutoIdForInsert, StoreID, Returndate,
					previousCreditAmt);
		}
		
		int autoid = fnGetAutoIDReturnMstr(StoreID);
		////// System.out.println("autoid :" + autoid);
		return autoid;
	}*/
	public void deletetblPDAProductReturnDetailsOnReturnIdMstr(int autoid) {

		db.execSQL("DELETE FROM tblPDAProductReturnDetails WHERE ReturnIdMstr ="
				+ autoid);

	}
	

	public String[] fnGetRecordsReturnDetails(int ReturnIdMstr) {

		/*
		 * Cursor cursorALL = db.rawQuery("SELECT * FROM tblStoreList", null);
		 * 
		 * ////// System.out.println("PrevDateChk - ALL Records Count: "+
		 * cursorALL.getCount());
		 */

		Cursor cursor = db
				.rawQuery(
						"SELECT ReturnIdMstr, ProductId, ProdReturnQty, ProdReturnValue, ProdReturnReason, ProdReturnReasonDescr, ProdLastOrderDate, ProdLastOrderQyt, AdjustReturnQty, AdjustReturnValue FROM tblPDAProductReturnDetails WHERE ReturnIdMstr ="
								+ ReturnIdMstr, null);

		try {
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						String mvalue = "NA";
						if (i > 3 && i < 8) {
							if (cursor.getString(i).equals(" ")
									|| cursor.getString(i).isEmpty()
									|| cursor.getString(i).equals("")) {
								mvalue = "NA";
							} else {
								mvalue = cursor.getString(i);
							}
						}
						CompleteResult[i] = cursor.getString(0) + "_"
								+ cursor.getString(1) + "_"
								+ cursor.getString(2) + "_"
								+ cursor.getString(3) + "_" + mvalue + "_"
								+ mvalue + "_" + mvalue + "_" + mvalue + "_"
								+ cursor.getString(8) + "_"
								+ cursor.getString(9);
						////// System.out.println("fnGetRecordsReturnDetails: "+ CompleteResult[i]);
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	
	public int fnGetAutoIdStoreOnReturnDeatils() {
        return fnGetMaxAutoIncrementForReturnDetails();
	}
	
	private int fnGetMaxAutoIncrementForReturnDetails()

	{

		int LoncolumnIndex = 0;
		int strAutoReturnIdDetails = 1;
		String strAutoReturnDetailsText;

		Cursor cursor2 = db
				.rawQuery(
						"SELECT Max(AutoReturnDetailsId) FROM  tblPDAProductReturnDetails",
						null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					// strAutoReturnDetailsText=cursor2.getString(LoncolumnIndex);
					if (cursor2.getString(LoncolumnIndex) != null) {
						strAutoReturnIdDetails = Integer.parseInt(cursor2
								.getString(LoncolumnIndex)) + 1;
					} else {
						strAutoReturnIdDetails = 1;
					}
					// strAutoReturnIdMstr
					// =Integer.parseInt(cursor2.getString(LoncolumnIndex));
					cursor2.moveToNext();
					// cursor.close();
				}

			}

			return strAutoReturnIdDetails;
		} finally {
			cursor2.close();
		}

	}

	
	// tblPDAProductReturnDetails (AutoReturnDetailsId int null,ReturnIdMstr int null, ProductId text null, 
	//ProdReturnQty text null, ProdRate real null, ProdReturnValue real null, ProdReturnReason text null, 
	//ProdReturnReasonDescr text null, ProdLastOrderDate text null, ProdLastOrderQyt text null, Sstat integer null,
	//AdjustReturnQty integer null,AdjustReturnValue real null);";
	 
	
	public long fninsertPDAProductReturnDetails(int AutoReturnIdMstr,
			int AutoReturnIdDetails, String strProductId,
			String strProdReturnQty, Double ProdRate, Double ProdReturnValue,
			int proSingleAdjQty, Double proSingleAdjAmt)
	{

		ContentValues initialValues = new ContentValues();

		////// System.out.println("Saved AutoReturnIdMstr:" + AutoReturnIdMstr+ "Saved AutoReturnIdDetails:" + "" + AutoReturnIdDetails);

		initialValues.put("AutoReturnDetailsId", AutoReturnIdDetails);
		initialValues.put("ReturnIdMstr", AutoReturnIdMstr);
		initialValues.put("ProductId", strProductId.trim());
		initialValues.put("ProdReturnQty", strProdReturnQty.trim());
		initialValues.put("ProdRate", ProdRate);
		initialValues.put("ProdReturnValue", ProdReturnValue);

		initialValues.put("AdjustReturnQty", proSingleAdjQty);
		initialValues.put("AdjustReturnValue", proSingleAdjAmt);


		initialValues.put("ProdReturnReason", " ");
		initialValues.put("ProdReturnReasonDescr", " ");
		initialValues.put("ProdLastOrderDate", " ");
		initialValues.put("ProdLastOrderQyt", " ");

		/*
		 * ////// System.out.println(
		 * "fninsertPDAProductReturnDetails  proSingleReturnQty: "+
		 * strProdReturnQty);
		 * ////// System.out.println("fninsertPDAProductReturnDetails  proSingleRateQty: "
		 * +ProdReturnValue);
		 * 
		 * ////// System.out.println("fninsertPDAProductReturnDetails  proSingleAdjQty: "
		 * + proSingleAdjQty);
		 * ////// System.out.println("fninsertPDAProductReturnDetails  proSingleAdjAmt: "
		 * +proSingleAdjAmt);
		 */

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN20, null, initialValues);
	}
	
	private int fnGetAutoIDReturnMstr(String ReturnStoreId) {

		int LoncolumnIndex = 0;
		int strReturnIdMstr = 0;

		Cursor cursor2 = db.rawQuery(
				"SELECT AutoReturnIdMstr FROM  tblPDAProductReturnMstr where StoreID='"
						+ ReturnStoreId + "'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strReturnIdMstr = Integer.parseInt(cursor2
							.getString(LoncolumnIndex));
					cursor2.moveToNext();
					// cursor.close();
				}

			}

			return strReturnIdMstr;
		} finally {
			cursor2.close();
		}

	}
	//tblPDAProductReturnMstr (AutoReturnIdMstr int null,StoreID text null, ReturnDate text null, Comment text null,
	//TotalReturnQty int null, TotalReturnValue real null, Sstat integer null,TotalAdjustQty integer null,
	//TotalAdjustValue real null,FinalBalanceAmount real null,LastCreditAmount real null);";
	
	
	public void updatePDAProductReturnMstr(int AutoReturnIdMstr,
			String ReturnDate, String Comment, int TotalReturnQty,
			Double TotalReturnValue, int TotalAdjustQty,
			Double TotalAdujustValue, Double FinalBalanceAmount,
			Double LastCreditAmount) {

		String strAutoReturnIdMstr = "" + AutoReturnIdMstr;
		final ContentValues values = new ContentValues();
		values.put("ReturnDate", ReturnDate.trim());
		values.put("Comment", Comment);
		values.put("TotalReturnQty", TotalReturnQty);
		values.put("TotalReturnValue", TotalReturnValue);

		values.put("TotalAdjustQty", TotalAdjustQty);
		values.put("TotalAdjustValue", TotalAdujustValue);
		values.put("FinalBalanceAmount", FinalBalanceAmount);
		values.put("LastCreditAmount", LastCreditAmount);

		int affected = db.update("tblPDAProductReturnMstr", values,
				"AutoReturnIdMstr=?", new String[] { strAutoReturnIdMstr });
		Log.w(TAG, "affected records: " + affected);

		//Log.w(TAG, "UpdateStoreStartVisit Updated..");
	}
	
	public int fnGetStockAgainstProduct(String StoreID, String Pid) {

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery(
				"SELECT Stock FROM tblTransac where StoreID='" + StoreID
						+ "' and ProdID ='" + Pid + "'", null);
		try {
			int strProdStockQty = 0;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					if (!cursor.isNull(ScodecolumnIndex)) {
						strProdStockQty = Integer.parseInt(cursor.getString(
                                ScodecolumnIndex));
						cursor.moveToNext();
					}

				}
			}
			return strProdStockQty;
		} finally {
			cursor.close();
		}
	}
	
	private int fnChkStoreIdExistsInReturnMstr(String ReturnStoreId, String pdaOrderID) {

		int LoncolumnIndex = 0;
		int strReturnIdMstr = 0;

		Cursor cursor2 = db.rawQuery(
				"SELECT AutoReturnIdMstr FROM  tblPDAProductReturnMstr where StoreID='"
						+ ReturnStoreId + "' and OrderIDPDA='"+pdaOrderID+"'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strReturnIdMstr = 1;
					cursor2.moveToNext();
					// cursor.close();
				}

			}

			return strReturnIdMstr;
		} finally {
			cursor2.close();
		}

	}
	
	public String[] fnGetRecordsReturnMaster(String strStoreID) {

		/*
		 * Cursor cursorALL = db.rawQuery("SELECT * FROM tblStoreList", null);
		 * 
		 * ////// System.out.println("PrevDateChk - ALL Records Count: "+
		 * cursorALL.getCount());
		 */

		Cursor cursor = db
				.rawQuery(
						"SELECT Comment, TotalReturnQty, TotalReturnValue,TotalAdjustQty,TotalAdjustValue FROM tblPDAProductReturnMstr WHERE StoreID ='"
								+ strStoreID + "'", null);

		try {
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i < cursor.getCount(); i++) {
						CompleteResult[i] = cursor.getString(0) + "_"
								+ cursor.getString(1) + "_"
								+ cursor.getString(2) + "_"
								+ cursor.getString(3) + "_"
								+ cursor.getString(4);
						// ////// System.out.println(cursor.getString(0) + "_" +
						// cursor.getString(1)+ "_" + cursor.getString(2));
						cursor.moveToNext();

					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	//tblDistributionStoreProductWiseDetails (CatId integer not null,ProductID integer not null,StoreID text not null,
	//Stock text null,ProductMfgDate text null,Sstat integer not null);";
	/* public int counttblDistributionStoreProductWiseDetails() 
		{
			int check=0;
			
			Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblDistributionStoreProductWiseDetails", null);
			try {
				
				if (cursor2.getCount()>0) 
				{
					
					check=1;

				}
				return check;
			} finally {
				cursor2.close();
			}
		}
	*/
	
	/*public long insertPDAProductDistributionDetails(int CatId,int ProductID, String Stock, String StoreID)
	{
		ContentValues initialValues = new ContentValues();

		
		initialValues.put("CatId",CatId);
		initialValues.put("ProductID",ProductID);
		initialValues.put("Stock", Stock.trim());
		initialValues.put("StoreID", StoreID.trim());
		
		
		//initialValues.put("StoreID", StoreID);
		
		initialValues.put("Sstat", 0);
		
		////// System.out.println("inserting records in Details  Stock..");
		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN7, null, initialValues);
	}
	*/
	public int fnGetAutoIDReturnMstr(String DistribtutionStoreId, String DistributionProductId) 
	{

		int LoncolumnIndex = 0;
		int strReturnIdMstr = 0;

		Cursor cursor2 = db.rawQuery("SELECT AutoId FROM  tblReturnProductMstr where StoreID='"
						+ DistribtutionStoreId + "' and ProductId='"+ DistributionProductId +"'", null);
		try 
		{
			if (cursor2.moveToFirst()) 
			{

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					strReturnIdMstr = Integer.parseInt(cursor2.getString(LoncolumnIndex));
					cursor2.moveToNext();
					
				}

			}

			return strReturnIdMstr;
		} 
		finally 
		{
			cursor2.close();
		}

	}
	
	public String[] FetcReturnProductIdOverAllStock(String StoreID)
	{
		int ScodecolumnIndex = 0;
		int ScodecolumnIndex1 = 1;

		Cursor cursor = db.rawQuery("SELECT ProductId, OverallStock FROM tblReturnProductMstr where StoreId='"+ StoreID +"'", null);
		try 
		{
			String StoreProductIdStock[] = new String[cursor.getCount()];
			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreProductIdStock[i] = (String) cursor.getString(ScodecolumnIndex) + "_"+ (String) cursor.getString(ScodecolumnIndex1);
					////// System.out.println("product short name :"+StoreProductIdStock[i]);
					cursor.moveToNext();
				}
			 }
			return StoreProductIdStock;
		 }
		finally 
		{
			cursor.close();
		}
	}
	
	public String[] FetcReturnProductIdOverAllStockDetails(int AutoDistributionIdMstr)
	{
		int ScodecolumnIndex = 0;
		int ScodecolumnIndex1 = 1;

		Cursor cursor = db.rawQuery("SELECT Stock, ProductMfgDate FROM tblReturnStoreProductWiseDetails where AutoID=" + AutoDistributionIdMstr, null);
		try 
		{
			String StoreProductIdStock[] = new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreProductIdStock[i] = (String) cursor.getString(ScodecolumnIndex) + "_"+ (String) cursor.getString(ScodecolumnIndex1);
					////// System.out.println("product tblReturnStoreProductWiseDetails :"+StoreProductIdStock[i]);
					cursor.moveToNext();
				}
			}
		  return StoreProductIdStock;
		}
		finally 
		{
			cursor.close();
		}
	}
	
	
	 public int counttblOutLetInfoOnQuadVolumeCategoryBasis() 
		{
			int check=0;
			
			Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblOutLetInfoOnQuadVolumeCategoryBasis", null);
			try {
				
				////// System.out.println("Sunil check data in table :"+cursor2.getCount());
				if (cursor2.getCount()>0) 
				{
					
					check=1;

				}
				return check;
			} finally {
				cursor2.close();
			}
		}
	
	 public long saveOutLetInfoOnQuadVolumeCategoryBasis(String OutID,String OutletName, String OwnerName,String ContactNo,
			 String MarketAreaName,String Latitude,String Longitutde)
		{
							
							ContentValues initialValues = new ContentValues();
							
							initialValues.put("OutID", OutID.trim()); 
							initialValues.put("OutletName", OutletName.trim()); 
							initialValues.put("OwnerName", OwnerName.trim());
							initialValues.put("ContactNo", ContactNo.trim()); 
							initialValues.put("MarketAreaName", MarketAreaName.trim());
							initialValues.put("Latitude", Latitude.trim()); 
							initialValues.put("Longitutde", Longitutde.trim());
							
							
							////// System.out.println("jai data  stoe in teable 3");
							return db.insert(DATABASE_TABLE_MAIN91, null, initialValues);	
		}
	 public String[] fetchParticularStoreInfo(String OutID) 
		{
			
			int LoncolumnIndex = 0;
			int LoncolumnIndex1 = 1;
			int LoncolumnIndex2 = 2;
			int LoncolumnIndex3 = 3;
			int LoncolumnIndex4 = 4;
			int LoncolumnIndex5 = 5;
				
			//Latitude text null,Longitutde
			Cursor cursor2 = db.rawQuery("SELECT OutletName,OwnerName,ContactNo,MarketAreaName,Latitude,Longitutde  FROM tblOutLetInfoOnQuadVolumeCategoryBasis where OutID='"+OutID+"'", null);
			try 
			{
				////// System.out.println("ajay total Store cursor2.getCount() :"+cursor2.getCount());
				String UniqueProductShortName[] = new String[cursor2.getCount()];
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							UniqueProductShortName[i] = cursor2.getString(LoncolumnIndex) + "^" +
                                    cursor2.getString(LoncolumnIndex1) + "^" + cursor2.getString(LoncolumnIndex2) + "^"
									+ cursor2.getString(LoncolumnIndex3) + "^"
											+ cursor2.getString(LoncolumnIndex4) + "^"
													+ cursor2.getString(LoncolumnIndex5);
							////// System.out.println("Sunil OutletName :"+cursor2.getString(LoncolumnIndex).toString());
							////// System.out.println("Sunil OwnerName :"+cursor2.getString(LoncolumnIndex1).toString());
							////// System.out.println("Sunil ContactNo :"+cursor2.getString(LoncolumnIndex1).toString());
							////// System.out.println("Sunil MarketAreaName :"+cursor2.getString(LoncolumnIndex1).toString());
							////// System.out.println("Sunil total :"+UniqueProductShortName[i]);
							cursor2.moveToNext();
						}
						
					}

				}
				return UniqueProductShortName;
			} finally {
				cursor2.close();
			}
		}
	
	 public String[] fetchStorelatLong() 
		{
			
			int LoncolumnIndex = 0;
			int LoncolumnIndex1 = 1;
			int LoncolumnIndex2 = 2;
			int LoncolumnIndex3 = 3;
			////// System.out.println("ajay one");
			//store_longitude text null,store_latitude text null
			//Cursor cursor21 = db.rawQuery("SELECT count(*) FROM tblOutLetInfoOnQuadVolumeCategoryBasis", null);
			////// System.out.println("ajay two");
			Cursor cursor2 = db.rawQuery("SELECT Latitude,Longitutde,OutletName,OutID FROM tblOutLetInfoOnQuadVolumeCategoryBasis", null);
			
			
			//Cursor cursor2 = db.rawQuery("SELECT store_longitude,store_latitude,name,StoreID FROM tblOutLetInfoOnQuadVolumeCategoryBasis", null);
			////// System.out.println("ajay three");
			try 
			{
				////// System.out.println("ajay total Store cursor2.getCount() :"+cursor2.getCount());
				//////// System.out.println("ajay total Store cursor21.getCount() :"+cursor21.getCount());
				String UniqueProductShortName[] = new String[cursor2.getCount()];
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							UniqueProductShortName[i] = cursor2.getString(LoncolumnIndex) + "^" + cursor2.getString(LoncolumnIndex1) + "^" + cursor2.getString(LoncolumnIndex2) + "^" + cursor2.getString(LoncolumnIndex3);
							////// System.out.println("ajay lat :"+cursor2.getString(LoncolumnIndex).toString());
							////// System.out.println("ajay lon :"+cursor2.getString(LoncolumnIndex1).toString());
							////// System.out.println("ajay OutletName :"+cursor2.getString(LoncolumnIndex1).toString());
							////// System.out.println("ajay OutID :"+cursor2.getString(LoncolumnIndex1).toString());
							////// System.out.println("ajay total :"+UniqueProductShortName[i]);
							cursor2.moveToNext();
						}
						
					}

				}
				return UniqueProductShortName;
			} finally {
				cursor2.close();
			}
		}
	
	 
	 public void deleteAlertValueProduct(String storeId,String _schmAlrtId,String pdaOrderID)
     {
      open();
      Cursor cur=db.rawQuery("Select ProductID from tblAlrtVal where StoreId ='"+storeId+"' and schmAlrtId = '"+_schmAlrtId+"' and OrderIDPDA='"+pdaOrderID+"'",null );
      if(cur.getCount()>0)
      {
       db.delete(DATABASE_TABLE_Main214, "StoreID=? AND schmAlrtId=? AND OrderIDPDA=? ",new String[] {storeId,_schmAlrtId,pdaOrderID}); 
      }
     
      close();
     }
	 
	 public void deleteProductOldSlab215(String storeId,String _schmId,String pdaOrderID)
     {
      open();
     //DATABASE_CREATE_TABLE_215 =tblProductMappedWithSchemeSlabApplied (StoreId,ProductID,schSlabId,schmIdMapped	
     
      Cursor cur=db.rawQuery("Select ProductID from tblProductMappedWithSchemeSlabApplied where StoreId ='"+storeId+"' and OrderIDPDA='"+pdaOrderID+"' and schmIdMapped = '"+_schmId+"'",null );
      if(cur.getCount()>0)
      {
    	  // System.out.println("DATABASE_TABLE_Main215 Delete : StoreId = "+storeId+" schmIdMapped = "+_schmId+" cur.getCount()= "+cur.getCount());
       db.delete(DATABASE_TABLE_Main215, "StoreId=? AND schmIdMapped=? AND OrderIDPDA=? ",new String[] {storeId,_schmId,pdaOrderID}); 
      }
     
      close();
     }
	 
	 public void deleteProductSchemeType3(String storeId,String _productId,String pdaOrderID)
     {
      open();
     //DATABASE_CREATE_TABLE_215 =tblProductMappedWithSchemeSlabApplied (StoreId,ProductID,schSlabId,schmIdMapped	
   
      Cursor cur=db.rawQuery("Select ProductID from tblProductMappedWithSchemeSlabApplied where StoreId ='"+storeId+"' and OrderIDPDA='"+pdaOrderID+"' and ProductID = '"+_productId+"'",null );
      if(cur.getCount()>0)
      {
    	  // System.out.println("DATABASE_TABLE_Main215 Delete : StoreId = "+storeId+" ProductID = "+_productId+" cur.getCount()= "+cur.getCount());
       db.delete(DATABASE_TABLE_Main215, "StoreId=? AND ProductID=? AND OrderIDPDA=? ",new String[] {storeId,_productId,pdaOrderID}); 
      }
     
      close();
     }
	 
	 public void deleteAllStoreAlertValueProduct(String storeId,String pdaOrderID)
     {
      open();
      Cursor cur=db.rawQuery("Select ProductID from tblAlrtVal where StoreId ='"+storeId+"' and OrderIDPDA='"+pdaOrderID+"'",null );
      if(cur.getCount()>0)
      {
       db.delete(DATABASE_TABLE_Main214, "StoreID=? AND OrderIDPDA=? ",new String[] {storeId,pdaOrderID}); 
      }
     
      close();
     }
	 
	 public void deleteProductBenifitSlabApplieddeleteProductBenifitSlabApplied(String storeId, String pdaOrderID)
     {
      open();
      Cursor cur=db.rawQuery("Select ProductID from tblProductMappedWithSchemeSlabApplied where StoreId ='"+storeId+"' and OrderIDPDA='"+pdaOrderID+"'",null );
      if(cur.getCount()>0)
      {
       db.delete(DATABASE_TABLE_Main215, "StoreID=? AND OrderIDPDA=? ",new String[] {storeId,pdaOrderID}); 
       
       
      }
     
      close();
     }
	 
	
	 
	 
	 public void deletetblOutLetInfoOnQuadVolumeCategoryBasis()
	 {
	 	db.execSQL("DELETE FROM tblOutLetInfoOnQuadVolumeCategoryBasis ");
	 	
	 }
	
	public void dropRoutesTBL() 
	{
		//db.execSQL("DROP TABLE IF EXISTS tblRouteMstr");
		db.execSQL("DELETE FROM tblRouteMstr");
		//db.execSQL("DROP TABLE IF EXISTS tblAvailableVersionMstr");
		
	}
	
	
	public void fnFinaldropRoutesTBL() 
	{
		db.execSQL("DROP TABLE IF EXISTS tblRouteMstr");
		//db.execSQL("DELETE FROM tblRouteMstr");
		//db.execSQL("DROP TABLE IF EXISTS tblAvailableVersionMstr");
		
	}
	public String[] fnGetRouteIdsForDDL()
	{


		Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr where CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"'", null);

		//Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr", null);
		try {
			String strLocationIDDetais[] = new String[cursor2.getCount()];
			if (cursor2.moveToFirst())
			{

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					strLocationIDDetais[i] = cursor2.getString(0);
					cursor2.moveToNext();
				}

			}
			return strLocationIDDetais;
		} finally {
			cursor2.close();
		}

	}
	
	
	
	
	public String[] fnGetRouteInfoForDDL()
	{

		//Cursor cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr", null);
		Cursor cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr where CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"'", null);

		try {
			String strLocationNameDetais[] = new String[cursor2.getCount()];

			if (cursor2.moveToFirst())
			{

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					strLocationNameDetais[i] = cursor2.getString(0);
					cursor2.moveToNext();
				}

			}
			return strLocationNameDetais;
		}
		finally
		{
			cursor2.close();
		}

	}
	
	public String[] FetchStorePDATargetQtyForSecondPage(String sID2Fetch) {

		// id = getAllEntries();

		int SnamecolumnIndex1 = 0;
		int SnamecolumnIndex2 = 1;

		// int Stock,int OrderQty, Double OrderVal, int FreeQty, Double DisVal

		Cursor cursor = db
				.rawQuery(
						"SELECT SKUShortName, TargetQty  FROM tblPDATargetQtyForSecondPage WHERE StoreID ='"
								+ sID2Fetch + "'", null);
		try {

			String ProductTarget[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {

					ProductTarget[i] = (String) cursor.getString(
                            SnamecolumnIndex1)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex2);

					cursor.moveToNext();
					// cursor.close();

				}

			}
			return ProductTarget;
		} finally {
			cursor.close();
		}

	}
	
	
	public String[] fnGetAllSchSlabDescbasedOnSchemeSlabID(String SchemeSlabID) 
	   {
	          open();
	    Cursor cursorE2 = db.rawQuery("SELECT DISTINCT SchemeSlabDesc FROM tblSchemeSlabDetail WHERE SchemeSlabID ='"+ SchemeSlabID + "'", null);
	    String AllSchemeSlabID[] = new String[cursorE2.getCount()];
	    
	    try {
	          if(cursorE2.getCount()>0)
	            {
	        if (cursorE2.moveToFirst())
	        {
	     
	         for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
	         {
	          AllSchemeSlabID[i] = (String) cursorE2.getString(0);
	          cursorE2.moveToNext();
	          //cursor.moveToNext();
	         }
	        }
	      }
	       return AllSchemeSlabID;
	    } finally {
	     cursorE2.close();
	     close();
	    }

	   }
	   
	   
	    public String[] fnGetAllBenifitDescrbasedOnSchemeSlabID(String SchemeSlabID) 
	   {
	          open();
	    Cursor cursorE2 = db.rawQuery("SELECT DISTINCT BenifitDescr FROM tblSchemeSlabDetail WHERE SchemeSlabID ='"
	        + SchemeSlabID + "'", null);
	    String AllSchemeSlabID[] = new String[cursorE2.getCount()];
	    
	    try {
	          if(cursorE2.getCount()>0)
	            {
	        if (cursorE2.moveToFirst())
	        {
	     
	         for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
	         {
	          AllSchemeSlabID[i] = (String) cursorE2.getString(0);
	          cursorE2.moveToNext();
	          //cursor.moveToNext();
	         }
	        }
	      }
	       return AllSchemeSlabID;
	    } finally {
	     cursorE2.close();
	     close();
	    }

	   }
	    
	    private String[] fnGetSchemeIdsAppliedOnStore(String strStoreID) {
	    	   int ScodecolumnIndex = 0;
	    	   Cursor cursor = db.rawQuery("SELECT SchemeID FROM tblSchemeStoreMapping Where StoreID='"+strStoreID+"'",null);
	    	   try {
	    	    String SchemeIds[] = new String[cursor.getCount()];
                   if (cursor.moveToFirst()) {

	    	     for (int i = 0; i <= (cursor.getCount() - 1); i++) {
	    	      SchemeIds[i] = (String)(cursor.getString(ScodecolumnIndex));
	    	      ////// System.out.println("DB-ADAP: PROD RLP: "+ (String) cursor.getString(ScodecolumnIndex).toString());
	    	      cursor.moveToNext();
	    	     }
	    	    }
	    	    return SchemeIds;
	    	   } finally {
	    	    cursor.close();
	    	   }
	    	  }
	
	    public String[] PrevPDASchemeApplicableSecondPage(String strStoreID) {

	    	  
	    	  String []strSchemeIds = fnGetSchemeIdsAppliedOnStore(strStoreID);
	    	  String CompleteResult[]=new String[strSchemeIds.length];
            if(strSchemeIds.length>=1)
	    	  {
	    		  String myQuery="SELECT SchemeID,SchemeName FROM tblSchemeMstr WHERE SchemeID in (" + makePlaceholders(strSchemeIds.length) + ")";
		    	  Cursor cursor = db.rawQuery(myQuery, strSchemeIds);

		    	  try {
		    	    //CompleteResult = new String[cursor.getCount()];
		    	   if (cursor.getCount() > 0) {

		    	    if (cursor.moveToFirst()) {

		    	     for (int i = 0; i <= (cursor.getCount() - 1); i++) {
		    	      CompleteResult[i] = (String) cursor.getString(0) +"_"+(String) cursor.getString(1);
		    	      cursor.moveToNext();
		    	     }
		    	    }

		    	   }
		    	  

		    	  } finally {
		    	   cursor.close();
		    	  } 
	    	  }
	    	 
	    	  return CompleteResult;
	    	 }
	    
	    private String makePlaceholders(int len) {
	        if (len < 1) {
	            // It will lead to an invalid query anyway ..
	            throw new RuntimeException("No placeholders");
	        } else {
	            StringBuilder sb = new StringBuilder(len * 2 - 1);
	            sb.append("?");
	            for (int i = 1; i < len; i++) {
	                sb.append(",?");
	            }
	            return sb.toString();
	        }
	    }
	    
	    
	
	
	
	
	public String[] PrevPDASchemeApplicableSecondPageSpecialScheme(String strStoreID) {

		/*
		 * Cursor cursorALL = db.rawQuery("SELECT * FROM tblStoreList", null);
		 * 
		 * ////// System.out.println("PrevDateChk - ALL Records Count: "+
		 * cursorALL.getCount());
		 */
		String strMystoretype = "";
		strMystoretype = fnGetStoreTypeOnStoreIdBasis(strStoreID);
		Cursor cursor = db.rawQuery(
				"SELECT SchemeDesc FROM tblspForPDASchemeApplicableList WHERE StoreType ='"
						+ strMystoretype + "' and flgSpecialScheme=1", null);

		try {
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						CompleteResult[i] = (String) cursor.getString(0);
						//// System.out.println("strMystoretype : " + strMystoretype);
						////// System.out.println("CompleteResult[i] : "+ CompleteResult[i].toString().trim());
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	public String[] PrevPDALastTranDetForSecondPage(String strStoreID) {

		/*
		 * Cursor cursorALL = db.rawQuery("SELECT * FROM tblStoreList", null);
		 * 
		 * ////// System.out.println("PrevDateChk - ALL Records Count: "+
		 * cursorALL.getCount());
		 */

		Cursor cursor = db
				.rawQuery(
						"SELECT SKUName, LastTransDate, Stock, OrderQty, FreeQty FROM tblPDALastTranDateForSecondPage WHERE StoreID ='"
								+ strStoreID + "'", null);

		try {
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						CompleteResult[i] = (String) cursor.getString(0)
								+ "_"
								+ (String) cursor.getString(1)
								+ "_"
								+ (String) cursor.getString(2)
								+ "_"
								+ (String) cursor.getString(3)
								+ "_"
								+ (String) cursor.getString(4);
						cursor.moveToNext();
					}
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	public String fnGetPDALastInvoiceDetlastDate(String strStoreID) {

		Cursor cursorE2 = db.rawQuery(
				"SELECT LastTransDate FROM tblPDALastInvoiceDet WHERE StoreID ='"
						+ strStoreID + "'", null);
		String LastTransDate = "";
		int ScodecolumnIndex = 0;
		try {

			if (cursorE2.moveToFirst()) {

				for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
					LastTransDate = (String) cursorE2.getString(
                            ScodecolumnIndex);
					cursorE2.moveToNext();
				}
			}
			return LastTransDate;
		} finally {
			cursorE2.close();
		}

	}
	//tblPDAProductReturnMstr (AutoReturnIdMstr int null,StoreID text null, ReturnDate text null, Comment text null, 
	//TotalReturnQty int null, TotalReturnValue real null, Sstat integer null,TotalAdjustQty integer null,
	//TotalAdjustValue real null,FinalBalanceAmount real null,LastCreditAmount real null);";
	
	
	public long insertPDAProductReturnMstr(int AutoReturnIdMstr,
			String StoreID, String ReturnDate, Double previousCreditAmt) {
		ContentValues initialValues = new ContentValues();

		////// System.out.println("Saved AutoReturnIdMstr:" + AutoReturnIdMstr+ "Saved StoreID:" + "" + StoreID);

		initialValues.put("AutoReturnIdMstr", AutoReturnIdMstr);
		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("ReturnDate", ReturnDate.trim());
		initialValues.put("Comment", "Not Available");
		// initialValues.put(KEY_TotalReturnQty, 0);
		// initialValues.put(KEY_TotalReturnValue, 0.00);

		// initialValues.put(KEY_TotalAdjustQty, 0);
		// initialValues.put(KEY_TotalAdjustValue, 0.00);
		initialValues.put("FinalBalanceAmount", previousCreditAmt);
		// initialValues.put(KEY_LastCreditAmount, 0.00);

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN19, null, initialValues);
	}

	public int getExistingPicNos(String StoreID) {

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tblStoreMaterialPhotoDetail where StoreID='" + StoreID + "'", null);
		try {
			int strProdStockQty = 0;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					if (!cursor.isNull(ScodecolumnIndex)) {
						strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex));
						cursor.moveToNext();
					}

				}
			}
			return strProdStockQty;
		} finally {
			cursor.close();
		}
	}
	public Double fnGetDiscountValueOnRealSlabBasis(String strSchemeID, String SlabFrom) {
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		Double strSchemeIDFreeProductId = 0.00;
		Cursor cursor2 = db.rawQuery(
				"SELECT Discount FROM tblSchemeDetails where  SchemeID = '" + strSchemeID
						 + "' and SlabFrom='"+SlabFrom+"'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {

					strSchemeIDFreeProductId = Double.parseDouble(cursor2
							.getString(LoncolumnIndex));
							//+ "_"
							//+ cursor2.getString(LoncolumnIndex1);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strSchemeIDFreeProductId;
		} finally {
			cursor2.close();
		}
	}
	
	public int fnGetFreeQuantityOnRealSlabBasis(String strSchemeID, String SlabFrom) {
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		int strSchemeIDFreeProductId = 0;
		Cursor cursor2 = db.rawQuery(
				"SELECT FreeQuantity FROM tblSchemeDetails where  SchemeID = '" + strSchemeID
						 + "' and SlabFrom='"+SlabFrom+"'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {

					strSchemeIDFreeProductId = Integer.parseInt(cursor2
							.getString(LoncolumnIndex));
							//+ "_"
							//+ cursor2.getString(LoncolumnIndex1);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strSchemeIDFreeProductId;
		} finally {
			cursor2.close();
		}
	}
	
	public String fnGetFreeProdIDOnRealSlabBasis(String strSchemeID, String SlabFrom) {
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		String strSchemeIDFreeProductId = "";
		Cursor cursor2 = db.rawQuery(
				"SELECT FreeProductID FROM tblSchemeDetails where  SchemeID = '" + strSchemeID
						 + "' and SlabFrom='"+SlabFrom+"'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {

					strSchemeIDFreeProductId = cursor2
							.getString(LoncolumnIndex);
							//+ "_"
							//+ cursor2.getString(LoncolumnIndex1);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strSchemeIDFreeProductId;
		} finally {
			cursor2.close();
		}
	}
	
	  public String fnGetMProdIDAccordingToSchemeID(String SchID)
	  {
		  int LoncolumnIndex = 0;
			int LoncolumnIndex1 = 1;
			String strSchemeIDFreeProductId = "";
			Cursor cursor2 = db.rawQuery(
					"SELECT ProductID FROM tblschemeProductMap where SchemeID='"
							+ SchID + "' LIMIT 1", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {

						strSchemeIDFreeProductId = cursor2
								.getString(LoncolumnIndex);
								//+ "_"
								//+ cursor2.getString(LoncolumnIndex1);
						cursor2.moveToNext();
						// cursor.close();
					}

				}
				return strSchemeIDFreeProductId;
			} finally {
				cursor2.close();
			} 
	  }
	

	public String fnGetMaxSlabofProductAccordingToOrder(
			String strSchemType, String strSchemeID, int strOrderValue) {
		int LoncolumnIndex = 0;
		//////// System.out.println("strFPIDSlb strMaxSlb :" + strMaxSlb);
		String strProductSabFreeOrDiscount = "";

		if (Integer.parseInt(strSchemType) == 1
				|| Integer.parseInt(strSchemType) == 2) {
			Cursor cursor2 = db.rawQuery(
					"SELECT Max(SlabFrom) FROM tblSchemeDetails where SlabFrom<="
							+ strOrderValue + " and SchemeID = '" + strSchemeID
							+ "'", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						if (strProductSabFreeOrDiscount == "") {
							strProductSabFreeOrDiscount = cursor2
									.getString(LoncolumnIndex);
						}

						cursor2.moveToNext();
						// cursor.close();
					}

					strProductSabFreeOrDiscount = strProductSabFreeOrDiscount;

				}

			} finally {
				cursor2.close();
			}
		}
		if (Integer.parseInt(strSchemType) == 3) {
			Cursor cursor2 = db.rawQuery(
					"SELECT Max(SlabFrom) FROM tblSchemeDetails where SlabFrom<="
							+ strOrderValue + " and SchemeID = '" + strSchemeID
							+ "'", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						if (strProductSabFreeOrDiscount == "") {
							strProductSabFreeOrDiscount = cursor2
									.getString(LoncolumnIndex);
						}

						////// System.out.println("Discount Abhinav = "+ strProductSabFreeOrDiscount);
						cursor2.moveToNext();
						// cursor.close();
					}

					strProductSabFreeOrDiscount = strProductSabFreeOrDiscount;

				}

			} finally {
				cursor2.close();
			}
		}
		return strProductSabFreeOrDiscount;
	}
	
	public String fnGetSchemeTypeonSchemeIDBasis(String strSchemeID)
	{
		int LoncolumnIndex = 0;
		//////// System.out.println("strFPIDSlb strMaxSlb :" + strMaxSlb);
		String strProductSabFreeOrDiscount = "";

			Cursor cursor2 = db.rawQuery(
					"SELECT  SchemeType FROM tblSchemeList where SchemeID = '" + strSchemeID
							+ "'", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						if (strProductSabFreeOrDiscount == "") {
							strProductSabFreeOrDiscount = cursor2
									.getString(LoncolumnIndex);
						}

						////// System.out.println("Discount Abhinav = "+ strProductSabFreeOrDiscount);
						cursor2.moveToNext();
						// cursor.close();
					}

					strProductSabFreeOrDiscount = strProductSabFreeOrDiscount;
							
				}

			} finally {
				cursor2.close();
			}
		
		return strProductSabFreeOrDiscount;
	}
	
	
	
	
	
	
	
	// changes by sunil for Summary in Tab
    private int fnCountDataIntblSyncSummuryForProductDetails()
	{
		
		
		Cursor cursorE2 = db.rawQuery("SELECT Count(SkuName) FROM tblSyncSummuryForProductDetails", null);
		
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {
				for (int i = 0; i < cursorE2.getCount(); i++)
				{
					if (!cursorE2.isNull(0))
					{
						chkI = Integer.parseInt(cursorE2.getString(0));
					} else {
						chkI = 0;
					}
					cursorE2.moveToNext();
				}
				
			}

		} finally {
			cursorE2.close();
		}
		//////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
		return chkI;
		
	}
	
	private int fnCountDataIntblStoreProdcutPurchaseDetails(int Sstat)
	{
		Cursor cursorE2 = db.rawQuery("SELECT DISTINCT ProductShortName FROM tblStoreProdcutPurchaseDetails where Sstat='"+Sstat+"' and  (OrderQty<>0 OR SampleQuantity<>0 OR FreeQty<>0)", null);
		
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {
				for (int i = 0; i < cursorE2.getCount(); i++)
				{
					if (!cursorE2.isNull(0))
					{
						chkI = cursorE2.getCount();
					} else {
						chkI = 0;
					}
					cursorE2.moveToNext();
				}
				
			}

		} finally {
			cursorE2.close();
		}
		//////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
		return chkI;
		
	}
	
	
	private int fnCountNumberOfSKUForBothServerAndPDATable()
	{
		int returnvalue=0;
		
		//int ServerTableCount=fnCountDataIntblSyncSummuryForProductDetails();
		//int PDATableCount=fnCountDataIntblStoreProdcutPurchaseDetails(4);
		
		
		
		
		      Cursor	cursorE1 = db.rawQuery("SELECT DISTINCT SkuName FROM  tblSyncSummuryForProductDetails", null);
				
		
				try
				{
					// System.out.println("Number of row for Value from Server Table Data :"+cursorE1.getCount());
					if(cursorE1.getCount()>0)
					{
					  returnvalue=cursorE1.getCount();
					}
				} 
				finally 
				{
					cursorE1.close();
				}
		
				
		//Cursor cursorE2;
		Cursor cursorE2 = db.rawQuery("SELECT DISTINCT ProductShortName FROM tblStoreProdcutPurchaseDetails where Sstat='"+4+"' and  (OrderQty<>0 OR SampleQuantity<>0 OR FreeQty<>0)", null);
		
		
				try 
				{
					// System.out.println("Number of row for Value from PDA Table Data :"+cursorE2.getCount());
					if(cursorE2.getCount()>0)
					{
					returnvalue=returnvalue+cursorE2.getCount();
					}
				}
				finally
				{
					cursorE2.close();
				}
		
		
		
				Cursor cursorE3 = db.rawQuery("SELECT DISTINCT SkuName FROM tblSyncSummuryForProductDetails  a INNER JOIN tblStoreProdcutPurchaseDetails b ON a.SkuName = b.ProductShortName where b.Sstat='"+4+"' and  (b.OrderQty<>0 OR SampleQuantity<>0 OR b.FreeQty<>0)", null);
		
		
				try 
				{
					// System.out.println("Number of row for Value from Common Table Data :"+cursorE3.getCount());
					if(cursorE3.getCount()>0)
					{
					returnvalue=returnvalue-cursorE3.getCount();
					}
				} 
				finally
				{
					cursorE3.close();
				}
		
		return returnvalue;
		
	}
	
	
	private HashMap<String,String> fnAllProductnameForShowingInTable()
	{
	
	    HashMap<String, String> map = new HashMap<>();
	    
		Cursor	cursorE1 = db.rawQuery("SELECT DISTINCT SkuName FROM  tblSyncSummuryForProductDetails", null);
				
		     try
				{
					if(cursorE1.getCount()>0)
					  {
					     if (cursorE1.moveToFirst()) 
					         {

					             for (int i = 0; i < cursorE1.getCount(); i++) 
					                 {

					            	 // System.out.println("Ajeet and Amit row with Server Table Product Name"+ (String) cursorE1.getString(0).toString().trim() );
						                  map.put((String) cursorE1.getString(0).trim(), "1");
						                  cursorE1.moveToNext();
					                 }
				              }
					  }
				} 
			finally 
				{
					cursorE1.close();
				}
				
		Cursor cursorE2 = db.rawQuery("SELECT DISTINCT SkuName FROM tblSyncSummuryForProductDetails  a INNER JOIN tblStoreProdcutPurchaseDetails b ON a.SkuName = b.ProductShortName where b.Sstat='"+4+"' and  (b.OrderQty<>0 OR SampleQuantity<>0 OR b.FreeQty<>0)", null);
		
		
				try 
				{
					if(cursorE2.getCount()>0)
					{
						if (cursorE2.moveToFirst()) 
				         {

				             for (int i = 0; i < cursorE2.getCount(); i++) 
				                 {

				            	 // System.out.println("Ajeet and Amit row with Server Table Product Name Remove"+ (String) cursorE2.getString(0).toString().trim() );
						             map.remove((String) cursorE2.getString(0).trim());
					                  cursorE2.moveToNext();
				                 }
			              }
					}
				} 
				finally
				{
					cursorE2.close();
				}
		
				
		//Cursor cursorE2;
		Cursor cursorE3 = db.rawQuery("SELECT DISTINCT ProductShortName FROM tblStoreProdcutPurchaseDetails where Sstat='"+4+"' and  (OrderQty<>0 OR SampleQuantity<>0 OR FreeQty<>0)", null);
		
		
				try 
				{
					
					if(cursorE3.getCount()>0)
					{
						if (cursorE3.moveToFirst()) 
				         {

				             for (int i = 0; i < cursorE3.getCount(); i++) 
				                 {
				            	 // System.out.println("Ajeet and Amit with PDA Table Product Name"+ (String) cursorE3.getString(0).toString().trim() );
						            
					                  map.put((String) cursorE3.getString(0).trim(), "1");
					                  cursorE3.moveToNext();
				                 }
			              }
					}
				}
				finally
				{
					cursorE3.close();
				}
		
		
		
				/*Cursor cursorE4 = db.rawQuery("SELECT DISTINCT SkuName FROM tblSyncSummuryForProductDetails  a INNER JOIN tblStoreProdcutPurchaseDetails b ON a.SkuName = b.ProductShortName where b.Sstat='"+4+"' and  (b.OrderQty<>0 OR SampleQuantity<>0 OR b.FreeQty<>0)", null);
		
		
				try 
				{
					if(cursorE4.getCount()>0)
					{
						if (cursorE4.moveToFirst()) 
				         {

				             for (int i = 0; i < cursorE4.getCount(); i++) 
				                 {

				            	 // System.out.println("Ajeet and Amit with PDA Table Product Name remove "+ (String) cursorE4.getString(0).toString().trim() );
						          map.remove((String) cursorE4.getString(0).toString().trim());
					                  cursorE4.moveToNext();
				                 }
			              }
					}
				} 
				finally
				{
					cursorE4.close();
				}*/
		
		return map;
		
	}
	
	
	
	
	
	
	
	
	
	 private String fnGetTotalSales(int Sstat)
		{
			int LoncolumnIndex = 0;
			String TotSalesValue = "0.0";
			
		
			Cursor cursor2 = db.rawQuery("SELECT SUM(InvoiceVal) FROM tblInvoice where Sstat='"+Sstat+"'", null);
			try {
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							TotSalesValue =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex));
							////// System.out.println("Abhinav Raj Summary New TotSalesValue from function: "+TotSalesValue);
							cursor2.moveToNext();
						}
						
					}

				}
				return TotSalesValue.replace(",", "");//(TotSalesValue, ",");
			} finally {
				cursor2.close();
			}
		}
	 
	 
	 private String fnGetTotalDiscount(int Sstat)
		{
			int LoncolumnIndex = 0;
			String TotDiscountValue = "0.0";
			
		
			Cursor cursor2 = db.rawQuery("SELECT SUM(TotalDis) FROM tblInvoice where Sstat='"+Sstat+"'", null);
			try {
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							TotDiscountValue =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
						
					}

				}
				return TotDiscountValue;
			} finally {
				cursor2.close();
			}
		}
	 
	 
	 public String fnCalculateKGLitersForTabOne() 
		{
		 int Sstat=4;
			int LoncolumnIndex = 0;
			int LoncolumnIndex1 = 1;
			int LoncolumnIndex2 = 2;
			String[] UniqueKgLiters;
			UniqueKgLiters=fnarrUniqueKgLiters();//fnarrUniqueKgLitersDisplayUnit();
			String val="";
			String totalKGSales="0.0";
			String totalSampleSalesKG="0.0";
			String totalFreeQtySalesKG="0.0";
			String totalLitersSales="0.0";
			String totalSampleSalesLT="0.0";
			String totalFreeQtySalesLT="0.0";
			String totalDiscountLT="0.0";
			String totalDiscountKG="0.0";
			
			
			String totalOverallKGSales="0.0";
			String totalOverallSampleSalesKG="0.0";
			String totalOverallFreeQtySalesKG="0.0";
			String totalOverallLitersSales="0.0";
			String totalOverallSampleSalesLT="0.0";
			String totalOverallFreeQtySalesLT="0.0";
			String totalOverallDiscountLT="0.0";
			String totalOverallDiscountKG="0.0";
			
			String FinalReturnValue="";
			String ppName="";
			String pDisplayUnit="";
			for (int kk = 0; kk < UniqueKgLiters.length; kk++)
			{
				StringTokenizer tokensUniqueKgLiters = new StringTokenizer(String.valueOf(UniqueKgLiters[kk]), "^");
				
				ppName= tokensUniqueKgLiters.nextToken().trim();
				
				val="";
				val=tokensUniqueKgLiters.nextToken().trim();//UniqueKgLiters[kk].toString().trim();
				
				// change by sunil
				//val="0";
				//// System.out.println("Abhi UniqueKgLiters[kk] :"+UniqueKgLiters[kk]);
				
				pDisplayUnit=tokensUniqueKgLiters.nextToken().trim();
				//// System.out.println("Abhi pDisplayUnit:" +pDisplayUnit);
				//if(val.contains("0g"))
				if(pDisplayUnit.contains("Kg"))
				{
					//// System.out.println("Abhi getting Kg");
					Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblStoreProdcutPurchaseDetails where ProductShortName='" + ppName + "' and Sstat='"+Sstat+"'", null);
					try 
					{
						//val=val.replace("g", "");
						if (cursor2.getCount() > 0)
						{
							
						
						if (cursor2.moveToFirst()) 
						{

							for (int i = 0; i < cursor2.getCount(); i++)
							{
								totalKGSales="0.0";
								totalFreeQtySalesKG="0.0";
								totalSampleSalesKG="0.0";
								if (!cursor2.isNull(LoncolumnIndex))
								{
									totalKGSales ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
								//	cursor2.moveToNext();
									
									////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalKGSales-:"+ totalKGSales);
								}
								
								if (!cursor2.isNull(LoncolumnIndex1))
								{
									totalFreeQtySalesKG ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
								//	cursor2.moveToNext();
									////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalFreeQtySalesKG-:"+ totalFreeQtySalesKG);
								}
								if (!cursor2.isNull(LoncolumnIndex2))
								{
									totalSampleSalesKG ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
									
									////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalSampleSalesKG-:"+ totalSampleSalesKG);
								//	
								}
								
								
								//Write Here
								
								totalOverallKGSales="" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(totalKGSales));
								//////// System.out.println("AbhiSunil  totalOverallKGSales-:"+ totalOverallKGSales);
								totalOverallFreeQtySalesKG="" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(totalFreeQtySalesKG));
								//////// System.out.println("AbhiSunil  totalOverallFreeQtySalesKG-:"+ totalOverallFreeQtySalesKG);
								totalOverallSampleSalesKG="" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(totalSampleSalesKG));
								cursor2.moveToNext();
							}

						}
					}
						
					} finally {
						cursor2.close();
					}
					
				}
				//if(val.contains("0ml"))
				if(pDisplayUnit.contains("Lt"))
				{
					//// System.out.println("Abhi getting Liter");
					
					Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblStoreProdcutPurchaseDetails where ProductShortName ='" + ppName + "' and Sstat='"+Sstat+"'", null);
					try {
						//// System.out.println("Abhi  cursor2.getCount() :"+cursor2.getCount());
						//val=val.replace("ml", "");
						if (cursor2.getCount() > 0) 
						{
							
						
						if (cursor2.moveToFirst()) 
						{

							for (int i = 0; i < cursor2.getCount(); i++)
							{
								 totalLitersSales="0.0";
								 totalSampleSalesLT="0.0";
								 totalFreeQtySalesLT="0.0";
								
								if (!cursor2.isNull(LoncolumnIndex))
								{
									
									totalLitersSales ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
								//	////// System.out.println("totalLitersSales :"+totalLitersSales);
									totalOverallLitersSales="" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(totalLitersSales));
									
									//// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
									//cursor2.moveToNext();
								}
								
								if (!cursor2.isNull(LoncolumnIndex1))
								{
									totalFreeQtySalesLT ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
									//////// System.out.println("totalFreeQtySalesLT :"+totalFreeQtySalesLT);
									totalOverallFreeQtySalesLT="" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(totalFreeQtySalesLT));
									
									//// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
									//cursor2.moveToNext();
								}
								if (!cursor2.isNull(LoncolumnIndex2))
								{
									totalSampleSalesLT ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
									totalOverallSampleSalesLT="" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(totalSampleSalesLT));
								
									//// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
									//	////// System.out.println("totalSampleSalesLT :"+totalSampleSalesLT);
								}
								

								
								cursor2.moveToNext();
							}

						}
						}
						
					} finally {
						 cursor2.close();
					}
					
					
				}
			}
			
			//// System.out.println("Abhi Sunil  totalOverallKGSales Before:" +totalOverallKGSales);
			//// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG Before:" +totalOverallFreeQtySalesKG);
			//// System.out.println("Abhi Sunil  totalOverallSampleSalesKG Before:" +totalOverallSampleSalesKG);
			
			totalOverallKGSales= ConvertGramToKilo(totalOverallKGSales);

			totalOverallFreeQtySalesKG= ConvertGramToKilo(totalOverallFreeQtySalesKG);

			totalOverallSampleSalesKG= ConvertGramToKilo(totalOverallSampleSalesKG);
	
			//// System.out.println("Abhi Sunil  totalOverallKGSales After:" +totalOverallKGSales);
	       //// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG After:" +totalOverallFreeQtySalesKG);
	      //// System.out.println("Abhi Sunil  totalOverallSampleSalesKG After:" +totalOverallSampleSalesKG);
			
			totalOverallLitersSales=ConvertMLToLiters(totalOverallLitersSales);

			totalOverallFreeQtySalesLT=ConvertMLToLiters(totalOverallFreeQtySalesLT);
	      
			totalOverallSampleSalesLT=ConvertMLToLiters(totalOverallSampleSalesLT);
			
			
			String strGettblSyncSummuryDetailsKGLitersDetails="";
			strGettblSyncSummuryDetailsKGLitersDetails=fnGettblSyncSummuryDetailsKGLitersDetails();
			
			StringTokenizer tokensGettblSyncSummuryDetailsKGLitersDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsKGLitersDetails), "_");
					
			totalOverallKGSales= "" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallFreeQtySalesKG= "" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallSampleSalesKG= "" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallLitersSales= "" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallFreeQtySalesLT= "" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallSampleSalesLT= "" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			
			
			Double DtotalOverallKGSales =  Double.parseDouble(totalOverallKGSales);
			DtotalOverallKGSales= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));
			
			Double DtotalOverallFreeQtySalesKG = Double.parseDouble(totalOverallFreeQtySalesKG);
			DtotalOverallFreeQtySalesKG= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));
			
			Double DtotalOverallSampleSalesKG = Double.parseDouble(totalOverallSampleSalesKG);
			DtotalOverallSampleSalesKG= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));
			
			Double DtotalOverallLitersSales =  Double.parseDouble(totalOverallLitersSales);
			DtotalOverallLitersSales= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));
			
			Double DtotalOverallFreeQtySalesLT = Double.parseDouble(totalOverallFreeQtySalesLT);
			DtotalOverallFreeQtySalesLT= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));
			
			Double DtotalOverallSampleSalesLT =Double.parseDouble(totalOverallSampleSalesLT);
			DtotalOverallSampleSalesLT= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));
			
			
			 //DtotalOverallKGSales = Double.parseDouble(decimalFormat.format(DtotalOverallKGSales));
			 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));
			 FinalReturnValue= FinalReturnValue + DtotalOverallKGSales + " Units";
			 
			// DtotalOverallFreeQtySalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesKG));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallFreeQtySalesKG + " Units";
			 
			// DtotalOverallSampleSalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesKG));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallSampleSalesKG + " Units";
			 
			// DtotalOverallLitersSales = Double.parseDouble(decimalFormat.format(DtotalOverallLitersSales));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallLitersSales + " LT";
			 
			// DtotalOverallFreeQtySalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesLT));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallFreeQtySalesLT + " LT";
			 
			 //DtotalOverallSampleSalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesLT));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallSampleSalesLT + " LT";
			
			
			//FinalReturnValue= "" + DtotalOverallKGSales + " KG" + "^" + DtotalOverallFreeQtySalesKG + " KG" + "^" + DtotalOverallSampleSalesKG + " KG" + "^" + DtotalOverallLitersSales + " LT" + "^" + DtotalOverallFreeQtySalesLT + " LT" + "^" + DtotalOverallSampleSalesLT + " LT";
			//// System.out.println("Abhi  FinalReturnValue :"+FinalReturnValue);
			return FinalReturnValue;
			
		}
	 
	 
	 
	 private String[] fnarrUniqueProductsSaleSummry_NewWay(int Sstat)
		{
			
		   Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductShortName FROM tblStoreProdcutPurchaseDetails where Sstat='"+Sstat+"' and  (OrderQty<>0 OR SampleQuantity<>0 OR Stock<>0 OR FreeQty<>0) ", null);
			//Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductShortName, KGLiter, DisplayUnit FROM tblProductList", null);
			try
			{
				String UniqueProductShortName[] = new String[cursor2.getCount()];
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(0))
						{
							UniqueProductShortName[i] = cursor2.getString(0);
							//// System.out.println("Anuj ProductShortName sunil: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"KGLiter sunil: "+(String) cursor2.getString(LoncolumnIndex1));
							
							String aa[]=fnarrUniqueKGLiterAndDisplayUnitBasedProductName(UniqueProductShortName[i]);
							UniqueProductShortName[i]=UniqueProductShortName[i]+"^"+aa[0];
							
							// System.out.println("Aajad ProductShortName sunil: "+UniqueProductShortName[i]);
							
							
							cursor2.moveToNext();
						}
						
					}

				}
				return UniqueProductShortName;
			} finally {
				cursor2.close();
			}
		}
	 
	 private String[] fnarrUniqueKGLiterAndDisplayUnitBasedProductName(String ProductShortName)
		{
			
			Cursor cursor2 = db.rawQuery("SELECT  KGLiter, DisplayUnit FROM tblProductList where ProductShortName= '"+ProductShortName+"' ", null);
			try
			{
				String UniqueProductShortName[] = new String[cursor2.getCount()];
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(0))
						{
							UniqueProductShortName[i] = cursor2.getString(0) +"^"+ cursor2.getString(1);
							// System.out.println("Aajad123 ProductShortName sunil: "+UniqueProductShortName[i]);
							
							cursor2.moveToNext();
						}
						
					}

				}
				return UniqueProductShortName;
			} finally {
				cursor2.close();
			}
		}
	 
	 public String fnCalculateKGLitersNotSync(int Sstat) 
		{
			int LoncolumnIndex = 0;
			int LoncolumnIndex1 = 1;
			int LoncolumnIndex2 = 2;
			String[] UniqueKgLiters;
			UniqueKgLiters=fnarrUniqueProductsSaleSummry_NewWay(Sstat);//fnarrUniqueKgLitersDisplayUnit();
			String val="";
			String totalKGSales="0.0";
			String totalSampleSalesKG="0.0";
			String totalFreeQtySalesKG="0.0";
			String totalLitersSales="0.0";
			String totalSampleSalesLT="0.0";
			String totalFreeQtySalesLT="0.0";
			String totalDiscountLT="0.0";
			String totalDiscountKG="0.0";
			
			
			String totalOverallKGSales="0.0";
			String totalOverallSampleSalesKG="0.0";
			String totalOverallFreeQtySalesKG="0.0";
			String totalOverallLitersSales="0.0";
			String totalOverallSampleSalesLT="0.0";
			String totalOverallFreeQtySalesLT="0.0";
			String totalOverallDiscountLT="0.0";
			String totalOverallDiscountKG="0.0";
			
			String FinalReturnValue="";
			String ppName="";
			String pDisplayUnit="";
			for (int kk = 0; kk < UniqueKgLiters.length; kk++)
			{
				StringTokenizer tokensUniqueKgLiters = new StringTokenizer(String.valueOf(UniqueKgLiters[kk]), "^");
				
				ppName= tokensUniqueKgLiters.nextToken().trim();
				
				val="";
				val=tokensUniqueKgLiters.nextToken().trim();//UniqueKgLiters[kk].toString().trim();
				
				// change by sunil
				//val="0";
				//// System.out.println("Abhi UniqueKgLiters[kk] :"+UniqueKgLiters[kk]);
				
				pDisplayUnit=tokensUniqueKgLiters.nextToken().trim();
				//// System.out.println("Abhi pDisplayUnit:" +pDisplayUnit);
				//if(val.contains("0g"))
				if(pDisplayUnit.contains("Kg"))
				{
					//// System.out.println("Abhi getting Kg");
					Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblStoreProdcutPurchaseDetails where ProductShortName='" + ppName + "' and Sstat='"+Sstat+"'", null);
					try 
					{
						//val=val.replace("g", "");
						if (cursor2.getCount() > 0)
						{
							
						
						if (cursor2.moveToFirst()) 
						{

							for (int i = 0; i < cursor2.getCount(); i++)
							{
								totalKGSales="0.0";
								totalFreeQtySalesKG="0.0";
								totalSampleSalesKG="0.0";
								if (!cursor2.isNull(LoncolumnIndex))
								{
									totalKGSales ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
								//	cursor2.moveToNext();
									
									////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalKGSales-:"+ totalKGSales);
								}
								
								if (!cursor2.isNull(LoncolumnIndex1))
								{
									totalFreeQtySalesKG ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
								//	cursor2.moveToNext();
									////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalFreeQtySalesKG-:"+ totalFreeQtySalesKG);
								}
								if (!cursor2.isNull(LoncolumnIndex2))
								{
									totalSampleSalesKG ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
									
									////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalSampleSalesKG-:"+ totalSampleSalesKG);
								//	
								}
								
								
								//Write Here
								
								totalOverallKGSales="" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(totalKGSales));
								//////// System.out.println("AbhiSunil  totalOverallKGSales-:"+ totalOverallKGSales);
								totalOverallFreeQtySalesKG="" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(totalFreeQtySalesKG));
								//////// System.out.println("AbhiSunil  totalOverallFreeQtySalesKG-:"+ totalOverallFreeQtySalesKG);
								totalOverallSampleSalesKG="" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(totalSampleSalesKG));
								cursor2.moveToNext();
							}

						}
					}
						
					} finally {
						cursor2.close();
					}
					
				}
				//if(val.contains("0ml"))
				if(pDisplayUnit.contains("Lt"))
				{
					//// System.out.println("Abhi getting Liter");
					
					Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblStoreProdcutPurchaseDetails where ProductShortName ='" + ppName + "' and Sstat='"+Sstat+"'", null);
					try {
						//// System.out.println("Abhi  cursor2.getCount() :"+cursor2.getCount());
						//val=val.replace("ml", "");
						if (cursor2.getCount() > 0) 
						{
							
						
						if (cursor2.moveToFirst()) 
						{

							for (int i = 0; i < cursor2.getCount(); i++)
							{
								 totalLitersSales="0.0";
								 totalSampleSalesLT="0.0";
								 totalFreeQtySalesLT="0.0";
								
								if (!cursor2.isNull(LoncolumnIndex))
								{
									
									totalLitersSales ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
								//	////// System.out.println("totalLitersSales :"+totalLitersSales);
									totalOverallLitersSales="" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(totalLitersSales));
									
									//// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
									//cursor2.moveToNext();
								}
								
								if (!cursor2.isNull(LoncolumnIndex1))
								{
									totalFreeQtySalesLT ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
									//////// System.out.println("totalFreeQtySalesLT :"+totalFreeQtySalesLT);
									totalOverallFreeQtySalesLT="" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(totalFreeQtySalesLT));
									
									//// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
									//cursor2.moveToNext();
								}
								if (!cursor2.isNull(LoncolumnIndex2))
								{
									totalSampleSalesLT ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
									totalOverallSampleSalesLT="" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(totalSampleSalesLT));
								
									//// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
									//	////// System.out.println("totalSampleSalesLT :"+totalSampleSalesLT);
								}
								

								
								cursor2.moveToNext();
							}

						}
						}
						
					} finally {
						 cursor2.close();
					}
					
					
				}
			}
			
			//// System.out.println("Abhi Sunil  totalOverallKGSales Before:" +totalOverallKGSales);
			//// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG Before:" +totalOverallFreeQtySalesKG);
			//// System.out.println("Abhi Sunil  totalOverallSampleSalesKG Before:" +totalOverallSampleSalesKG);
			
			totalOverallKGSales= ConvertGramToKilo(totalOverallKGSales);

			totalOverallFreeQtySalesKG= ConvertGramToKilo(totalOverallFreeQtySalesKG);

			totalOverallSampleSalesKG= ConvertGramToKilo(totalOverallSampleSalesKG);
	
			//// System.out.println("Abhi Sunil  totalOverallKGSales After:" +totalOverallKGSales);
	       //// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG After:" +totalOverallFreeQtySalesKG);
	      //// System.out.println("Abhi Sunil  totalOverallSampleSalesKG After:" +totalOverallSampleSalesKG);
			
			totalOverallLitersSales=ConvertMLToLiters(totalOverallLitersSales);

			totalOverallFreeQtySalesLT=ConvertMLToLiters(totalOverallFreeQtySalesLT);
	      
			totalOverallSampleSalesLT=ConvertMLToLiters(totalOverallSampleSalesLT);
			
			
			String strGettblSyncSummuryDetailsKGLitersDetails="0.0_0.0_0.0_0.0_0.0_0.0_0.0_0.0";
			//strGettblSyncSummuryDetailsKGLitersDetails=fnGettblSyncSummuryDetailsKGLitersDetails();
			
			StringTokenizer tokensGettblSyncSummuryDetailsKGLitersDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsKGLitersDetails), "_");
					
			totalOverallKGSales= "" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallFreeQtySalesKG= "" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallSampleSalesKG= "" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallLitersSales= "" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallFreeQtySalesLT= "" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallSampleSalesLT= "" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			
			
			Double DtotalOverallKGSales =  Double.parseDouble(totalOverallKGSales);
			DtotalOverallKGSales= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));
			
			Double DtotalOverallFreeQtySalesKG = Double.parseDouble(totalOverallFreeQtySalesKG);
			DtotalOverallFreeQtySalesKG= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));
			
			Double DtotalOverallSampleSalesKG = Double.parseDouble(totalOverallSampleSalesKG);
			DtotalOverallSampleSalesKG= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));
			
			Double DtotalOverallLitersSales =  Double.parseDouble(totalOverallLitersSales);
			DtotalOverallLitersSales= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));
			
			Double DtotalOverallFreeQtySalesLT = Double.parseDouble(totalOverallFreeQtySalesLT);
			DtotalOverallFreeQtySalesLT= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));
			
			Double DtotalOverallSampleSalesLT =Double.parseDouble(totalOverallSampleSalesLT);
			DtotalOverallSampleSalesLT= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));
			
			
			 //DtotalOverallKGSales = Double.parseDouble(decimalFormat.format(DtotalOverallKGSales));
			 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));
			 FinalReturnValue= FinalReturnValue + DtotalOverallKGSales + " Units";
			 
			// DtotalOverallFreeQtySalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesKG));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallFreeQtySalesKG + " Units";
			 
			// DtotalOverallSampleSalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesKG));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallSampleSalesKG + " Units";
			 
			// DtotalOverallLitersSales = Double.parseDouble(decimalFormat.format(DtotalOverallLitersSales));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallLitersSales + " LT";
			 
			// DtotalOverallFreeQtySalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesLT));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallFreeQtySalesLT + " LT";
			 
			 //DtotalOverallSampleSalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesLT));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallSampleSalesLT + " LT";
			
			
			//FinalReturnValue= "" + DtotalOverallKGSales + " KG" + "^" + DtotalOverallFreeQtySalesKG + " KG" + "^" + DtotalOverallSampleSalesKG + " KG" + "^" + DtotalOverallLitersSales + " LT" + "^" + DtotalOverallFreeQtySalesLT + " LT" + "^" + DtotalOverallSampleSalesLT + " LT";
			//// System.out.println("Abhi  FinalReturnValue :"+FinalReturnValue);
			return FinalReturnValue;
			
		}
	 
		public String[] fnCalculateProductsSaleSummryForSubmitAndNotSentToServer(int Sstat) 
		{
			int LoncolumnIndex = 0;
			int LoncolumnIndex1 = 1;
			int LoncolumnIndex2 = 2;
			String[] UniqueProductsSaleSummry;
			UniqueProductsSaleSummry=fnarrUniqueProductsSaleSummry_NewWay(Sstat);   // 121 Product will come
			
			
			// System.out.println("Check data 1 UniqueProductsSaleSummry :"+UniqueProductsSaleSummry.length);
			
			String val="";
			String SummryPName="";
			String SDisplayName="";
			String SDisplayUnit="";
			
			
			String SumOQty[]=new String[UniqueProductsSaleSummry.length];
			String SumFQty[]=new String[UniqueProductsSaleSummry.length];
			String SumSQty[]=new String[UniqueProductsSaleSummry.length];
			
			
			String SumOQtyKG[]=new String[UniqueProductsSaleSummry.length];
			String SumFQtyKG[]=new String[UniqueProductsSaleSummry.length];
			String SumSQtyKG[]=new String[UniqueProductsSaleSummry.length];
		
			
			String SummryProductName[]=new String[UniqueProductsSaleSummry.length];
			String SummryDisplayUnit[]=new String[UniqueProductsSaleSummry.length];
			
			String FinalReturnValue[]=new String[UniqueProductsSaleSummry.length];
			
			String LineSkuWise[]=new String[UniqueProductsSaleSummry.length];
			
			
			for (int kk = 0; kk < UniqueProductsSaleSummry.length; kk++)
			{
				val="";
				SummryPName="";
				SDisplayUnit="";
				String getVal="";
				getVal= UniqueProductsSaleSummry[kk].trim();
				
				StringTokenizer tokens = new StringTokenizer(String.valueOf(getVal), "^");
				SummryPName=tokens.nextToken().trim();
				val=tokens.nextToken().trim();
				SDisplayUnit=tokens.nextToken().trim();
				
				
				SummryProductName[kk]=SummryPName;
				SummryDisplayUnit[kk]=SDisplayUnit;
				
				
				LineSkuWise[kk]=fnCalculateLinesSkuWise(SummryPName);
				
				// by sunil
				// Sstat = 3
				
				//if(val.contains("0g"))
				if(SDisplayUnit.contains("Kg"))
				{
					
					Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity) FROM  tblStoreProdcutPurchaseDetails where ProductShortName ='" + SummryPName + "' and Sstat='"+Sstat+"'", null);
					try {
						//val=val.replace("g", "");
						if (cursor2.getCount() > 0)
						{
							
						
						if (cursor2.moveToFirst()) 
						{

							for (int i = 0; i < cursor2.getCount(); i++)
							{
								
								if (!cursor2.isNull(LoncolumnIndex))
								{
									SumOQty[kk]=""+ Integer.parseInt(cursor2.getString(LoncolumnIndex));
									//////////// System.out.println("SummryPName SumOQty[kk]"+SumOQty[kk]);
									String OrderKG=	"" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));			
									//////////// System.out.println("SummryPName OrderKG"+OrderKG);
									SumOQtyKG[kk] =ConvertGramToKilo(OrderKG);
								//	cursor2.moveToNext();
								}
								else
								{
									SumOQty[kk]=""+ "0";
									SumOQtyKG[kk] ="" +"0.0";
								}
								
								if (!cursor2.isNull(LoncolumnIndex1))
								{
									SumFQty[kk] ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)));
									String FreeKG="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
									
									SumFQtyKG[kk] =ConvertGramToKilo(FreeKG);
									
								//	cursor2.moveToNext();
								}
								else
								{
									SumFQty[kk] ="" +"0";
									SumFQtyKG[kk] ="0.0";
								}
								if (!cursor2.isNull(LoncolumnIndex2))
								{
									SumSQty[kk] ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)));
									String SampleKG="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
									SumSQtyKG[kk] =ConvertGramToKilo(SampleKG);
								
								}
								else
								{
									SumSQty[kk] ="0";
									SumSQtyKG[kk] ="0.0";
								}
								cursor2.moveToNext();
							}

						}
					}
						
					} finally {
						cursor2.close();
					}
					
				}
				//if(val.contains("0ml"))
				if(SDisplayUnit.contains("Lt"))
				{
					
					Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity) FROM  tblStoreProdcutPurchaseDetails where ProductShortName ='" + SummryPName + "' and Sstat='"+Sstat+"'", null);
					try {
						//val=val.replace("ml", "");
						if (cursor2.getCount() > 0)
						{
							
						
						if (cursor2.moveToFirst()) 
						{

							for (int i = 0; i < cursor2.getCount(); i++)
							{
								
								if (!cursor2.isNull(LoncolumnIndex))
								{
									SumOQty[kk]=""+ Integer.parseInt(cursor2.getString(LoncolumnIndex));
									String OrderKG=	"" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));								
									SumOQtyKG[kk] =ConvertMLToLiters(OrderKG);
								
								}
								else
								{
									SumOQty[kk]=""+ "0";
									SumOQtyKG[kk] ="" +"0.0";
								}
								
								if (!cursor2.isNull(LoncolumnIndex1))
								{
									SumFQty[kk] ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)));
									String FreeKG="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
									SumFQtyKG[kk] =ConvertMLToLiters(FreeKG);
								
								}
								else
								{
									SumFQty[kk] ="" +"0";
									SumFQtyKG[kk] ="0.0";
								}
								if (!cursor2.isNull(LoncolumnIndex2))
								{
									SumSQty[kk] ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)));
									String SampleKG="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
									SumSQtyKG[kk] =ConvertMLToLiters(SampleKG);
								
								}
								else
								{
									SumSQty[kk] ="0";
									SumSQtyKG[kk] ="0.0";
								}
								cursor2.moveToNext();
							}

						}
						}
						
					} finally {
						cursor2.close();
					}
					
				}
			}
			

			for (int kk = 0; kk < UniqueProductsSaleSummry.length; kk++)
			{
			    FinalReturnValue[kk]=SummryProductName[kk] + "^" + SumOQty[kk] + "^" + SumFQty[kk] + "^" + SumSQty[kk] + "^" + SumOQtyKG[kk] + "^" + SumFQtyKG[kk] + "^" + SumSQtyKG[kk]+ "^" + LineSkuWise[kk];
			}

			return FinalReturnValue;
			
		}
		
		 public String fnGetFullSummryDetailsForSaleForTabTwoAndTabThree(int Sstat) 
			{
				
				String FullSummryDetailsForSale;
				FullSummryDetailsForSale="";
				
				int TotActualCall=0;
				TotActualCall=fnGetActualCall();
				
				////// System.out.println("TotActualCall: "	+ TotActualCall);
				
				int TotProductiveCall=0;
				TotProductiveCall=fnGetProductiveCall();
				
				////// System.out.println("TotProductiveCall: "	+ TotProductiveCall);
				
				String TotSalesValue="0.00";
				TotSalesValue=fnGetTotalSales(Sstat);//fnGetTotalDiscount
				
				
				String TotDiscountValue="0.00";
				TotDiscountValue=fnGetTotalDiscount(Sstat);
				
				
				////// System.out.println("TotSalesValue: "	+ TotSalesValue);
				////// System.out.println("fnGetTotalDiscount: "	+ TotDiscountValue);
				//String strGettblSyncSummuryDetailsCallDetails="";
				//strGettblSyncSummuryDetailsCallDetails=fnGettblSyncSummuryDetailsCallDetails();
				////// System.out.println("strGettblSyncSummuryDetailsCallDetails: "	+ strGettblSyncSummuryDetailsCallDetails);
				//StringTokenizer tokensGettblSyncSummuryDetailsCallDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsCallDetails), "_");
						
				/*TotActualCall= TotActualCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
				TotProductiveCall= TotProductiveCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
				TotSalesValue="" + (Double.parseDouble(TotSalesValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
				TotDiscountValue="" + (Double.parseDouble(TotDiscountValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
				*/
				FullSummryDetailsForSale =TotActualCall + "_" + TotProductiveCall + "_" + TotSalesValue + "_" + TotDiscountValue;
				
				
				////// System.out.println("FullSummryDetailsForSale: "	+ FullSummryDetailsForSale);
				
				return FullSummryDetailsForSale;
			}
	 
	 
	 
	 
	
	 public String fnGetFullSummryDetailsForSaleForTabOne() 
		{
			
			String FullSummryDetailsForSale;
			FullSummryDetailsForSale="";
			
			int TotActualCall=0;
			TotActualCall=fnGetActualCall();
			
			////// System.out.println("TotActualCall: "	+ TotActualCall);
			
			int TotProductiveCall=0;
			TotProductiveCall=fnGetProductiveCall();
			
			////// System.out.println("TotProductiveCall: "	+ TotProductiveCall);
			
			String TotSalesValue="0.00";
			TotSalesValue=fnGetTotalSales(4);//fnGetTotalDiscount
			
			
			String TotDiscountValue="0.00";
			TotDiscountValue=fnGetTotalDiscount(4);
			
			
			////// System.out.println("TotSalesValue: "	+ TotSalesValue);
			////// System.out.println("fnGetTotalDiscount: "	+ TotDiscountValue);
			String strGettblSyncSummuryDetailsCallDetails="";
			strGettblSyncSummuryDetailsCallDetails=fnGettblSyncSummuryDetailsCallDetails();
			////// System.out.println("strGettblSyncSummuryDetailsCallDetails: "	+ strGettblSyncSummuryDetailsCallDetails);
			StringTokenizer tokensGettblSyncSummuryDetailsCallDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsCallDetails), "_");
					
			TotActualCall= TotActualCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
			TotProductiveCall= TotProductiveCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
			TotSalesValue="" + (Double.parseDouble(TotSalesValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
			TotDiscountValue="" + (Double.parseDouble(TotDiscountValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
			FullSummryDetailsForSale =TotActualCall + "_" + TotProductiveCall + "_" + TotSalesValue + "_" + TotDiscountValue;
			
			
			////// System.out.println("FullSummryDetailsForSale: "	+ FullSummryDetailsForSale);
			
			return FullSummryDetailsForSale;
		}
	
	
	
	
	public String[] fnCalculateProductsSaleSummryForTabOneNew() 
	{
		int Sstat=4;
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		int LoncolumnIndex2 = 2;
		//String[] UniqueProductsSaleSummry;
		//UniqueProductsSaleSummry=fnarrUniqueProductsSaleSummry();
		
		
		int ServerTableCount=fnCountDataIntblSyncSummuryForProductDetails();
		int PDATableCount=fnCountDataIntblStoreProdcutPurchaseDetails(4);
		int noOfRow=0;
		
		/*// System.out.println("Testing Sunil Value by new function ServerTableCount :"+ServerTableCount);
		// System.out.println("Testing Sunil Value by new function PDATableCount :"+PDATableCount);*/
		
		if(ServerTableCount>0 && PDATableCount>0)
		{
			noOfRow=fnCountNumberOfSKUForBothServerAndPDATable();
		}
		else if(ServerTableCount>0)
		{
			noOfRow=fnCountDataIntblSyncSummuryForProductDetails();
		}
		else if(PDATableCount>0)
		{
			noOfRow=fnCountDataIntblStoreProdcutPurchaseDetails(4);
		}
		
		String SummryProductName[]=new String[noOfRow];
		
		// System.out.println("Checking the number of row "+noOfRow);
		
		HashMap<String, String> hmapProductName= new HashMap<>();
		
		hmapProductName=fnAllProductnameForShowingInTable();
		 // System.out.println("Ajeet and Amit row with Product name length"+ hmapProductName.size() );
		int ii=0;
		for( String s : hmapProductName.keySet() )
		{
            // System.out.println("Ajeet and Amit row with final  "+ s );
            SummryProductName[ii]=s;
            ii++;
        }
		
		
		String val="";
		String SummryPName="";
		String SDisplayName="";
		String SDisplayUnit="";
		
		
		String SumOQty[]=new String[noOfRow];
		String SumFQty[]=new String[noOfRow];
		String SumSQty[]=new String[noOfRow];
		String SumOVal[]=new String[noOfRow];
		String SumDVal[]=new String[noOfRow];
		
		
		
		
		String SummryDisplayUnit[]=new String[noOfRow];
		
		String FinalReturnValue[]=new String[noOfRow];
		
		String LineSkuWise[]=new String[noOfRow];
		
		
		for (int kk = 0; kk < noOfRow; kk++)
		{
			
			String SumOfOQtyValue="0";
			String SumOfFQtyValue="0";
			String SumOfSQtyValue="0";
			
			String ProductPrice="0";
			String SumOfOrderValue="0.0";
			String SumOfDiscountValue="0.0";

			
			Cursor cursor1 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),ProductPrice,OrderVal,DisVal FROM  tblStoreProdcutPurchaseDetails where ProductShortName ='" + SummryProductName[kk] + "' and Sstat='"+Sstat+"'", null);
			try 
			{
				if (cursor1.getCount() > 0)
				{
				    if (cursor1.moveToFirst()) 
				         {

					       for (int i = 0; i < cursor1.getCount(); i++)
					            {
						
						             if (!cursor1.isNull(0))
						                     {
							                           SumOfOQtyValue=""+ Integer.parseInt(cursor1.getString(0));
							                 }
						            
						
						            if (!cursor1.isNull(1))
						                      {
						            	              SumOfFQtyValue=""+ Integer.parseInt(cursor1.getString(1));
						                      }
						
						 
									if (!cursor1.isNull(2))
									           {
										              SumOfSQtyValue=""+ Integer.parseInt(cursor1.getString(2));
									           }
									if (!cursor1.isNull(3))
							           {
										ProductPrice= cursor1.getString(3).trim();
							           }
									if (!cursor1.isNull(4))
							           {
										SumOfOrderValue= cursor1.getString(4).trim();
							           }
									if (!cursor1.isNull(5))
							           {
										SumOfDiscountValue= cursor1.getString(5).trim();
							           }
						
						          cursor1.moveToNext();
					             }

				           }
			          }
				
			} 
			finally 
			{
				cursor1.close();
			}
			
			Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQty),ProductPrice,OrderVal,DisVal FROM  tblSyncSummuryForProductDetails where SkuName ='" + SummryProductName[kk] + "'", null);
			try 
			{
				if (cursor2.getCount() > 0)
				{
				    if (cursor2.moveToFirst()) 
				         {

					       for (int i = 0; i < cursor2.getCount(); i++)
					            {
						
						             if (!cursor2.isNull(0))
						                     {
						            	 
							                           SumOfOQtyValue=""+ (Integer.parseInt(SumOfOQtyValue)+Integer.parseInt(cursor2.getString(0)));
							                 }
						            
						
						            if (!cursor2.isNull(1))
						                      {
						            	              SumOfFQtyValue=""+ (Integer.parseInt(SumOfFQtyValue)+Integer.parseInt(cursor2.getString(1)));
						                      }
						
						 
									if (!cursor2.isNull(LoncolumnIndex2))
									           {
										              SumOfSQtyValue=""+ (Integer.parseInt(SumOfSQtyValue)+Integer.parseInt(cursor2.getString(2)));
									           }
									if (!cursor2.isNull(3))
							                  {
										              ProductPrice= cursor2.getString(3).trim();
							                   }
									if (!cursor2.isNull(4))
							                  {
										              SumOfOrderValue=""+ (Double.parseDouble(SumOfOrderValue)+Double.parseDouble(cursor2.getString(4)));
							                   }
									if (!cursor2.isNull(5))
							                   {
										              SumOfDiscountValue=""+ (Double.parseDouble(SumOfDiscountValue)+Double.parseDouble(cursor2.getString(5)));
							                   }
						
						
						          cursor2.moveToNext();
					             }

				           }
			          }
				
			} 
			finally 
			{
				cursor2.close();
			}
			
			/*String SumOfOQtyValue="0";
			String SumOfFQtyValue="0";
			String SumOfSQtyValue="0";
			
			String ProductPrice;
			String SumOfOrderValue="0";
			String SumOfDiscountValue="0";*/
			
			SumOQty[kk]=SumOfOQtyValue;
			SumFQty[kk]=SumOfFQtyValue;
			SumSQty[kk]=SumOfSQtyValue;
			SumOVal[kk]=SumOfOrderValue;
			SumDVal[kk]=SumOfDiscountValue;
			
			FinalReturnValue[kk]=SummryProductName[kk] + "^" + SumOQty[kk] + "^" + SumFQty[kk] + "^" + SumSQty[kk]  + "^" +ProductPrice+ "^" +SumOVal[kk]+ "^" +SumDVal[kk]+ "^"  + "0";
			
			
			
		}
		
		
		
		
		
		return FinalReturnValue;
		
	}
	
	
	
	
	
	
	
	
	
	 public void deleteAlrtProductWithSlab(String storeId,String _productID,String _schSlabId,String pdaOrderID)
     {
      open();
      Cursor cur=db.rawQuery("Select ProductID from tblAlrtVal where StoreId ='"+storeId+"' and ProductID = '"+_productID+"' and schSlabId = '"+_schSlabId+"' and OrderIDPDA='"+pdaOrderID+"'",null );
      if(cur.getCount()>0)
      {
       db.delete(DATABASE_TABLE_Main214, "StoreID=? AND ProductID=? AND schSlabId=? AND OrderIDPDA=? ",new String[] {storeId,_productID,_schSlabId,pdaOrderID}); 
      }
     
      close();
     }






public void deleteAlertValueSlab(String storeId,String _schSlabId,String pdaOrderID)
{
open();
Cursor cur=db.rawQuery("Select ProductID from tblAlrtVal where StoreId ='"+storeId+"' and OrderIDPDA='"+pdaOrderID+"' and schSlabId = '"+_schSlabId+"'",null );
if(cur.getCount()>0)
{
db.delete(DATABASE_TABLE_Main214, "StoreID=? AND schSlabId=? AND OrderIDPDA=? ",new String[] {storeId,_schSlabId,pdaOrderID}); 
}

close();
}
	




	
	
	
	
	
	public String fnGetMinSlabofSchemeID(String strSchemeID) {
		int LoncolumnIndex = 0;
		//////// System.out.println("strFPIDSlb strMaxSlb :" + strMaxSlb);
		String strProductSabFreeOrDiscount = "";

			Cursor cursor2 = db.rawQuery(
					"SELECT Min(SlabFrom) FROM tblSchemeDetails where SchemeID = '" + strSchemeID
							+ "'", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						if (strProductSabFreeOrDiscount == "") {
							strProductSabFreeOrDiscount = cursor2
									.getString(LoncolumnIndex);
						}

						////// System.out.println("Discount Abhinav = "+ strProductSabFreeOrDiscount);
						cursor2.moveToNext();
						// cursor.close();
					}

					strProductSabFreeOrDiscount = strProductSabFreeOrDiscount;
							
				}

			} finally {
				cursor2.close();
			}
		
		return strProductSabFreeOrDiscount;
	}
	
	public void reTruncateRouteMstrTbl() 
	 {
	  db.execSQL("DELETE FROM tblRouteMstr");
	 }
	
	public String[] fnGetProductIDIDOnSchemeIdBasisNew(String SchemeID) {

		Cursor cursor = db.rawQuery("SELECT ProductID  FROM tblschemeProductMap where SchemeID='" + SchemeID + "'", null);

		try {
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0)
			{

				if (cursor.moveToFirst()) 
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						CompleteResult[i] = cursor.getString(0) ;
						////// System.out.println("Abhi121 ProductID:" + CompleteResult[i].toString());
						cursor.moveToNext();
					}
				
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	public String[] fnGetAllProductIDsAgainstSchemeIDsofClickedProductScheme(String AllSchmeIDs ) {

		Cursor cursor = db.rawQuery("SELECT ProductId FROM tblschemeProductMap where SchemeID  IN ("+AllSchmeIDs+")", null); // where FreeProductID IN ("+AllFreeProductgainstSchemeID+")
		////// System.out.println("New Logic SELECT ProductId FROM tblschemeProductMap where SchemeID  IN ("+AllSchmeIDs+")");
		try {
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0)
			{

				if (cursor.moveToFirst()) 
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						CompleteResult[i] = cursor.getString(0) ;
						////// System.out.println("Abhi121 fnGetAllProductIDsAgainstSchemeIDsofClickedProductScheme DISTINCT ProductID:" + CompleteResult[i].toString());
						cursor.moveToNext();
					}
				
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	public String[] fnGetAllSchemeIDsAgainstCommonFreeIDsofClickedProductScheme(String AllFreeProductgainstSchemeID ) {

		Cursor cursor = db.rawQuery("SELECT DISTINCT SchemeID FROM tblSchemeDetails where FreeProductID IN ("+AllFreeProductgainstSchemeID+")", null); // where FreeProductID IN ("+AllFreeProductgainstSchemeID+")

		try {
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0)
			{

				if (cursor.moveToFirst()) 
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						CompleteResult[i] = cursor.getString(0) ;
						////// System.out.println("Abhi121 fnGetAllSchemeIDsAgainstCommonFreeIDs DISTINCT SchemeID:" + CompleteResult[i].toString());
						cursor.moveToNext();
					}
				
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	public String fnGetProdswithnewlogicNewNEw(String AllSchemeIds ) {

		Cursor cursor = db.rawQuery("SELECT DISTINCT FreeProductID FROM tblSchemeDetails where SchemeID IN ("+AllSchemeIds+")", null);

		try {
			String CompleteResult = "";
			if (cursor.getCount() > 0)
			{

				if (cursor.moveToFirst()) 
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						if(CompleteResult.equals(""))
						{
							CompleteResult = "'"+cursor.getString(0)+"'";
						}
						else
						{
							CompleteResult = CompleteResult+",'"+cursor.getString(0)+"'" ;
						}
						
						
						cursor.moveToNext();
					}
					////// System.out.println("All Products Against All Schemes:" + CompleteResult);
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	public String fnGetFreeProductIDetailswithnewlogicNew(String AllSchemeIds ) {

		Cursor cursor = db.rawQuery("SELECT DISTINCT FreeProductID FROM tblSchemeDetails where SchemeID IN ("+AllSchemeIds+")", null);

		try {
			String CompleteResult = "";
			if (cursor.getCount() > 0)
			{

				if (cursor.moveToFirst()) 
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						if(CompleteResult.equals(""))
						{
							CompleteResult = "'"+cursor.getString(0)+"'";
						}
						else
						{
							CompleteResult = CompleteResult+",'"+cursor.getString(0)+"'" ;
						}
						
						
						cursor.moveToNext();
					}
					////// System.out.println("All FreeProductID Against Scheme:" + CompleteResult);
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	public String[] fnGetDistinctFreeProductIDetails(String AllSchemeIds ) {

		Cursor cursor = db.rawQuery("SELECT DISTINCT FreeProductID FROM tblSchemeDetails where SchemeID IN ("+AllSchemeIds+")", null);

		try {
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0)
			{

				if (cursor.moveToFirst()) 
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						CompleteResult[i] = cursor.getString(0) ;
						////// System.out.println("Abhi121 FreeProductID:" + CompleteResult[i].toString());
						cursor.moveToNext();
					}
				
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	public String fnGetSchemeswithnewlogic(String AllFreeProductgainstSchemeID ) {

		Cursor cursor = db.rawQuery("SELECT DISTINCT SchemeID FROM tblSchemeDetails where FreeProductID IN ("+AllFreeProductgainstSchemeID+")", null);

		try {
			String CompleteResult = "";
			if (cursor.getCount() > 0)
			{

				if (cursor.moveToFirst()) 
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						if(CompleteResult.equals(""))
						{
							CompleteResult = "'"+cursor.getString(0)+"'";
						}
						else
						{
							CompleteResult = CompleteResult+",'"+cursor.getString(0)+"'" ;
						}
						
						
						cursor.moveToNext();
					}
					////// System.out.println("All SchemeIDs Against FreeProducts:" + CompleteResult);
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	
	public String fnGetFreeProductIDetailswithnewlogic(String SchemeID ) {

		Cursor cursor = db.rawQuery("SELECT DISTINCT FreeProductID FROM tblSchemeDetails where SchemeID='" + SchemeID + "'", null);

		try {
			String CompleteResult = "";
			if (cursor.getCount() > 0)
			{

				if (cursor.moveToFirst()) 
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						if(CompleteResult.equals(""))
						{
							CompleteResult = "'"+cursor.getString(0)+"'";
						}
						else
						{
							CompleteResult = CompleteResult+",'"+cursor.getString(0)+"'" ;
						}
						
						
						cursor.moveToNext();
					}
					////// System.out.println("All FreeProductID Against Scheme:" + CompleteResult);
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	public boolean countStockExists(String sID) {
		// int entryCount;
		Cursor cursorE2 = db.rawQuery(
				"SELECT SUM(Stock) FROM tblTransac WHERE StoreID ='" + sID
						+ "'", null);
		boolean chkI = false;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					////// System.out.println("Stock prev.. entered!");

					chkI = true;
				} else {
					chkI = false;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	
	public String[] FetchStoreTransacFreeSampleQty(String sID2Fetch) {

		// id = getAllEntries();

		int SnamecolumnIndex1 = 0;

		// int Stock,int OrderQty, Double OrderVal, int FreeQty, Double DisVal

		Cursor cursor = db.rawQuery(
				"SELECT SampleQuantity  FROM tblTransac WHERE StoreID ='"
						+ sID2Fetch + "'", null);
		try {

			String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {

					StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);

					cursor.moveToNext();
					// cursor.close();

				}

			}
			return StoreName;
		} finally {
			cursor.close();
		}

	}
	

	public String[] FetchStoreInvoiceData(String sID2Fetch) {

		// id = getAllEntries();

		int SnamecolumnIndex1 = 0;
		int SnamecolumnIndex2 = 1;
		int SnamecolumnIndex3 = 2;
		int SnamecolumnIndex4 = 3;
		int SnamecolumnIndex5 = 4;
		int SnamecolumnIndex6 = 5;
		int SnamecolumnIndex7 = 6;
		int SnamecolumnIndex8 = 7;
		int SnamecolumnIndex9 = 8;
		int SnamecolumnIndex10 = 9;
		int SnamecolumnIndex11 = 10;
		int SnamecolumnIndex12 = 11;
		
		
		/*werewr
		 * int SnamecolumnIndex11 = 10; int SnamecolumnIndex12 = 11; int
		 * SnamecolumnIndex13 = 12;
		 */

		// TotalBeforeTaxDis real not null, TaxAmt real not null, TotalDis real
		// not null, InvoiceVal real not null, FreeTotal integer not null);";

		// Cursor cursor =
		// db.rawQuery("SELECT TotalBeforeTaxDis, TaxAmt, TotalDis, InvoiceVal, FreeTotal, InvAfterDis, AddDis, AmtPrevDue, AmtColl, AmtOut, CreditAmt, InvoiceAfterCreditAmt, InvoiceOrginal FROM tblInvoice WHERE StoreID ='"
		// + sID2Fetch + "'", null);
		Cursor cursor = db
				.rawQuery(
						"SELECT TotalBeforeTaxDis, TaxAmt, TotalDis, InvoiceVal, FreeTotal, InvAfterDis, AddDis, AmtPrevDue, AmtColl, AmtOut, NoCoupon,TotalCoupunAmount FROM tblInvoice WHERE StoreID ='" + sID2Fetch + "'", null);
		////// System.out.println("FetchStoreInvoiceData store ............... called");
		try {

			String StoreName[] = new String[cursor.getCount()];
			

			if (cursor.moveToFirst()) {
				////// System.out.println("FetchStoreInvoiceData store ............... cursor.getCount()" + cursor.getCount());
				for (int i = 0; i <= (cursor.getCount() - 1); i++) {

					StoreName[i] = (String) cursor.getString(SnamecolumnIndex1)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex2)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex3)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex4)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex5)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex6)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex7)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex8)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex9)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex10)
									+ "_"
							+ (String) cursor.getString(SnamecolumnIndex11)
									+ "_"
							+ (String) cursor.getString(SnamecolumnIndex12);// + "_" + (String)
												// cursor.getString(SnamecolumnIndex11).toString()
												// + "_" + (String)
												// cursor.getString(SnamecolumnIndex12).toString()
												// + "_" + (String)
												// cursor.getString(SnamecolumnIndex13).toString();
					////// System.out.println("FetchStoreInvoiceData store ..............." + StoreName[i]);
					cursor.moveToNext();
					// cursor.close();

				}

			}
			return StoreName;
		} finally {
			cursor.close();
		}

	}
	
	public String[] FetchStoreTransacData(String sID2Fetch) {

		// id = getAllEntries();

		int SnamecolumnIndex1 = 0;
		int SnamecolumnIndex2 = 1;
		int SnamecolumnIndex3 = 2;
		int SnamecolumnIndex4 = 3;
		int SnamecolumnIndex5 = 4;
		int SnamecolumnIndex6 = 5;

		// int Stock,int OrderQty, Double OrderVal, int FreeQty, Double DisVal

		Cursor cursor = db
				.rawQuery(
						"SELECT Stock, OrderQty, OrderVal, FreeQty, DisVal, SampleQuantity  FROM tblTransac WHERE StoreID ='"
								+ sID2Fetch + "'", null);
		try {

			String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {

					StoreName[i] = (String) cursor.getString(SnamecolumnIndex1)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex2)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex3)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex4)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex5)
							+ "_"
							+ (String) cursor.getString(SnamecolumnIndex6);

					cursor.moveToNext();
					// cursor.close();

				}

			}
			return StoreName;
		} finally {
			cursor.close();
		}

	}
	
	public String fnGetSchemeIdOnStoreTypeBasis(String strStoreType) {
		int LoncolumnIndex = 0;
		String strSchemeID = "";
		Cursor cursor2 = db.rawQuery(
				"SELECT SchemeID FROM tblschemeStoreTypeMap where StoreTypeID="
						+ Integer.parseInt(strStoreType), null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strSchemeID = cursor2.getString(LoncolumnIndex);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strSchemeID;
		} finally {
			cursor2.close();
		}

		/*
		 * Double myLons[] = new Double[cursor2.getCount()];; if
		 * (cursor2.moveToFirst()) { for (int i = 0; i < cursor2.getCount();
		 * i++) { myLons[i] = cursor2.getDouble(LoncolumnIndex);
		 * cursor2.moveToNext(); //cursor2.close(); //third try } // second
		 * tried here: cursor2.close(); } cursor2.close(); // Original location
		 * for cursor2.close() //db.close();
		 * 
		 * return myLons;
		 */
	}
	
	public String fnGetStoreTypeOnStoreIdBasis(String strStoreID) {

		Cursor cursorE2 = db.rawQuery("SELECT StoreType FROM tblStoreList WHERE StoreID ='"+ strStoreID + "'", null);
		String StoreType = "";
		int ScodecolumnIndex = 0;
		try {

			if (cursorE2.moveToFirst()) {

				for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
					StoreType = (String) cursorE2.getString(ScodecolumnIndex);
					cursorE2.moveToNext();
				}
			}
			return StoreType;
		} finally {
			cursorE2.close();
		}

	}
	
	//public String[] FetchLODqty(String ssStoreID,String CatID)
	public HashMap<String,String> FetchLODqty(String ssStoreID) 
	{

		int ScodecolumnIndex = 0;
		int SnamecolumnIndex = 1;

		//hmapCtgryPrdctDetail= key=prdctId,val=CategoryID
		HashMap<String, String> hmapCtgryPrdctDetail= new HashMap<>();
		
		
		open();
		//tblLODOnLastSalesSummary(StoreID text null,Date text null,SKUID text  null,Qty integer null,SKUName text null);";
		
		/*Cursor cursor = db.rawQuery("SELECT LastTransDate, Quantity FROM tblLastTransactionDetails where StoreID= '"
								+ ssStoreID + "' and CategoryID='"+CatID+"'", null);*/
		/*Cursor cursor = db.rawQuery("SELECT LastTransDate, Quantity FROM tblLastTransactionDetails where StoreID= '"
				+ ssStoreID + "'", null);*/
		Cursor cursor = db.rawQuery("SELECT Date,Qty,SKUID FROM tblLODOnLastSalesSummary where StoreID= '"
				+ ssStoreID + "'", null);
		
		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst()) {

					for (int i = 0; i < cursor.getCount(); i++) {

						if (cursor.getString(ScodecolumnIndex).equals("NA"))
						{
							hmapCtgryPrdctDetail.put((String) cursor.getString(2),"NA"+ "-"+ (String) cursor.getString(SnamecolumnIndex));

						} 
						else
						{
							String fullDate;
							String convertedTXTdate;
							String exDay;
							String exMonth;

							//SimpleDateFormat format1 = new SimpleDateFormat("dd-MM-yyyy",Locale.ENGLISH);
							//Date date;

							fullDate = cursor.getString(ScodecolumnIndex);
							fullDate=tViewDate(fullDate);

							StringTokenizer tokens = new StringTokenizer(String.valueOf(fullDate), "-");

							exDay = tokens.nextToken().trim();
							exMonth = tokens.nextToken().trim();
							hmapCtgryPrdctDetail.put((String) cursor.getString(2),exDay+"/"+exMonth+ "-"+(String) cursor.getString(SnamecolumnIndex));
							//StoreName[i] = exDay+"/"+exMonth+ "-"+(String)cursor.getString(SnamecolumnIndex).toString();
						
						}
						cursor.moveToNext();
					}
				}
			}
		
		/*try {
			String StoreName[] = new String[cursor.getCount()];
			//// System.out.println("Sunil Total cursor.getCount() :"+cursor.getCount());
			
			if(cursor.getCount()>0)
			{
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					
					
					
					
					//// System.out.println("Sunil Total cursor :"+cursor.getString(ScodecolumnIndex).toString());

					try {
						} catch (Exception e) {
					}
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					cursor.moveToNext();
				}
			}
		}*/
			return hmapCtgryPrdctDetail;
		} finally {
			cursor.close();
			close();
		}
		
	}
	
	private String tViewDate(String PrevDate)
	{
		
		 //// System.out.println("PrevDate :"+PrevDate);
		 StringTokenizer tokennewPdate=new StringTokenizer(PrevDate, "-");
		String md1e=tokennewPdate.nextToken().trim();
		String md2e=tokennewPdate.nextToken().trim();
		if(md2e.toLowerCase().equals("Jan".toLowerCase()))
		{
			md2e="01";
		}
		if(md2e.toLowerCase().equals("Feb".toLowerCase()))
		{
			md2e="02";
		}
		if(md2e.toLowerCase().equals("Mar".toLowerCase()))
		{
			md2e="03";
		}
		if(md2e.toLowerCase().equals("Apr".toLowerCase()))
		{
			md2e="04";
		}
		if(md2e.toLowerCase().equals("May".toLowerCase()))
		{
			md2e="05";
		}
		if(md2e.toLowerCase().equals("Jun".toLowerCase()))
		{
			md2e="06";
		}
		if(md2e.toLowerCase().equals("Jul".toLowerCase()))
		{
			md2e="07";
		}
		if(md2e.toLowerCase().equals("Aug".toLowerCase()))
		{
			md2e="08";
		}
		if(md2e.toLowerCase().equals("Sep".toLowerCase()))
		{
			md2e="09";
		}
		if(md2e.toLowerCase().equals("Oct".toLowerCase()))
		{
			md2e="10";
		}
		if(md2e.toLowerCase().equals("Nov".toLowerCase()))
		{
			md2e="11";
		}
		if(md2e.toLowerCase().equals("Dec".toLowerCase()))
		{
			md2e="12";
		}
		String md3e=tokennewPdate.nextToken().trim();
		PrevDate=md1e +"-"+md2e+"-"+ md3e;
		
		return PrevDate;
	}
	
	
	/*public String[] FetchRate() {

		// id = getAllEntries();

		int ScodecolumnIndex = 0;

		
		Cursor cursor = db.rawQuery("SELECT ProductRLP FROM tblProductList",null);
		try {
			String StoreName[] = new String[cursor.getCount()];
			;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex)
							.toString();
					////// System.out.println("DB-ADAP: PROD RLP: "+ (String) cursor.getString(ScodecolumnIndex).toString());
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}
	}*/
	public Double fnGetLastCreditAmountFromLastInvoiceTable(String strStoreID) {

		int ScodecolumnIndex = 0;
		Double strLastBalanceAmt = 0.00;
		Cursor cursor = db.rawQuery(
				"SELECT CreditPreviousDue FROM tblPDALastInvoiceDet where StoreID='"
						+ strStoreID + "'", null);
		try {
			////// System.out.println("Raja babu Abhivan Raj strLastBalanceAmt 1a :"+strLastBalanceAmt);
			if(cursor.getCount()>0)
			{
				////// System.out.println("Raja babu Abhivan Raj strLastBalanceAmt 2a :"+strLastBalanceAmt);
			if (cursor.moveToFirst()) {
				if(!cursor.getString(ScodecolumnIndex).equals(""))
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						if (!cursor.isNull(ScodecolumnIndex)) {
							strLastBalanceAmt = Double.parseDouble(cursor
                                    .getString(ScodecolumnIndex));
							////// System.out.println("Raja babu Abhivan Raj strLastBalanceAmt 3a :"+strLastBalanceAmt);
							cursor.moveToNext();
						}

					}
				}

				
			}
			}
			////// System.out.println("Raja babu Abhivan Raj strLastBalanceAmt 4a :"+strLastBalanceAmt);
			return strLastBalanceAmt;
		} finally {
			cursor.close();
		}
	}
	
	private Double fnGetActualValueTotalReturnValue(String ReturnStoreId) {

		int LoncolumnIndex = 0;
		Double strActualValueTotalReturnValue = 0.00;

		Cursor cursor2 = db.rawQuery(
				"SELECT TotalReturnValue FROM  tblPDAProductReturnMstr where StoreID='"
						+ ReturnStoreId + "'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					if (!cursor2.isNull(LoncolumnIndex)) {
						strActualValueTotalReturnValue = Double
								.parseDouble(cursor2.getString(LoncolumnIndex));
					}

					cursor2.moveToNext();
					// cursor.close();
				}

			}

			return strActualValueTotalReturnValue;
		} finally {
			cursor2.close();
		}

	}
	private Double fnGetActualValueAdjAmt(String ReturnStoreId) {

		int LoncolumnIndex = 0;
		Double strActualValueTotalAdjAmt = 0.00;
		Cursor cursor2 = db.rawQuery(
				"SELECT TotalAdjustValue FROM  tblPDAProductReturnMstr where StoreID='"
						+ ReturnStoreId + "'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					if (!cursor2.isNull(LoncolumnIndex)) {
						strActualValueTotalAdjAmt = Double.parseDouble(cursor2
								.getString(LoncolumnIndex));
					}

					cursor2.moveToNext();
					// cursor.close();
				}

			}

			return strActualValueTotalAdjAmt;
		} finally {
			cursor2.close();
		}

	}
	
	private int fnCkhTotalReturnValue(String ReturnStoreId) {

		int LoncolumnIndex = 0;
		int strReturnIdMstr = 0;

		Cursor cursor2 = db.rawQuery(
				"SELECT TotalReturnValue FROM  tblPDAProductReturnMstr where StoreID='"
						+ ReturnStoreId + "'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strReturnIdMstr = 1;
					cursor2.moveToNext();
					// cursor.close();
				}

			}

			return strReturnIdMstr;
		} finally {
			cursor2.close();
		}

	}
	public Double fnGetAdjAmtProdReturns(String StoreID) {
		Double TotalAdjAmt = 0.00;
		int chkValue = fnCkhTotalReturnValue(StoreID);
		if (chkValue == 1) {
			TotalAdjAmt = fnGetActualValueAdjAmt(StoreID);

		}

		return TotalAdjAmt;
	}
	
	public Double fnGetTotalReturnValueOnOrderPage(String StoreID) {
		Double TotalReturnValue = 0.00;
		int chkValue = fnCkhTotalReturnValue(StoreID);
		if (chkValue == 1) {
			TotalReturnValue = fnGetActualValueTotalReturnValue(StoreID);

		}

		return TotalReturnValue;
	}
	
	public int fnCheckflgToShowStrachRowOrNot()
	{
		
		
		Cursor cursorE2 = db.rawQuery(
				"SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme", null);
		
		////// System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {
				for (int i = 0; i < cursorE2.getCount(); i++)
				{
					if (!cursorE2.isNull(0))
					{
						chkI = Integer.parseInt(cursorE2.getString(0));
					} else {
						chkI = 0;
					}
					cursorE2.moveToNext();
				}
				
			}

		} finally {
			cursorE2.close();
		}
		////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
		return chkI;
		
	}
	public int checkStoreIdForNewStore(String ssStoreID){
		int ScodecolumnIndex = 0;
		
		Cursor cursor = db.rawQuery(
						"SELECT *  FROM tblNewStoreListEntries where StoreID= '"
								+ ssStoreID + "'", null);
		try {
			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++) {
					ScodecolumnIndex = 1;
					cursor.moveToNext();
					// cursor.close();
				}

			}
    ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return ScodecolumnIndex;
		} finally {
			cursor.close();
		}

	}
	
	public String fnGetPDALastInvoiceDetDueAmt(String strStoreID) {

		Cursor cursorE2 = db.rawQuery(
				"SELECT BalanceAmount FROM tblPDALastInvoiceDet WHERE StoreID ='"
						+ strStoreID + "'", null);
		String StoreType = "0.0";
		int ScodecolumnIndex = 0;
		try {
			if (cursorE2.getCount()>0)
			{
				
			if (cursorE2.moveToFirst()) {
				if(!cursorE2.getString(ScodecolumnIndex).equals(""))
				{
				for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
					StoreType = (String) cursorE2.getString(ScodecolumnIndex);
					cursorE2.moveToNext();
				}
				}
			}
			}
			return StoreType;
		} finally {
			cursorE2.close();
		}

	}
	
	/*public Double[] FetchProdTaxAmt() {

		// id = getAllEntries();

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery(
				"SELECT ProductTaxAmount FROM tblProductList", null);
		try {
			Double StoreName[] = new Double[cursor.getCount()];
			;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					StoreName[i] = (Double) cursor.getDouble(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}
	}*/
	
	public int fnGetStrachIDMinSlabQtyForCalculation(int strSchemeID)
	{
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		int LoncolumnIndex2 = 2;

		int strProductSabCardStrachIDQty = 0;

		
			Cursor cursor2 = db.rawQuery("SELECT Min(Slab) FROM tblStrachOnSchemeDetails where SchID = "+ strSchemeID , null);
			try {
				if (cursor2.moveToFirst()) 
				{
					if (!cursor2.isNull(LoncolumnIndex))
					{
						for (int i = 0; i < cursor2.getCount(); i++)
						{
							if (strProductSabCardStrachIDQty == 0)
							{
								strProductSabCardStrachIDQty = Integer.parseInt(cursor2
										.getString(LoncolumnIndex));
							}

							cursor2.moveToNext();
							// cursor.close();
						}
					}
					

					

				}

			} finally {
				cursor2.close();
			}
		return strProductSabCardStrachIDQty;
	}
	
	public String fnGetStrachIDSlabQtyForCalculation(int Slab, int strSchemeID)
	{
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		int LoncolumnIndex2 = 2;

		String strProductSabCardStrachIDQty = "";

		
			Cursor cursor2 = db.rawQuery("SELECT Slab,cardStrachID,Qty FROM tblStrachOnSchemeDetails where Slab="	+ Slab + " and SchID = "+ strSchemeID , null);
			try {
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						if (strProductSabCardStrachIDQty == "")
						{
							strProductSabCardStrachIDQty = cursor2
									.getString(LoncolumnIndex) + "_"+  cursor2
									.getString(LoncolumnIndex1)  + "_"+  cursor2
									.getString(LoncolumnIndex2) ;
						}

						cursor2.moveToNext();
						// cursor.close();
					}

					

				}

			} finally {
				cursor2.close();
			}
		return strProductSabCardStrachIDQty;
	}
	
	public int fnGetStrachIDMaxSlabQtyForCalculation(int strSchemeID, int strOrderValue)
	{
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		int LoncolumnIndex2 = 2;

		int strProductSabCardStrachIDQty = 0;

		
			Cursor cursor2 = db.rawQuery("SELECT Max(Slab) FROM tblStrachOnSchemeDetails where Slab<="	+ strOrderValue + " and SchID = "+ strSchemeID , null);
			try {
				if (cursor2.moveToFirst()) 
				{
					if (!cursor2.isNull(LoncolumnIndex))
					{
						for (int i = 0; i < cursor2.getCount(); i++)
						{
							if (strProductSabCardStrachIDQty == 0)
							{
								strProductSabCardStrachIDQty = Integer.parseInt(cursor2
										.getString(LoncolumnIndex));
							}

							cursor2.moveToNext();
							// cursor.close();
						}
					}
					

					

				}

			} finally {
				cursor2.close();
			}
		return strProductSabCardStrachIDQty;
	}
	
	public String[] fnGetOtherProductIdForStrachCoupons(int strSchemID) {


		int ScodecolumnIndex = 0;
		Cursor cursor = db.rawQuery(
				"SELECT ProductId FROM tblSchemeProductMap where SchemeID='"
						+ strSchemID+"'", null);
		try {
			String ProductComboIds[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					ProductComboIds[i] = (String) cursor.getString(
                            ScodecolumnIndex);
					cursor.moveToNext();
					//// System.out.println("fnGetOtherProductIdOfCombo : Product  Id  that Returns"+ ProductComboIds[i].trim());
				}
			}
			return ProductComboIds;
		} finally {
			cursor.close();
		}
	}
	public int fnCheckIsStrachCardApplicableonSlabOrValue(int SchemeID)
	{
		
		int LoncolumnIndex = 0;
		Cursor cursorE2 = db.rawQuery("SELECT ProductValueOrSlabBased FROM tblStrachOnSchemeDetails where SchID="+ SchemeID, null);
		
		////// System.out.println("fnCheckIsStrachCardApplicableonSlabOrValue : " +"SELECT ProductValueOrSlabBased FROM tblStrachOnSchemeDetails where SchID="+ SchemeID);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {
				
					
						chkI = Integer.parseInt(cursorE2.getString(LoncolumnIndex));
					
					cursorE2.moveToNext();
				
				
			}

		} finally {
			cursorE2.close();
		}
		////// System.out.println("fnCheckIsStrachCardApplicableonSlabOrValue : " +chkI);
		return chkI;
		
	}
	public int fnCheckIsStrachCardApplicableonSchemeID(int SchemeID)
	{
		
		
		Cursor cursorE2 = db.rawQuery(
				"SELECT flgIsStrachApplicable FROM tblStrachApplicableOnScheme where SchID="+ SchemeID, null);
		
		////// System.out.println("fnCheckIsStrachCardApplicableonSchemeID : " +"SELECT flgIsStrachApplicable FROM tblStrachApplicableOnScheme where SchID="+ SchemeID);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {
				for (int i = 0; i < cursorE2.getCount(); i++)
				{
					if (!cursorE2.isNull(0))
					{
						chkI = 1;
					} else 
					{
						chkI = 0;
					}
					cursorE2.moveToNext();
				}
				
			}

		} finally {
			cursorE2.close();
		}
		////// System.out.println("fnCheckIsStrachCardApplicableonSchemeID : " +chkI);
		return chkI;
		
	}
	
	public String[] fnGetUniqueSchemeId() 
	{
		int LoncolumnIndex = 0;
		
		
	
		Cursor cursor2 = db.rawQuery("SELECT DISTINCT SchID FROM tblStrachOnSchemeDetails", null);
		try {
			String UniqueSchemeId[] = new String[cursor2.getCount()];
			if (cursor2.moveToFirst()) 
			{

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					
					if (!cursor2.isNull(LoncolumnIndex))
					{
						UniqueSchemeId[i] = cursor2.getString(LoncolumnIndex);
						////// System.out.println("abccc  :"+UniqueSchemeId[i]);
						cursor2.moveToNext();
					}
					
				}

			}
			return UniqueSchemeId;
		} finally {
			cursor2.close();
		}
	}
	
	public String fnGetFreeProductNameOnProcutIdBasisCombo(String strProductId) {

		int ScodecolumnIndex = 0;

		
		Cursor cursor = db.rawQuery(
				"SELECT ProductShortName FROM tblProductList where ProductID='"
						+ strProductId + "'", null);
		try {
			String ProductComboId = "";
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					ProductComboId = (String) cursor
                            .getString(ScodecolumnIndex);

					cursor.moveToNext();
				}
			}
			return ProductComboId;
		} finally {
			cursor.close();
		}
	}
    public HashMap<String, String> checkForStoreIdSstat()
    {
        Cursor cursor=db.rawQuery("Select StoreID,Sstat from tblStoreList where Sstat in(1,3,4,5,6)",null);
        HashMap<String, String> hmapStoreIDSstat=new HashMap<String, String>();
        if(cursor.getCount()>0)
        {
            if(cursor.moveToFirst())
            {
                for(int index=0;index<cursor.getCount();index++)
                {
                    hmapStoreIDSstat.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }
        return hmapStoreIDSstat;
    }
    public HashMap<String, String> checkForStoreIdForDate()
    {
        Cursor cursor=db.rawQuery("Select StoreID,ForDate from tblStoreList where Sstat in(1,3,4,5,6)",null);
        HashMap<String, String> hmapStoreIDForDate=new HashMap<String, String>();
        if(cursor.getCount()>0)
        {
            if(cursor.moveToFirst())
            {
                for(int index=0;index<cursor.getCount();index++)
                {
                    hmapStoreIDForDate.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }
        return hmapStoreIDForDate;
    }
    public HashMap<String, String> checkForStoreIdFlgOrderType()
    {
        Cursor cursor=db.rawQuery("Select StoreID,flgOrderType from tblStoreList where Sstat in(1,3,4,5,6)",null);
        HashMap<String, String> hmapStoreIDFlgOrderType=new HashMap<String, String>();
        if(cursor.getCount()>0)
        {
            if(cursor.moveToFirst())
            {
                for(int index=0;index<cursor.getCount();index++)
                {
                    hmapStoreIDFlgOrderType.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }
        return hmapStoreIDFlgOrderType;
    }
	/*public HashMap<String, String> checkForStoreIdSstat()
	{
		Cursor cursor=db.rawQuery("Select StoreID,Sstat from tblStoreList where Sstat in(1,3,4)",null);
		HashMap<String, String> hmapStoreIDSstat= new HashMap<>();
		if(cursor.getCount()>0)
		{
			if(cursor.moveToFirst())
			{
				for(int index=0;index<cursor.getCount();index++)
				{
					hmapStoreIDSstat.put(cursor.getString(0), cursor.getString(1));
					cursor.moveToNext();
				}
			}
		}
		return hmapStoreIDSstat;
	}*/
	
	private String fnValueFreeQtyOrDiscountForCaculation(String strSchemType,
                                                         String strSchemeID, int MaxValue) {
		int LoncolumnIndex = 0;

		String strProductSabFreeOrDiscount = "";

		if (Integer.parseInt(strSchemType) == 1
				|| Integer.parseInt(strSchemType) == 2) {
			Cursor cursor2 = db
					.rawQuery(
							"SELECT FreeQuantity FROM tblSchemeDetails where SlabFrom ="
									+ MaxValue + " and SchemeID ='"
									+ strSchemeID + "'", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						if (strProductSabFreeOrDiscount == "") {
							strProductSabFreeOrDiscount = cursor2
									.getString(LoncolumnIndex);
						}
						////// System.out.println("SabFree - called = "+ strProductSabFreeOrDiscount);
						cursor2.moveToNext();
						// cursor.close();

					}

					// strProductSabFreeOrDiscount =
					// strProductSabFreeOrDiscount;

				}

			} finally {
				cursor2.close();
			}
		}
		if (Integer.parseInt(strSchemType) == 3) {
			Cursor cursor2 = db
					.rawQuery(
							"SELECT Discount FROM tblSchemeDetails where SlabFrom ="
									+ MaxValue + " and SchemeID ='"
									+ strSchemeID + "'", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						if (strProductSabFreeOrDiscount == "") {
							strProductSabFreeOrDiscount = cursor2
									.getString(LoncolumnIndex);
						}

						////// System.out.println("DiscountFree - called = "+ strProductSabFreeOrDiscount);
						cursor2.moveToNext();
						// cursor.close();

					}

					// strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
					// + "_" + strSchemType;

				}

			} finally {
				cursor2.close();
			}
		}
		return strProductSabFreeOrDiscount;
	}
	
	private String fnGetSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisNew(
            String strSchemType, String strSchemeID, String strFreeProductID,
            String strCombTypeID, String strSchemeName) {
		int LoncolumnIndex = 0;
		int LoncolumnIndex2 = 1;
		int LoncolumnIndex3 = 2;
		String strProductSabFreeOrDiscount = "";

		if (Integer.parseInt(strSchemType) == 1
				|| Integer.parseInt(strSchemType) == 2) {
			////// System.out.println("STR SCH TYPE: "+ Integer.parseInt(strSchemType)); //

			Cursor cursor2 = db.rawQuery(
					"SELECT SlabFrom, SlabTo, FreeQuantity FROM tblSchemeDetails WHERE SchemeID ='"
							+ strSchemeID + "'", null);

			//// System.out.println("SELECT SlabFrom, SlabTo, FreeQuantity FROM tblSchemeDetails WHERE SchemeID ='"+ strSchemeID + "'");

			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						if (strProductSabFreeOrDiscount == "") {
							if (Integer.parseInt(strCombTypeID) == 2) {
								strProductSabFreeOrDiscount = "Combo :"
										+ strSchemeName + "("
										+ cursor2.getString(LoncolumnIndex)
										+ "+"
										+ cursor2.getString(LoncolumnIndex3);
							} else {
								strProductSabFreeOrDiscount = strSchemeName
										+ "("
										+ cursor2.getString(LoncolumnIndex)
										+ "+"
										+ cursor2.getString(LoncolumnIndex3);
							}
							//// System.out.println("strProductSabFreeOrDiscount4ab :"+ strProductSabFreeOrDiscount );


						} else {
							if (Integer.parseInt(strCombTypeID) == 2) {
								strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
										+ ", "
										+ cursor2.getString(LoncolumnIndex)
										+ "+"
										+ cursor2.getString(LoncolumnIndex3);
							} else {
								strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
										+ ", "
										+ cursor2.getString(LoncolumnIndex)
										+ "+"
										+ cursor2.getString(LoncolumnIndex3);
							}
							//// System.out.println("strProductSabFreeOrDiscount5ab :"+ strProductSabFreeOrDiscount );


						}

						cursor2.moveToNext();
						// cursor.close();
					}
					//// System.out.println("strProductSabFreeOrDiscount1ab :"+ strProductSabFreeOrDiscount );

					if (strProductSabFreeOrDiscount == "") {
						strProductSabFreeOrDiscount = "No Free Quantity Schemes Available_"
								+ strSchemType;
					} else {
						strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
								+ ")_" + strSchemType;
					}
					//// System.out.println("strProductSabFreeOrDiscount2ab :"+ strProductSabFreeOrDiscount);

				}

			} finally {
				cursor2.close();
			}
		}
		if (Integer.parseInt(strSchemType) == 3) {
			////// System.out.println("STR SCH TYPE: "+ Integer.parseInt(strSchemType)); //
				int flgDiscountType=0;
				flgDiscountType=fnGetDisType(strSchemeID,strSchemType);
			Cursor cursor2 = db.rawQuery(
					"SELECT SlabFrom, SlabTo, Discount FROM tblSchemeDetails WHERE SchemeID ='"
							+ strSchemeID + "'", null);

			//// System.out.println("SELECT SlabFrom, SlabTo, Discount FROM tblSchemeDetails WHERE SchemeID ='"+ strSchemeID + "'");

			try {
				if (cursor2.moveToFirst()) {
					////// System.out.println("CURSOR2 COUNT SCH DIS: "+ cursor2.getCount());

					for (int i = 0; i < cursor2.getCount(); i++) {
							if(flgDiscountType==1)
							{
								if (strProductSabFreeOrDiscount == "") {
									strProductSabFreeOrDiscount = strSchemeName
											+ "("
											+ cursor2.getString(LoncolumnIndex)
											+ "+ Rs/-"
											+ cursor2.getString(LoncolumnIndex3) + ")";
								} else {
									strProductSabFreeOrDiscount = strSchemeName
											+ "("
											+ cursor2.getString(LoncolumnIndex)
											+ "+ Rs/-"
											+ cursor2.getString(LoncolumnIndex3) + ")";
								}
							}
							else if(flgDiscountType==2)
							{
								if (strProductSabFreeOrDiscount == "") {
									strProductSabFreeOrDiscount = strSchemeName
											+ "("
											+ cursor2.getString(LoncolumnIndex)
											+ "+ "
											+ cursor2.getString(LoncolumnIndex3) + "%)";
								} else {
									strProductSabFreeOrDiscount = strSchemeName
											+ "("
											+ cursor2.getString(LoncolumnIndex)
											+ "+ "
											+ cursor2.getString(LoncolumnIndex3) + "%)";
								}
							}
						
						////// System.out.println("strProductSabFreeOrDiscount: "+ strProductSabFreeOrDiscount);

						cursor2.moveToNext();
						// cursor.close();
					}
					if (strProductSabFreeOrDiscount == "") {
						strProductSabFreeOrDiscount = "No Discounts Available_"
								+ strSchemType;
					} else {
						strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
								+ "_" + strSchemType;
					}

				}

			} finally {
				cursor2.close();
			}
		}
		return strProductSabFreeOrDiscount;
	}
	
	private String fnGetSchemeIDOnProductIDIdBasisNew(String strProductId) {
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		String strSchemeIDFreeProductId = "";
		Cursor cursor2 = db.rawQuery(
				"SELECT SchemeID FROM tblschemeProductMap where ProductID='"
						+ strProductId + "' and SchemeType<=3", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {

					strSchemeIDFreeProductId = cursor2
							.getString(LoncolumnIndex);
							//+ "_"
							//+ cursor2.getString(LoncolumnIndex1);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strSchemeIDFreeProductId;
		} finally {
			cursor2.close();
		}
	}
	
	public String fnGetAllSchemeDetailsOnProductNewClick(String strProductId)
	{
		
		String strSchemeIDFreePRoductId = "";
		String strSchemeID = fnGetSchemeIDOnProductIDIdBasisNew(strProductId);
		String strFreeProductID = "";
		String strSchemeTypeCombTypeIDSchemeName = "";
		strSchemeTypeCombTypeIDSchemeName = fnGetSchemTypeOnSchemIDIdBasis(strSchemeID);

		StringTokenizer tokensSchemeTypeCombTypeID = new StringTokenizer(
				String.valueOf(strSchemeTypeCombTypeIDSchemeName), "_");
		String strSchemeType = "";
		String strCombTypeID = "";
		String strSchemeName = "";
		strSchemeType = tokensSchemeTypeCombTypeID.nextToken().trim();
		strCombTypeID = tokensSchemeTypeCombTypeID.nextToken().trim();
		strSchemeName = tokensSchemeTypeCombTypeID.nextToken().trim();
		
		String strForAllScehmesAgainstProduct = "";
		strForAllScehmesAgainstProduct = fnGetSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisNew(
				strSchemeType, strSchemeID, strFreeProductID, strCombTypeID,
				strSchemeName);
		
		
		return strForAllScehmesAgainstProduct;
	}
	
	public String fnFreeQuantity(String strProductId, int MaxValue) {
		String strSchemeIDFreePRoductId = "";
		
		strSchemeIDFreePRoductId = fnGetSchemeIDOnProductIDIdBasis(strProductId);
		//StringTokenizer tokensSchemeIDFreePRoductId = new StringTokenizer(
			//	String.valueOf(strSchemeIDFreePRoductId), "_");
		String strSchemeID = "";
		String strFreeProductID = "";
		strSchemeID =strSchemeIDFreePRoductId;// tokensSchemeIDFreePRoductId.nextToken().trim();
		//strFreeProductID = tokensSchemeIDFreePRoductId.nextToken().trim();

		String strSchemeTypeCombTypeIDSchemeName = "";
		strSchemeTypeCombTypeIDSchemeName = fnGetSchemTypeOnSchemIDIdBasis(strSchemeID);

		StringTokenizer tokensSchemeTypeCombTypeID = new StringTokenizer(
				String.valueOf(strSchemeTypeCombTypeIDSchemeName), "_");
		String strSchemeType = "";
		String strCombTypeID = "";
		String strSchemeName = "";
		strSchemeType = tokensSchemeTypeCombTypeID.nextToken().trim();
		strCombTypeID = tokensSchemeTypeCombTypeID.nextToken().trim();
		strSchemeName = tokensSchemeTypeCombTypeID.nextToken().trim();

		String strValueFreeQtyOrDiscount = "";
		strValueFreeQtyOrDiscount = fnValueFreeQtyOrDiscountForCaculation(strSchemeType, strSchemeID, MaxValue);
		return strValueFreeQtyOrDiscount;
	}
	
	private String fnGetSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisForCaculation(
            String strSchemType, String strSchemeID, int strOrderValue) {
		int LoncolumnIndex = 0;
		//////// System.out.println("strFPIDSlb strMaxSlb :" + strMaxSlb);
		String strProductSabFreeOrDiscount = "";

		if (Integer.parseInt(strSchemType) == 1
				|| Integer.parseInt(strSchemType) == 2) {
			Cursor cursor2 = db.rawQuery(
					"SELECT Max(SlabFrom) FROM tblSchemeDetails where SlabFrom<="
							+ strOrderValue + " and SchemeID = '" + strSchemeID
							+ "'", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						if (strProductSabFreeOrDiscount == "") {
							strProductSabFreeOrDiscount = cursor2
									.getString(LoncolumnIndex);
						}

						cursor2.moveToNext();
						// cursor.close();
					}

					strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
							+ "_" + strSchemType;

				}

			} finally {
				cursor2.close();
			}
		}
		if (Integer.parseInt(strSchemType) == 3) {
			Cursor cursor2 = db.rawQuery(
					"SELECT Max(SlabFrom) FROM tblSchemeDetails where SlabFrom<="
							+ strOrderValue + " and SchemeID = '" + strSchemeID
							+ "'", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						if (strProductSabFreeOrDiscount == "") {
							strProductSabFreeOrDiscount = cursor2
									.getString(LoncolumnIndex);
						}

						////// System.out.println("Discount Abhinav = "+ strProductSabFreeOrDiscount);
						cursor2.moveToNext();
						// cursor.close();
					}

					strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
							+ "_" + strSchemType;

				}

			} finally {
				cursor2.close();
			}
		}
		return strProductSabFreeOrDiscount;
	}
	public String fnCallSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisForCaculationOverAll(
			String strSchemeType, String strSchemeID, int strOrderValue) {
		String strForCalculation = "";
		strForCalculation = fnGetSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisForCaculation(
				strSchemeType, strSchemeID, strOrderValue);
		return strForCalculation;
	}
	
	/*public String[] fnGetOtherProductIdOfCombo(String strSchemID) {

		// id = getAllEntries();

		int ScodecolumnIndex = 0;

		
		Cursor cursor = db.rawQuery(
				"SELECT ProductId FROM tblSchemeProductMap where SchemeID='"
						+ strSchemID + "'", null);
		try {
			String ProductComboIds[] = new String[cursor.getCount()];
			;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					ProductComboIds[i] = (String) cursor.getString(
							ScodecolumnIndex).toString();
					cursor.moveToNext();
					//// System.out.println("fnGetOtherProductIdOfCombo : Product  Id  that Returns"+ ProductComboIds[i].trim());
				}
			}
			return ProductComboIds;
		} finally {
			cursor.close();
		}
	}*/
	
	private String fnGetSchemTypeOnSchemIDIdBasis(String strSchemID)
	{
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		int LoncolumnIndex2 = 2;
		String strSchemeTypeCombTypeIDSchemeName = "";
		Cursor cursor2 = db.rawQuery(
				"SELECT SchemeType, CombTypeID,SchemeName FROM tblSchemeList where SchemeID='"
						+ strSchemID + "'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strSchemeTypeCombTypeIDSchemeName = cursor2
							.getString(LoncolumnIndex)
							+ "_"
							+ cursor2.getString(LoncolumnIndex1)
							+ "_"
							+ cursor2.getString(LoncolumnIndex2);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strSchemeTypeCombTypeIDSchemeName;
		} finally {
			cursor2.close();
		}
	}
	
	public String fnGetProductSchemeIDandComboTypeIdDetails(String strProductId) {
		String strSchemeIDFreePRoductId = "";
		
		strSchemeIDFreePRoductId = fnGetSchemeIDOnProductIDIdBasis(strProductId);
		String strSchemeID = "";
		strSchemeID = strSchemeIDFreePRoductId;

		String strSchemeTypeCombTypeIDSchemeName = "";
		strSchemeTypeCombTypeIDSchemeName = fnGetSchemTypeOnSchemIDIdBasis(strSchemeID);
		
		StringTokenizer tokensSchemeTypeCombTypeID = new StringTokenizer(
				String.valueOf(strSchemeTypeCombTypeIDSchemeName), "_");
		String strSchemeType = "";
		String strCombTypeID = "";
		String strSchemeName = "";
		strSchemeType = tokensSchemeTypeCombTypeID.nextToken().trim();
		strCombTypeID = tokensSchemeTypeCombTypeID.nextToken().trim();
		strSchemeName = tokensSchemeTypeCombTypeID.nextToken().trim();
		
		String strProductIdSchemeIDFreeProductIDSchemeTypeCombTypeID = strProductId
				+ "_"
				+ strSchemeID
				+ "_"
				+ strSchemeType + "_" + strCombTypeID;

		// String strForCalculation="";
		// strForCalculation=fnGetSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisForCaculation(strSchemeType,strSchemeID,strOrderValue);
		return strProductIdSchemeIDFreeProductIDSchemeTypeCombTypeID;
	}
	
	public String[] fnGetFreeProductIDetails(String SchemeID ) {

		Cursor cursor = db.rawQuery("SELECT DISTINCT FreeProductID FROM tblSchemeDetails where SchemeID='" + SchemeID + "'", null);

		try {
			String CompleteResult[] = new String[cursor.getCount()];
			if (cursor.getCount() > 0)
			{

				if (cursor.moveToFirst()) 
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						CompleteResult[i] = cursor.getString(0) ;
						////// System.out.println("Abhi121 FreeProductID:" + CompleteResult[i].toString());
						cursor.moveToNext();
					}
				
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	public String fnGetFreeProIdDefault(String strSchemeID, int strOrderValue) {
		int LoncolumnIndex = 0;
		//////// System.out.println("strFPIDSlb strMaxSlb :" + strMaxSlb);
		String strProductSabFreeOrDiscount = "";

			Cursor cursor2 = db.rawQuery(
					"SELECT FreeProductID FROM tblSchemeDetails where SchemeID = '" + strSchemeID
							+ "' LIMIT 1", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						if (strProductSabFreeOrDiscount == "") {
							strProductSabFreeOrDiscount = cursor2
									.getString(LoncolumnIndex);
						}

						////// System.out.println("Discount Abhinav = "+ strProductSabFreeOrDiscount);
						cursor2.moveToNext();
						// cursor.close();
					}

					strProductSabFreeOrDiscount = strProductSabFreeOrDiscount;
							
				}

			} finally {
				cursor2.close();
			}
		
		return strProductSabFreeOrDiscount;
	}
	private String fnGetSchemeIDOnProductIDIdBasis(String strProductId) {
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		String strSchemeIDFreeProductId = "";
		Cursor cursor2 = db.rawQuery(
				"SELECT SchemeID FROM tblschemeProductMap where ProductID='"
						+ strProductId + "' and SchemeType<=3", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {

					strSchemeIDFreeProductId = cursor2
							.getString(LoncolumnIndex);
							//+ "_"
							//+ cursor2.getString(LoncolumnIndex1);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strSchemeIDFreeProductId;
		} finally {
			cursor2.close();
		}
	}
	
	public String fnCheckIfSchemeApplicableOnProduct(String strProductId) {
		int LoncolumnIndex = 0;
		String strSchemeID = "";
		Cursor cursor2 = db.rawQuery(
				"SELECT SchemeID FROM tblschemeProductMap where ProductID= '"
						+ strProductId + "'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strSchemeID = cursor2.getString(LoncolumnIndex);
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return strSchemeID;
		} finally {
			cursor2.close();
		}
	}
	

	public String[] fnGetOtherSchemeIdBasedOnFreeProductId(
			String strFreeProductID) {

		// id = getAllEntries();

		int ScodecolumnIndex = 0;

		
		Cursor cursor = db
				.rawQuery(
						"SELECT DISTINCT  SchemeID AS SchemeID FROM tblSchemeDetails  where FreeProductID='"
								+ strFreeProductID + "'", null);
		try {
			String ProductComboSchemeIds[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					ProductComboSchemeIds[i] = (String) cursor.getString(
                            ScodecolumnIndex);
					cursor.moveToNext();
					//// System.out.println("fnGetOtherSchemeIdBasedOnFreeProductId : Scheme ID  that Returns"+ ProductComboSchemeIds[i].trim());
				}
			}
			return ProductComboSchemeIds;
		} finally {
			cursor.close();
		}
	}
	//tblTransac (IMEIno text not null, TransDate string not null, StoreID text not null, ProdID text not null, 
	//Stock integer not null, OrderQty integer not null, OrderVal real not null, FreeQty integer not null, 
	//DisVal real not null, SchemeID text null, AppliedSlab text null, AppliedAbsVal text null, Sstat integer not null, 
	//SampleQuantity int null, ProductShortName text null, ProductPrice real null);";//, DisplayUnit text null

	
	
	public long saveStoreTransac(String IMEIno, String TransDate,
			String StoreID, String ProdID, int Stock, int OrderQty,
			Double OrderVal, int FreeQty, Double DisVal,
			String AppliedSchemeID, String AppliedSlab, String AppliedAbsVal,
			int selProdIDForSampleQty, String ProductShortName, Double ProductRate,String CatID ) {//String DisplayUnit
		
		String activeRid;
		activeRid = GetActiveRouteID();
		
		
		ContentValues initialValues = new ContentValues();

		initialValues.put("IMEIno", IMEIno.trim());
		initialValues.put("TransDate", TransDate.trim());
		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("ProdID", ProdID.trim());
		initialValues.put("Stock", Stock);
		initialValues.put("OrderQty", OrderQty);
		initialValues.put("OrderVal", OrderVal);
		initialValues.put("FreeQty", FreeQty);
		initialValues.put("DisVal", DisVal);

		initialValues.put("Sstat", 0);
		initialValues.put("SchemeID", AppliedSchemeID);
		initialValues.put("AppliedSlab", AppliedSlab);
		initialValues.put("AppliedAbsVal", AppliedAbsVal);
		initialValues.put("SampleQuantity", selProdIDForSampleQty);
		
		initialValues.put("ProductShortName", ProductShortName);
		
		initialValues.put("ProductPrice", ProductRate);
		initialValues.put("RouteID", Integer.parseInt(activeRid));
		initialValues.put("CatID", CatID.trim());
		
		//initialValues.put(Key_DisplayUnit, DisplayUnit);
		
		////// System.out.println("inserting saveStoreTransac records..");

		return db.insert(DATABASE_TABLE_MAIN31, null, initialValues);
	}
	
	// table tblInvoice (IMEIno text not null, StoreID text not null, InvoiceDate string not null, TotalBeforeTaxDis real not null, TaxAmt real not null,
	//TotalDis real not null, InvoiceVal real not null, FreeTotal integer not null, Sstat integer not null, InvAfterDis real not null, AddDis real not null, 
	//AmtPrevDue real null, AmtColl real null, AmtOut real null, NoCoupon int null, TotalCoupunAmount real null);";
	
	
	
	public long saveStoreInvoice(String IMEIno, String StoreID,String InvoiceDate, Double TotalBeforeTaxDis, Double TaxAmt,
			Double TotalDis, Double InvoiceVal, int FreeTotal,
			Double InvAfterDis, Double AddDis, Double AmtPrevDue,
			Double AmtColl, Double AmtOut, int NoOfCouponValue, Double TotalCoupunAmount,int Outstat,String OrderIDPDA)// , Double CreditAmt, Double
											// InvoiceAfterCreditAmt, Double
											// valInvoiceOrginal)
	{
		
		String activeRid;
		activeRid = GetActiveRouteID();


		
		
		ContentValues initialValues = new ContentValues();

		initialValues.put("IMEIno", IMEIno.trim());
		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("InvoiceDate", InvoiceDate.trim());
		initialValues.put("TotalBeforeTaxDis", TotalBeforeTaxDis);
		initialValues.put("TaxAmt", TaxAmt);
		initialValues.put("TotalDis", TotalDis);
		initialValues.put("InvoiceVal", InvoiceVal);
		initialValues.put("FreeTotal", FreeTotal);
		initialValues.put("InvAfterDis", InvAfterDis);
		initialValues.put("AddDis", AddDis);
		initialValues.put("Sstat", Outstat);

		initialValues.put("AmtPrevDue", AmtPrevDue);
		initialValues.put("AmtColl", AmtColl);
		initialValues.put("AmtOut", AmtOut);
		
		initialValues.put("NoCoupon", NoOfCouponValue);
		initialValues.put("TotalCoupunAmount", TotalCoupunAmount);
		initialValues.put("RouteID", Integer.parseInt(activeRid));
		initialValues.put("OrderIDPDA", OrderIDPDA);
		/*
		 * initialValues.put(KEY_OrderCreditAmt, 0.00);
		 * initialValues.put(KEY_OrderInvoiceAfterCreditAmt, 0.00);
		 * initialValues.put(KEY_OrderInvoiceOriginal, 0.00);
		 */

		////// System.out.println("inserting saveStoreInvoice records..");

		return db.insert(DATABASE_TABLE_MAIN32, null, initialValues);
	}
	
	public void deleteOldStoreTransac(String sID2del) {
		// int entryCount;
		db.execSQL("DELETE FROM tblTransac WHERE StoreID ='" + sID2del + "'");
		

	}
	
	public void deleteOldStoreInvoice(String sID2del,String OrderIDPDA) {
		// int entryCount;
		open();
		db.execSQL("DELETE FROM tblInvoice WHERE StoreID ='" + sID2del + "' and OrderIDPDA='"+OrderIDPDA+"'");
		close();
		// Cursor cursorE2 =
		

	}

	//tblStrachOnSchemeDetails (SchID int null, cardStrachID int null, Slab int Null, Qty int null, ProductValueOrSlabBased int null);";
	
	
	public long fninsertSchemeCouponSlab(int SchemeID,int CardSlabID,int Slab,int Qtny, int ProductValueOrSlabBased)
	{

		ContentValues initialValues = new ContentValues();

		
		initialValues.put("SchID", SchemeID);
		initialValues.put("cardStrachID", CardSlabID);
		initialValues.put("Slab", Slab);
		initialValues.put("Qty", Qtny);
		initialValues.put("ProductValueOrSlabBased", ProductValueOrSlabBased);
		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN82, null, initialValues);
	}
	
	// tblStrachApplicableOnScheme (SchID int null, flgIsStrachApplicable int null);";
	
	
	public long fninsertSchemeCoupon(int SchemeID,int IsCouponApplicable)
	{

		ContentValues initialValues = new ContentValues();

		
		initialValues.put("SchID", SchemeID);
		initialValues.put("IsCouponApplicable", IsCouponApplicable);
		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN81, null, initialValues);
	}
	
	
	//tblSyncSummuryForProductDetails (SkuName text null,OrderQty text null, FreeQty text null, SampleQty text null, TotalOrderKgs text null, 
	//TotalFreeKgs text null, TotalSampleKgs text null, TotalSales text null);";
	
	
	public long SavetblSyncSummuryForProductDetails(String SkuName, String OrderQty, String FreeQty, String SampleQty,
			String TotalOrderKgs, String TotalFreeKgs, String TotalSampleKgs, String TotalSales,int Lines)
	{
		
		ContentValues initialValues = new ContentValues();
		
		initialValues.put("SkuName", SkuName.trim());
		initialValues.put("OrderQty", OrderQty.trim());
		initialValues.put("FreeQty", FreeQty.trim());
		initialValues.put("SampleQty", SampleQty.trim());
		initialValues.put("TotalOrderKgs", TotalOrderKgs.trim());
		initialValues.put("TotalFreeKgs", TotalFreeKgs.trim());
		initialValues.put("TotalSampleKgs", TotalSampleKgs.trim());
		initialValues.put("TotalSales", TotalSales.trim());
		initialValues.put("Lines", Lines);
		
		
		

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN72, null, initialValues);
	}
	
	// tblSyncSummuryDetails (ActualCalls int null,ProductiveCalls int null, TotSalesValue text null, TotKGSales text null, TotFreeQtyKGSales text null, 
	//TotSampleKGSales text null, TotLTSales text null, TotFreeQtyLTSales text null, TotSampleLTSales text null, TotDiscountKGSales text null, TotDiscountLTales text null);";
	
	public long SavetblSyncSummuryDetails(String ActualCalls, String ProductiveCalls, String TotSalesValue, String TotKGSales,
			String TotFreeQtyKGSales, String TotSampleKGSales, String TotLTSales,
			String TotFreeQtyLTSales, String TotSampleLTSales, String TotDiscountKGSales, String TotDiscountLTales,int Lines)
	{
		
		ContentValues initialValues = new ContentValues();
		
		initialValues.put("ActualCalls", ActualCalls.trim());
		initialValues.put("ProductiveCalls", ProductiveCalls.trim());
		initialValues.put("TotSalesValue", TotSalesValue.trim());
		initialValues.put("TotKGSales", TotKGSales.trim());
		initialValues.put("TotFreeQtyKGSales", TotFreeQtyKGSales.trim());
		initialValues.put("TotSampleKGSales", TotSampleKGSales.trim());
		initialValues.put("TotLTSales", TotLTSales.trim());
		initialValues.put("TotFreeQtyLTSales", TotFreeQtyLTSales.trim());
		initialValues.put("TotSampleLTSales", TotSampleLTSales.trim());
		initialValues.put("TotDiscountKGSales", TotDiscountKGSales.trim());
		initialValues.put("TotDiscountLTales", TotDiscountLTales.trim());
		initialValues.put("Lines", Lines);
		
		

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN71, null, initialValues);
	}

	//tblPDAIsSchemeApplicable (IsSchemeApplicable int null);";

	public long SavePDAIsSchemeApplicable(int IsSchemeApplicable) {
		ContentValues initialValues = new ContentValues();
		initialValues.put("IsSchemeApplicable",IsSchemeApplicable);
	

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN56, null, initialValues);
	}
	
	//private static final String DATABASE_CREATE_TABLE_63 = "create table tblStorTypeMstr(ID string null, Descr string null);";
	
	public long saveStoreTypeDetails(String SidType, String SidDesc) {
		ContentValues initialValues = new ContentValues();

		initialValues.put("ID", SidType.trim());
		initialValues.put("Descr", SidDesc.trim());

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN63, null, initialValues);
	}
	
	//tblspForPDASchemeApplicableList(SchemeID string null, StoreType string null, SchemeDesc string null);";

	
	public long saveSOAPdataPdaSchAppListForSecondPage(String SchemeID,
			String StoreType, String SchemeDesc,int flgSpecialScheme) {
		ContentValues initialValues = new ContentValues();

		initialValues.put("SchemeID", SchemeID.trim());
		initialValues.put("StoreType", StoreType.trim());
		initialValues.put("SchemeDesc", SchemeDesc.trim());
		initialValues.put("flgSpecialScheme", flgSpecialScheme);

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN55, null, initialValues);
	}

	
	//tblPDALastTranDateForSecondPage(StoreID text null, LastTransDate string null, RetailerName string null, SKUName string null, Stock string null, OrderQty string null, FreeQty string null);";
	
	
	public long saveSOAPdataPdaLastTranDateForSecondPage(String StoreID,
			String LastTransDate, String RetailerName, String SKUName,
			String Stock, String OrderQty, String FreeQty) {
		ContentValues initialValues = new ContentValues();

		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("LastTransDate", LastTransDate.trim());
		initialValues.put("RetailerName", RetailerName.trim());
		initialValues.put("SKUName", SKUName.trim());
		initialValues.put("Stock", Stock.trim());
		initialValues.put("OrderQty", OrderQty.trim());
		initialValues.put("FreeQty", FreeQty.trim());
		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN62, null, initialValues);
	}

	
	//tblschemeProductMap (SchemeID text not null, ProductID text not null, SchemeType int null);";
	
	
	public long saveSOAPdataschemeProductMap(String InSchemeID,
			String InProductID, int strSchemeType) {
		ContentValues initialValues = new ContentValues();

		initialValues.put("SchemeID", InSchemeID.trim());
		initialValues.put("ProductID", InProductID.trim());
		initialValues.put("SchemeType", strSchemeType);
		

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN54, null, initialValues);
	}

	
	//tblschemeStoreTypeMap (SchemeID text not null, StoreTypeID integer not null);";
	
	public long saveSOAPdataSchemeSchemeStoreTypeMap(String InSchemeID,
			int InStoreTypeID) {
		ContentValues initialValues = new ContentValues();

		initialValues.put("SchemeID", InSchemeID.trim());
		initialValues.put("StoreTypeID", InStoreTypeID);

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN53, null, initialValues);
	}
	
	
	//tblLastTransactionDetails (StoreID text not null, ProductID text not null, LastTransDate string not null, Quantity integer not null, SampleQuantity int null);";
	
	
	public long saveSOAPdataLastTransactionDetails(String ltdetSCode,
			String ltdetProdCode, String ltdetLTdate, int ltdetQTY,
			int pSampleQty,int CategoryID) {
		ContentValues initialValues = new ContentValues();

		initialValues.put("StoreID", ltdetSCode.trim());
		initialValues.put("ProductID", ltdetProdCode.trim());
		initialValues.put("LastTransDate", ltdetLTdate.trim());
		initialValues.put("Quantity", ltdetQTY);
		initialValues.put("SampleQuantity", pSampleQty);
		initialValues.put("CategoryID", CategoryID);

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN61, null, initialValues);
	}

	
//tblSchemeDetails (SchemeDetID text not null, SchemeID text not null, SlabFrom integer not null, SlabTo integer not null, FreeQuantity integer not null,
	//Discount real not null, FreeProductID text null);";
	
	
	public long saveSOAPdataSchemeDetails(String schdetDetCode,
			String schdetCode, int schdetSF, int schdetST, int schdetFQ,
			Double schdetDIS, String NewFreePrdID) {
		ContentValues initialValues = new ContentValues();

		initialValues.put("SchemeDetID", schdetDetCode.trim());
		initialValues.put("SchemeID", schdetCode.trim());
		initialValues.put("SlabFrom", schdetSF);
		initialValues.put("SlabTo", schdetST);
		initialValues.put("FreeQuantity", schdetFQ);
		initialValues.put("Discount", schdetDIS);
		initialValues.put("FreeProductID", NewFreePrdID.trim());
		
		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN52, null, initialValues);
	}
	
	// tblSchemeList (SchemeID text not null, SchemeName string not null, SchemeType string not null, StoreType string null, CombTypeID integer null);";
	
	
	public long saveSOAPdataSchemeList(String schCode, String schName,
			String schType, String SchListStoreType, int inCombTypeID,int flgDiscountType) {
		ContentValues initialValues = new ContentValues();

		initialValues.put("SchemeID", schCode.trim());
		initialValues.put("SchemeName", schName.trim());
		initialValues.put("SchemeType", schType.trim());
		initialValues.put("StoreType", SchListStoreType.trim());
		initialValues.put("CombTypeID", inCombTypeID);
		initialValues.put("flgDiscountType", flgDiscountType);

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN51, null, initialValues);
	}
	
	//(StoreID text  null,ProductID text  null, ProductMRP real  null, ProductRLP real  null, ProductTaxAmount real  null, DistributorPrice real null);";
	
	
	public long saveSOAPdataStoreProductMap(String StoreID,String ProductID,
			Double ProductMRP, Double ProductRLP, Double ProductTaxAmount, Double DistributorPrice,int CategoryID)
	{
		ContentValues initialValues = new ContentValues();
		
		
		/*StoreID text  null,ProductID text  null, ProductMRP real  null, ProductRLP real  null,
		ProductTaxAmount real  null, KGLiter text null);";
*/			
		
		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("ProductID", ProductID.trim());
		//initialValues.put(KEY_ProductShortName, ProductShortName.trim());
		initialValues.put("ProductMRP", ProductMRP);
		initialValues.put("ProductRLP", ProductRLP);
		initialValues.put("ProductTaxAmount", ProductTaxAmount);
		initialValues.put("DistributorPrice", DistributorPrice);
		initialValues.put("DistributorPrice", DistributorPrice);
		initialValues.put("CategoryID", CategoryID);
		

		////// System.out.println("inserting records in ProductList..");

		return db.insert(DATABASE_TABLE_MAINStoreProductMap, null, initialValues);
		
	}
	
// tblPDATargetQtyForSecondPage (StoreID text null, ProductID text null, SKUShortName text not null, TargetQty text null);";
	
	
	public long SavePDATargetQtyForSecondPage(
			String PDATargetQtyForSecondPageStoreID,
			String PDATargetQtyForSecondPageProductID,
			String PDATargetQtyForSecondPageSKUShortName,
			String PDATargetQtyForSecondPageTargetQty) {
		ContentValues initialValues = new ContentValues();
		initialValues.put("StoreID",
				PDATargetQtyForSecondPageStoreID.trim());
		initialValues.put("ProductID",
				PDATargetQtyForSecondPageProductID.trim());
		initialValues.put("SKUShortName",
				PDATargetQtyForSecondPageSKUShortName.trim());
		initialValues.put("TargetQty",
				PDATargetQtyForSecondPageTargetQty.trim());

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN18, null, initialValues);
	}
	
// tblPDALastInvoiceDet (StoreID text null, InvoiceID text null, LastTransDate text not null,
	//BalanceAmount text null,CreditPreviousDue real null);";
	
	//tblPDALastInvoiceDet (StoreID text null, InvoiceID text null, LastTransDate text not null, 
	//BalanceAmount text null,CreditPreviousDue real null);";
	
	public long SavePDALastInvoiceDet(String SID, String invID, String LTDate,
			String BalAmt, Double CreditPreviousDue) {
		ContentValues initialValues = new ContentValues();
		initialValues.put("StoreID", SID.trim());
		initialValues.put("InvoiceID", invID.trim());
		initialValues.put("LastTransDate", LTDate.trim());
		initialValues.put("BalanceAmount", BalAmt.trim());
		initialValues.put("CreditPreviousDue", CreditPreviousDue);

		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN17, null, initialValues);
	}
	// start Table 10
	public long saveVisibilityDetails(String storeID,String VisibilityID, String VisibilityStock,int Sstat) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("storeID", storeID.trim());
		initialValues.put("VisibilityID", VisibilityID.trim());
		initialValues.put("VisibilityStock", VisibilityStock.trim());
		initialValues.put("Sstat", Sstat);
		
		////// System.out.println("inserting records in table 10..");

		return db.insert(DATABASE_TABLE_MAIN10, null, initialValues);
	}

	public void deleteVisibilityDetails(String StoreID) {
		// int entryCount;
		db.execSQL("DELETE FROM tblVisibilityDetails WHERE StoreID ='" + StoreID + "'");
		
	}
	
	public int FetchVisibilityDetailsAvailable(String StoreID)
	{
        int columnIndex = 0;
        int columnIndex1 = 1;
        int check=0;
       
        Cursor cursor = db.rawQuery("SELECT VisibilityID,VisibilityStock FROM tblVisibilityDetails WHERE StoreID ='"+ StoreID  + "'", null);
		try 
		{

			String OrderDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				check=1;
				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					OrderDetails[i] = (String) cursor.getString(columnIndex) + "_"+ (String) cursor.getString(columnIndex1);
					cursor.moveToNext();
					
				}

			}
			return check;
		}
		finally
		{
			cursor.close();
		}

	}
	
	public String[] FetchVisibilityDetails(String StoreID)
	{
        int columnIndex = 0;
        int columnIndex1 = 1;
       
        Cursor cursor = db.rawQuery("SELECT VisibilityID,VisibilityStock FROM tblVisibilityDetails WHERE StoreID ='"+ StoreID  + "'", null);
		try 
		{

			String OrderDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					OrderDetails[i] = (String) cursor.getString(columnIndex) + "_"+ (String) cursor.getString(columnIndex1);
					cursor.moveToNext();
					
				}

			}
			return OrderDetails;
		}
		finally
		{
			cursor.close();
		}

	}
	
	
	// end Table 10
	
	// start Table 9
		public long saveVisibility(String VisibilityID, String VisibilityDescr) 
			{
				
				ContentValues initialValues = new ContentValues();
				initialValues.put("VisibilityID", VisibilityID.trim());
				initialValues.put("VisibilityDescr", VisibilityDescr.trim());
				
				////// System.out.println("inserting records in table 9..");

				return db.insert(DATABASE_TABLE_MAIN9, null, initialValues);
			}
	
	public String[] FetchVisibilityDescr() 
	{
		int ScodecolumnIndex = 0;
		
		Cursor cursor = db.rawQuery("SELECT VisibilityDescr FROM tblVisibilityMstr",null);
		try 
		{
			String VisibilityDescr[] = new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{
				////// System.out.println("CompetitionName Sunil Available");
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					VisibilityDescr[i] = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			////// System.out.println("CompetitionName Sunil: not");
		return VisibilityDescr;
		}
		finally
		{
			cursor.close();
		}
	}
	
	
	
	public String FetchRouteType(String ID) 
	{
		int ScodecolumnIndex = 0;
		String RouteType ="0";
		/* private static final String DATABASE_CREATE_TABLE_2 = "create table " +
		 		"tblRouteMstr(ID string null,RouteType text null, Descr string null, Active integer null," +
		 		"flgTodayRoute integer null,RouteDate string null);";*/
		Cursor cursor = null;	
		try 
		{
		 cursor = db.rawQuery("SELECT RouteType FROM tblRouteMstr  WHERE ID='"+ ID +"' Limit 1",null);
		
			
			
			if (cursor.moveToFirst()) 
			{
				for (int i = 0; i < cursor.getCount(); i++)
				{
					RouteType = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			
		return RouteType;
		}
		finally
		{
			cursor.close();
			
			
		}
	}
	
	public String[] FetchVisibilityID() 
	{
		int ScodecolumnIndex = 0;
	
		Cursor cursor = db.rawQuery("SELECT VisibilityID FROM tblVisibilityMstr",null);
		try 
		{
			String VisibilityID[] = new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{
				////// System.out.println("CompetitionID Sunil Available");
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					VisibilityID[i] = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			////// System.out.println("CompetitionID Sunil: not");
		return VisibilityID;
		}
		finally
		{
			cursor.close();
		}
	}
	
	public String FetchStoreName(String storeID)
	{

        int ScodecolumnIndex = 0;
       
		Cursor cursor = db.rawQuery("SELECT StoreName FROM tblStoreList WHERE StoreID ='"+ storeID + "'", null);
		try 
		{

			String StoreName="NA";

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
					
				}

			}
			return StoreName;
		}
		finally
		{
			cursor.close();
		}

	
		
	}
	//public String[] FetchRate(String CatID)
	/*public String[] FetchRate()
	{

		// id = getAllEntries();

		int ScodecolumnIndex = 0;
		//////// System.out.println("Fetching StoreID :" + ssStoreID);
		//Cursor cursor = db.rawQuery("SELECT ProductRLP FROM tblProductList where CategoryID='"+CatID+"'", null);
		Cursor cursor = db.rawQuery("SELECT ProductRLP FROM tblProductList where CategoryID='"+CatID+"'", null);
		try {
			////// System.out.println("Fetching cursor.getCount() :" + cursor.getCount());
			String StoreName[] = new String[cursor.getCount()];
			;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					StoreName[i] = ""+(Double) cursor.getDouble(ScodecolumnIndex);
					//////// System.out.println("DB-ADAP: PROD RLP: "
					//		+ (String) cursor.getString(ScodecolumnIndex)
					//				.toString());
					////// System.out.println("Fetching Rate :" + StoreName[i]);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}
	}*/
	
	
	/*public Double[] FetchProductTax(String SID) 
	{
		int ScodecolumnIndex = 0;
		
		Cursor cursor = db.rawQuery("SELECT ProductTaxAmount FROM tblProductList where StoreID='"+SID+"'",null);
		try 
		{
			Double TaxRate[] = new Double[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					TaxRate[i] = (Double) cursor.getDouble(ScodecolumnIndex);
					//////// System.out.println("Tax Rate Sunil: "+ String.valueOf(cursor.getString(ScodecolumnIndex).toString()));
                    cursor.moveToNext();
				}
			}
			////// System.out.println("Tax Rate Sunil: not");
		return TaxRate;
		}
		finally
		{
			cursor.close();
		}
	}*/
	
	private int fnGetDisType(String schID, String schType) {
		// int entryCount;
		Cursor cursorE2 = db.rawQuery(
				"SELECT flgDiscountType FROM tblSchemeList WHERE SchemeID ='" + schID + "' and SchemeType='" + schType + "'", null);
		int flgDiscountType = 0;
		try {
			if (cursorE2.moveToFirst()) {

				flgDiscountType=Integer.parseInt(cursorE2.getString(0));
			}

		} finally {
			cursorE2.close();
		}
		return flgDiscountType;
	}
	
	
	public int countIfStoreTransacExists(String sID2del) {
		// int entryCount;
		Cursor cursorE2 = db.rawQuery(
				"SELECT COUNT(*) FROM tblTransac WHERE StoreID ='" + sID2del
						+ "'", null);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}
	
	/*public String FetchProductName(String ProductID)
	{

        int ScodecolumnIndex = 0;
       
		Cursor cursor = db.rawQuery("SELECT ProductShortName FROM tblProductList WHERE ProductID ='"+ ProductID + "'", null);
		try 
		{

			String StoreName="NA";

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName = (String) cursor.getString(ScodecolumnIndex).toString();
					
					
					////// System.out.println("fetch Product Name "+StoreName);
					cursor.moveToNext();
					
				}

			}
			////// System.out.println("fetch Product Name Not "+StoreName);
			return StoreName;
		}
		finally
		{
			cursor.close();
		}

	
		
	}*/
	
	public String[] FetchOrderTransactionDetails(String IMEIno,String StoreID)
	{
        int columnIndex = 0;
		int columnIndex1 = 1;
		int columnIndex2 = 2;
		

		Cursor cursor = db.rawQuery("SELECT ProdID,OrderQty, OrderVal FROM tblTransac WHERE StoreID ='"+ StoreID + "' and IMEIno ='"+ IMEIno + "'", null);
		try 
		{

			String OrderDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					////// System.out.println("CURSOR_FETCH: " + i);
					
					OrderDetails[i] = (String) cursor.getString(columnIndex) + "_"+ (String) cursor.getString(columnIndex1) +"_"+ (String) cursor.getString(columnIndex2);
					////// System.out.println("Product Id: "+ String.valueOf(cursor.getString(columnIndex).toString())+"Total OrdQty: "+ String.valueOf(cursor.getString(columnIndex1).toString())+ " Total OrdVal: "+ String.valueOf(cursor.getString(columnIndex2).toString()));
					
					cursor.moveToNext();
					// cursor.close();

				}

			}
			return OrderDetails;
		}
		finally
		{
			cursor.close();
		}

	}
	
	public String[] FetchOrderInvoiceDetails(String IMEIno,String StoreID)
	{
        int columnIndex = 0;
		int columnIndex1 = 1;
		int columnIndex2 = 2;
		int columnIndex3 = 3;
		int columnIndex4 = 4;
		//int columnIndex5 = 5;
		
		Cursor cursor = db.rawQuery("SELECT InvoiceVal,TaxAmt,GrossVal, AmtColl,AmtOut FROM tblInvoice WHERE StoreID ='"+ StoreID + "' and IMEIno ='"+ IMEIno + "'", null);
		try 
		{

		String InvoiceDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					////// System.out.println("CURSOR_FETCH: " + i);
					
					InvoiceDetails[i] = (String) cursor.getString(columnIndex) + "_"+ (String) cursor.getString(columnIndex1) +"_"+ (String) cursor.getString(columnIndex2) +"_"+ (String) cursor.getString(columnIndex3) +"_"+ (String) cursor.getString(columnIndex4);
					////// System.out.println("Invoice Value: "+ String.valueOf(cursor.getString(columnIndex).toString())+"TaxAmount: "+ String.valueOf(cursor.getString(columnIndex1).toString())+ " Gross Invoce Value: "+ String.valueOf(cursor.getString(columnIndex2).toString())+"Amount Collected: "+ String.valueOf(cursor.getString(columnIndex3).toString())+"Amount OutStanding:  "+ String.valueOf(cursor.getString(columnIndex4).toString()));
					
					cursor.moveToNext();
					// cursor.close();

				}

			}
			return InvoiceDetails;
		}
		finally
		{
			cursor.close();
		}

	}
	
	public void deleteOrderTransactionDetails(String storeID) {
		// int entryCount;
		db.execSQL("DELETE FROM tblTransac WHERE StoreID='"+ storeID +"'");
		
	}
	public void deleteOrderInvoiceDetails(String storeID) {
		// int entryCount;
		db.execSQL("DELETE FROM tblInvoice WHERE StoreID='"+ storeID +"'");
		
	}
	public long saveOrderTransactionDetails(String IMEIno, String TransDate,String StoreID,String ProdID,
			int OrderQty ,Double OrderVal,Double ProductMRP,Double TaxRate) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("IMEIno", IMEIno.trim());
		initialValues.put("TransDate", TransDate.trim());
		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("ProdID", ProdID.trim());
		initialValues.put("OrderQty", OrderQty);
		initialValues.put("OrderVal", OrderVal);
	    initialValues.put("Sstat", 0);
	    initialValues.put("ProductMRP", ProductMRP);
	    initialValues.put("TaxRate", TaxRate);
	    
		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN31, null, initialValues);
	}
	
	public long saveOrderInvoiceDetails(String IMEIno,String StoreID, String InvoiceDate,Double TaxAmt,
			Double InvoiceVal,int Sstat,Double AmtColl,Double AmtOut,Double GrossVal) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("IMEIno", IMEIno.trim());
		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("InvoiceDate", InvoiceDate.trim());
		initialValues.put("TaxAmt", TaxAmt);
		initialValues.put("InvoiceVal", InvoiceVal);
		initialValues.put("GrossVal", GrossVal);
		initialValues.put("Sstat", Sstat);
		initialValues.put("AmtColl", AmtColl);
		initialValues.put("AmtOut", AmtOut);

		////// System.out.println("inserting records in table 32..");

		return db.insert(DATABASE_TABLE_MAIN32, null, initialValues);
	}
	
	public long saveCategory(String CategoryID, String CategoryDescr,int CatOrdr) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("CategoryID", CategoryID.trim());
		initialValues.put("CategoryDescr", CategoryDescr.trim());
		initialValues.put("CatOrdr", CatOrdr);
		
		////// System.out.println("inserting records in table 3..");

		return db.insert(DATABASE_TABLE_MAIN15, null, initialValues);
	}
	
	/*public long saveCategoryProductINformation(String CompetitionID,String ProductID,String Stock,int Sstat,String storeID ) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("CategoryID", CompetitionID.trim());
		//initialValues.put("CategoryID", CategoryID.trim());
		initialValues.put("Sstat", Sstat);
		initialValues.put("ProductID", ProductID.trim());
		initialValues.put("Stock", Stock.trim());
		initialValues.put("storeID", storeID.trim());
		
		
		
		////// System.out.println("inserting records in table 38..");

		return db.insert(DATABASE_TABLE_MAIN5, null, initialValues);
	}*/
	
	/*public String[] FetchCategoryProductID(String CategoryID)
	{
        int columnIndex = 0;
        //int columnIndex1 = 1;
		
        Cursor cursor = db.rawQuery("SELECT ProductID FROM tblProductList WHERE CategoryID ='"+ CategoryID  + "'", null);
		try 
		{

			String OrderDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					OrderDetails[i] = (String) cursor.getString(columnIndex).toString();
					cursor.moveToNext();
					// cursor.close();

				}

			}
			return OrderDetails;
		}
		finally
		{
			cursor.close();
		}

	}
	*/
	/*public String[] FetchCatergoryProductDescription(String CompetitionID)
	{
        int columnIndex = 0;
        //int columnIndex1 = 1;
		
        Cursor cursor = db.rawQuery("SELECT ProductShortName FROM tblProductList WHERE CategoryID ='"+ CompetitionID  + "'", null);
		try 
		{

			String OrderDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					OrderDetails[i] = (String) cursor.getString(columnIndex).toString();
					cursor.moveToNext();
					// cursor.close();

				}

			}
			return OrderDetails;
		}
		finally
		{
			cursor.close();
		}

	}*/
	
	/*public String[] FetchCategoeyProductINformation(String CategoryID, String storeID)
	{
        int columnIndex = 0;
        int columnIndex1 = 1;
       
        Cursor cursor = db.rawQuery("SELECT ProductID,Stock FROM tblCategoryQuestionInformation WHERE CategoryID ='"+ CategoryID  + "' and StoreID='"+ storeID +"'", null);
		try 
		{

			String OrderDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					OrderDetails[i] = (String) cursor.getString(columnIndex).toString()+ "_"+ (String) cursor.getString(columnIndex1).toString();
					cursor.moveToNext();
					
				}

			}
			return OrderDetails;
		}
		finally
		{
			cursor.close();
		}

	}*/
	
	/*public int FetchCheckCategoryForStockValues(String selected_Competitor_id,String StoreID)
	{
        int columnIndex = 0;
       // int columnIndex1 = 1;
        int IdAvailable=0;
       
        Cursor cursor = db.rawQuery("SELECT CategoryID FROM tblCategoryQuestionInformation where CategoryID='"+selected_Competitor_id+"'",null);
		try 
		{

			String OrderDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					OrderDetails[i] = (String) cursor.getString(columnIndex).toString();
					IdAvailable=1;
					cursor.moveToNext();
					
				}

			}
			return IdAvailable;
		}
		finally
		{
			cursor.close();
		}

	}
	*/
	public String[] FetchCategoryDesc() 
	{
		int ScodecolumnIndex = 0;
		
		Cursor cursor = db.rawQuery("SELECT CategoryDescr FROM tblCatagoryMstr",null);
		try 
		{
			String TaxRate[] = new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{
				////// System.out.println("Category Sunil Available");
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					TaxRate[i] = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			////// System.out.println("Category Sunil: not");
		return TaxRate;
		}
		finally
		{
			cursor.close();
		}
	}
	
	//tblProductList (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null,
	//CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null,
	//KGLiter string nulll);";
	
	/*public String[] FetchCategoryIDfromProduct() 
	{
		int ScodecolumnIndex = 0;
		
		Cursor cursor = db.rawQuery("SELECT CategoryID FROM tblProductList",null);
		try 
		{
			String TaxRate[] = new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{
				////// System.out.println("CategoryID Sunil Available");
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					TaxRate[i] = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			////// System.out.println("CategoryID Sunil: not");
		return TaxRate;
		}
		finally
		{
			cursor.close();
		}
	}*/
	
	
	

	
	public String[] FetchCategoryID() 
	{
		int ScodecolumnIndex = 0;
		
		Cursor cursor = db.rawQuery("SELECT CategoryID FROM tblCatagoryMstr",null);
		try 
		{
			String TaxRate[] = new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{
				////// System.out.println("CategoryID Sunil Available");
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					TaxRate[i] = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			////// System.out.println("CategoryID Sunil: not");
		return TaxRate;
		}
		finally
		{
			cursor.close();
		}
	}
	
	
	//public String[] FetchPid(String CATID) 
	/*public String[] FetchPid() 
	{
		int ScodecolumnIndex = 0;
		////// System.out.println("a");
		
		//Cursor cursor = db.rawQuery("SELECT ProductID FROM tblProductList where CategoryID='"+CATID+"'",null);
		Cursor cursor = db.rawQuery("SELECT ProductID FROM tblProductList",null);
		////// System.out.println("b");
		try 
		{
			String StoreName[] = new String[cursor.getCount()];
			
			////// System.out.println("length of cursor count in DBAdapter1"+ cursor.getCount());
			////// System.out.println("c");
			if (cursor.moveToFirst()) 
			{
				////// System.out.println("d");
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					////// System.out.println("e");
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex).toString();

					////// System.out.println("Sunil ProductID FROM tblProductList: "+ StoreName[i]);
					cursor.moveToNext();
				}
			}
		 ////// System.out.println("f");
		 return StoreName;
		}
		finally
		{
			cursor.close();
		}
	}
	*/
	
	//public String[] FetchPName(String CATID) 
	/*public String[] FetchPName() 
	{

		int ScodecolumnIndex = 0;

		//Cursor cursor = db.rawQuery("SELECT ProductShortName FROM tblProductList where CategoryID='"+CATID+"'", null);
		Cursor cursor = db.rawQuery("SELECT ProductShortName FROM tblProductList", null);
		try 
		{
			String StoreName[] = new String[cursor.getCount()];
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex)
							.toString();
					////// System.out.println("product short name :"+StoreName[i]);
					cursor.moveToNext();
				}
			}
		  return StoreName;
		} 
		finally 
		{
			cursor.close();
		}
	}
	*/
	
	
	
	 public boolean GetPrevDateChk()
     {

	 Cursor cursorDateE = db.rawQuery("SELECT ForDate FROM tblStoreList",null);

	  boolean ifApplicableToPassIntent=GetIfApplicableToForward();
	  
	  try {
	   if (cursorDateE.getCount() > 0) {
	   
	    if(ifApplicableToPassIntent)
	    {
	     return true;
	    }
	    else
	    {
	     return false;
	    }
	    
	   } else {
	    return false;
	   }

	  } finally {
	   cursorDateE.close();
	  }

	 }
	 
	 private boolean GetIfApplicableToForward() {

	  Cursor cursorDateE = db.rawQuery("SELECT IsSchemeApplicable FROM tblPDAIsSchemeApplicable",null);

	  
	  try {
	   if (cursorDateE.getCount() > 0) {
	    // String date2Send = cursorDateE.getString(0);

	    ////// System.out.println("GetPrevDateChk - Records Count: "+ cursorDateE.getCount());
	    // ////// System.out.println("GetPrevDateChk - forDate: " +date2Send);
	    ////// System.out.println("returning GetPrevDateChk - true");
	    return true;
	   } else {
	    return false;
	   }

	  } finally {
	   cursorDateE.close();
	  }

	 }
	
	
	
	
	public boolean PrevLocChk(String passedStoreID) 
	{
		boolean abc = false;

		Cursor cursorLocE = db.rawQuery("SELECT ActualLatitude FROM tblStoreList WHERE StoreID ='"+ passedStoreID + "'", null);

		////// System.out.println("PrevLocChk - Checking for StoreID: "+ passedStoreID);
		try 
		{
			if (cursorLocE.moveToFirst()) 
			{
				////// System.out.println("cursorLocE count: " + cursorLocE.getCount());
				
				if ((cursorLocE.getString(0) == null) || (cursorLocE.getString(0).equals("0.0")) || (cursorLocE.getString(0).equals("0"))) 
				{
					////// System.out.println(" A 1 " + abc);
					////// System.out.println("PrevLocChk - Records Count: "+ cursorLocE.getCount());
					////// System.out.println("returning PrevLocChk - False");
					abc = false;
					////// System.out.println(" A 2 " + abc);
				} 
				else 
				{
					////// System.out.println("returning PrevLocChk - True");
					abc = true;
					////// System.out.println(" A 3 " + abc);
				}
			}

		} 
		finally
		{
			cursorLocE.close();
		}
		return abc;
	}
	

	public void UpdateStoreStartVisit(String StoreID, String strVisitStartTS) {

		// System.out.println("DateTimeNitish fnDBkenya UpdateStoreStartVisit = "+ strVisitStartTS);
		final ContentValues values = new ContentValues();
		values.put("VisitStartTS", strVisitStartTS);

		int affected = db.update("tblStoreList", values, "StoreID=?",
				new String[] { StoreID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreStartVisit Updated..");
	}
	
	
public void deleteStoreTblsRecordsInCaseCancelOrderInOrderBooking(String StoreID,int flag,String pdaOrderID)
{
	db.execSQL("DELETE FROM tblStoreProdcutPurchaseDetails WHERE StoreID='"+ StoreID +"' and OrderIDPDA='"+pdaOrderID+"'");
	db.execSQL("DELETE FROM tblInvoice WHERE StoreID='"+ StoreID +"' and OrderIDPDA='"+pdaOrderID+"'");
	db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID='"+ StoreID +"' and OrderIDPDA='"+pdaOrderID+"'");
	db.execSQL("DELETE FROM tblStoreReturnDetail WHERE StoreID='"+ StoreID +"' and OrderIDPDA='"+pdaOrderID+"'");
	if(flag==1)
	{
		db.execSQL("DELETE FROM tblStoreProductPhotoDetail WHERE StoreID='"+ StoreID +"' and OrderIDPDA='"+pdaOrderID+"'");
	}
	
	
	
	
}
	
	public void UpdateStoreStoreReturnDetail(String StoreID, String Sstat,String pdaOrderID) {

		final ContentValues values = new ContentValues();
		values.put("Sstat", Sstat);

		int affected = db.update("tblStoreReturnDetail", values,"StoreID=?  and OrderIDPDA='"+pdaOrderID+"' and Sstat is not null",new String[] { StoreID });
		
	}
	
	
	public void UpdateStoreProductAppliedSchemesBenifitsRecords(String StoreID, String Sstat,String pdaOrderID) {

		final ContentValues values = new ContentValues();
		values.put("Sstat", Sstat);

		int affected = db.update("tblStoreProductAppliedSchemesBenifitsRecords", values,"StoreID=? AND OrderIDPDA=? and Sstat is not null",
				new String[] { StoreID,pdaOrderID });
		
	}
	
	public void UpdateStoreEndVisit(String StoreID, String strVisitEndTS) {

		final ContentValues values = new ContentValues();
		// System.out.println("DATETIMENitish EndVisit UpdateStoreEndVisit = "+strVisitEndTS);
		values.put("VisitEndTS", strVisitEndTS);

		int affected = db.update("tblStoreList", values,"StoreID=? and VisitStartTS is not null",
				new String[] { StoreID });
		
	}
	
/*	public void UpdateStoreCloseNextDay(String StoreID, int outStat) {

		final ContentValues values = new ContentValues();
		values.put("Sstat", outStat);

		int affected = db.update("tblStoreList", values,"StoreID=? and (StoreClose=1 or  StoreNextDay=1) and Sstat=0",
				new String[] { StoreID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreEndVisit Updated..");
	}*/
	
	public String[] FetchStoreStatus(String rID)
	{

		int ScodecolumnIndex = 0;

		//Cursor cursor = db.rawQuery("SELECT Sstat,ISNewStore FROM tblStoreList ORDER BY DistanceNear", null);
        Cursor cursor = db.rawQuery("SELECT Sstat, ISNewStore FROM tblStoreList where StoreRouteID='"+ rID +"'   ORDER BY DistanceNear", null);

        try
		{
			String StoreName[] = new String[cursor.getCount()];
			
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName[i] = cursor.getString(ScodecolumnIndex) +"~"+ cursor.getString(1);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} 
		finally
		{
			cursor.close();
		}
	}
	
	//Cursor cursorLocE = db.rawQuery("SELECT ActualLatitude FROM tblStoreList WHERE StoreID ='"+ passedStoreID + "'", null);

	
	public String[] FetchStoreList(String rID) 
	{
        int ScodecolumnIndex = 0;
		int SnamecolumnIndex = 1;
        Cursor cursor=null;
        String StoreName[] = null;
		//create table tblStoreList(StoreID text not null, StoreType string not null, StoreName string not null,
        // StoreLatitude real not null, StoreLongitude real not null, LastVisitDate string not null,
        // LastTransactionDate string not null, Sstat integer not null, ForDate string not null,
        // ActualLatitude text null, ActualLongitude text null, VisitStartTS text null,
        // VisitEndTS text null,AutoIdStore int null, LocProvider text null, Accuracy text null,
        // BateryLeftStatus text null,StoreClose integer null,StoreNextDay integer null,chainID integer null,
        // ISNewStore int null,StoreRouteID int null,RouteNodeType int null,StoreCatNodeId int null,I
        // sNewStoreDataCompleteSaved int null,flgFromWhereSubmitStatus int null,StoreAddress text null,
        // PaymentStage text null,flgHasQuote int null,flgAllowQuotation int null,flgSubmitFromQuotation int null,
        // flgGSTCapture text null,flgGSTCompliance text null,GSTNumber text null,
        // flgGSTRecordFromServer int null,DistanceNear int null,flgLocationServicesOnOff int null,
        // flgGPSOnOff int null,flgNetworkOnOff int null,flgFusedOnOff int null,
        // flgInternetOnOffWhileLocationTracking int null,flgRestart int null,flgStoreOrder int null,
        // StoreCity text null,StorePinCode text not null,StoreState text null,flgRetailerCreditBalnce integer null,
        // DBR text null,CoverageAreaNodeID integer null,CoverageAreaNodeType integer null,FlgDSRSO integer null,
        // flgOrderType int null);";

       // Cursor cursor = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList   ORDER BY DistanceNear", null); //where StoreRouteID='"+ rID +"'
		try 
		{
            cursor = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList where StoreRouteID='"+ rID +"'   ORDER BY DistanceNear", null);
            StoreName = new String[cursor.getCount()];
            if (cursor.getCount() > 0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        StoreName[i] = (String) cursor.getString(ScodecolumnIndex) + "_"+ (String) cursor.getString(SnamecolumnIndex);
                        cursor.moveToNext();
                    }

                }
            }
		}
		finally
		{
		    if(cursor!= null)
			    cursor.close();
            return StoreName;
		}

	}

    public String[] FetchStoreListAllRoute()
    {
        int ScodecolumnIndex = 0;
        int SnamecolumnIndex = 1;
        Cursor cursor=null;
        String StoreName[] = null;


        try
        {
            cursor = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList   ORDER BY DistanceNear", null);
            StoreName = new String[cursor.getCount()];
            if (cursor.getCount() > 0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        StoreName[i] = (String) cursor.getString(ScodecolumnIndex) + "_"+ (String) cursor.getString(SnamecolumnIndex);
                        cursor.moveToNext();
                    }

                }
            }
        }
        finally
        {
            if(cursor!= null)
                cursor.close();
            return StoreName;
        }

    }
	public String[] ProcessStoreReq() 
	{

		int LoncolumnIndex = 0;
		int LoncolumnIndex2 = 1;

		Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList WHERE (Sstat = 1 OR StoreClose = 1 OR StoreNextDay = 1) and Sstat<>4 and Sstat<>5 and Sstat<>6",null);
		try 
		  {
			String strAreaIdsDetais[] = new String[cursor2.getCount()];

			if (cursor2.moveToFirst()) 
			  {
				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					strAreaIdsDetais[i] = (String) cursor2.getString(LoncolumnIndex)+ "%"+ (String) cursor2.getString(LoncolumnIndex2);
					
					cursor2.moveToNext();
                 }

			  }
			return strAreaIdsDetais;
		   } 
		finally 
		{
			cursor2.close();
		}

	}
	
	
	
	public boolean GetLeftStoresChk() 
	{

		Cursor cursorDateE = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList WHERE (Sstat = 3  OR StoreClose = 1 OR StoreNextDay = 1) AND Sstat<>4 AND Sstat<>5 AND Sstat<>6",null);

		try 
		{
			if (cursorDateE.getCount() > 0)
			{
				////// System.out.println("GetLeftStoresChk - Records Count: "+ cursorDateE.getCount());
				////// System.out.println("returning GetLeftStoresChk - true");
				return true;
			} 
			else 
			{
				return false;
			}

		} 
		finally 
		{
			cursorDateE.close();
		}

	}
	
	
	public long insertTblSelectedStoreIDinChangeRouteCase(String StorID)
	{
		
		ContentValues initialValues = new ContentValues();
		
		initialValues.put("StoreID", StorID); 
		
		return db.insert(DATABASE_TABLE_MAIN92, null, initialValues);	
	}
	
	public String[] getStoreIDTblSelectedStoreIDinChangeRouteCase() {

		int SnamecolumnIndex1 = 0;

		//Cursor cursor = db.rawQuery("SELECT OutId FROM tblOutletPicMstr WHERE OutId IN (SELECT StoreId FROM tblStoreList WHERE Sstat IN (1, 3))", null);
		
		Cursor cursor = db.rawQuery("SELECT StoreID FROM tblSelectedStoreIDinChangeRouteCase", null);
		try {

			String StoreName[] = new String[cursor.getCount()];

			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {

					StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
					////// System.out.println("STORE ID 4 Pic: "+cursor.getString(SnamecolumnIndex1).toString());

					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}

	}
	public void UpdateStoreFlagAtDayEndOrChangeRoute(String sID, int flag2set)
	{

		try
		 {

			final ContentValues values = new ContentValues();
			values.put("Sstat", flag2set);
			
			int affected24 = db.update("tblStoreOrderBillAddressDetails", values, "StoreID=?",new String[] { sID });
			int affected25 = db.update("tblStoreSalesOrderPaymentDetails", values, "StoreId=?",new String[] { sID });
			int affected26 = db.update("tblRateDistribution", values,"StoreId=?", new String[] { sID });
			// int affected27 = db.update("tableImage", values,"StoreID=?", new String[] { sID });
			
			//tblNewStoreSalesQuotePaymentDetails (StoreId text null,PymtStageId text null,Sstat text null);";
			int affected23 = db.update("tblNewStoreSalesQuotePaymentDetails", values,"StoreId=?", new String[] { sID });
			
			//tblOutletQuestAnsMstr
            ////// System.out.println("Updating Status for Store ID: " + sID);
			int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { sID });
			//int affected2 = db.update("tblTransac", values, "StoreID=?",new String[] { sID });
			
			int affected4 = db.update("tblNewStoreListEntries", values,"StoreID=?", new String[] { sID });
			
			//int affected4 = db.update("tblDistributionStoreProductWiseDetails", values, "StoreID=?",new String[] { sID });
			//int affected5 = db.update("tblDistributionStoreProductMstr", values, "StoreID=?",new String[] { sID });
			
			int affected9 = db.update("tblNewStoreEntries", values,"StoreID=?", new String[] { sID });
			int affected10 = db.update("tblTemp", values,"StoreID=?", new String[] { sID });
			
			int affected3 = db.update("tblInvoice", values, "StoreID=? ",new String[] { sID });
			
			//int affected4 = db.update("tblDistributionStoreProductWiseDetails", values, "StoreID=?",new String[] { sID });
			//int affected5 = db.update("tblDistributionStoreProductMstr", values, "StoreID=?",new String[] { sID });
			int affected5 = db.update("tblPDAProductReturnMstr", values,
					"StoreID=? ", new String[] { sID });
			
			int affected7 = db.update("tblStoreProdcutPurchaseDetails", values,"StoreID=?  ", new String[] { sID });
			int affected8 = db.update("tblStoreProductAppliedSchemesBenifitsRecords", values,"StoreID=? ", new String[] { sID });
			
			
			
			int affected11 = db.update("tblStoreReturnDetail", values,"StoreID=? ", new String[] { sID });
			
			//int affected12 = db.update("tblStoreReturnDetail", values,"StoreID=?", new String[] { sID });
			int affected13 = db.update("tblProductMappedWithSchemeSlabApplied", values,"StoreId=? ", new String[] { sID });
			//StoreId text null,ProductID text null,schSlabId text null,schmIdMapped text null,Sstat int null);";
			int affected14 = db.update("tblStoreProductPhotoDetail", values,"StoreID=? ", new String[] { sID });
			
			int affected21 = db.update("tblOutletQuestAnsMstr", values,"OutletID=?", new String[] { sID });
			
			
			int affected17 = db.update("tblSalesQuotePersonMeetMstr", values,"StoreId=?", new String[] { sID });

			// int affected19 = db.update("tblSoRegDetails", values, "StoreID=?",new String[] { sID });

			 db.execSQL("UPDATE tblSoRegDetails SET Sstat="+flag2set);
			
				LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr= fngetDistinctSalesQuotePersonMeetMstrForSstatUpdate(sID);
			
			
			Iterator it11new = hmapDistinctSalesQuotePersonMeetMstr.entrySet().iterator();
   			
		    while (it11new.hasNext()) {
		        Map.Entry pair = (Map.Entry)it11new.next();
		        if(hmapDistinctSalesQuotePersonMeetMstr.containsKey(pair.getKey().toString())){
		        	//crntPID	=pair.getKey().toString();
		        	int affected18 = db.update("tblSalesQuoteProductsMstr", values,"SalesQuoteId=?", new String[] { pair.getKey().toString() });
		        }
	      
	    }
			
			
			int chkValue = fnChkStoreIdExistsInReturnMstrDayEndChangeRoute(sID);

			if (chkValue == 1)
			{
				int productreturnmstrid = fnGetAutoIdStoreOnReturnPAge(sID);

				int chkValueReturnDetails = fnChkAutoIdMstrForReturnDetailsChangeRouteDayEnd(productreturnmstrid);
				if (chkValueReturnDetails == 1) 
				{
					int affected6 = db.update("tblPDAProductReturnDetails",
							values, "ReturnIdMstr=? ", new String[] { ""
									+ productreturnmstrid });
				}
			}
			
			Log.w(TAG, "affected records: " + affected);

			Log.w(TAG, "Record(s) Updated..");

		 }
		catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}

	}
	
	
	private int fnChkAutoIdMstrForReturnDetailsChangeRouteDayEnd(int ReturnIdMstr) {

		int LoncolumnIndex = 0;
		int strReturnIdDetails = 0;

		Cursor cursor2 = db
				.rawQuery(
						"SELECT AutoReturnDetailsId FROM  tblPDAProductReturnDetails where ReturnIdMstr='"+ ReturnIdMstr +"'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strReturnIdDetails = 1;
					cursor2.moveToNext();
					// cursor.close();
				}

			}

			return strReturnIdDetails;
		} finally {
			cursor2.close();
		}

	}
	private int fnChkStoreIdExistsInReturnMstrDayEndChangeRoute(String ReturnStoreId) {

		int LoncolumnIndex = 0;
		int strReturnIdMstr = 0;

		Cursor cursor2 = db.rawQuery(
				"SELECT AutoReturnIdMstr FROM  tblPDAProductReturnMstr where StoreID='"
						+ ReturnStoreId + "'", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strReturnIdMstr = 1;
					cursor2.moveToNext();
					// cursor.close();
				}

			}

			return strReturnIdMstr;
		} finally {
			cursor2.close();
		}

	}
	
	
	public void UpdateStoreFlag(String sID, int flag2set)
	{
		try
		 {

			final ContentValues values = new ContentValues();
			values.put("Sstat", flag2set);

			 if(flag2set==3)
			 {
				 int affected4 = db.update("tblsameLocationForStoreRestartDone", values,"CrntStoreID=?", new String[] { sID });
			 }
             int affected411 = db.update("tblMerchandisingInstructionDetails", values,"StoreID=?", new String[] { sID });
			 int affected3 = db.update("tblLatLongDetails", values,"StoreID=?", new String[] { sID });
			// int affected41 = db.update("tableImage", values,"StoreID=?", new String[] { sID });
             int affected42 = db.update("tblPreAddedStores", values,"StoreID=?", new String[] { sID });


			int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { sID });
			 int affected1 = db.update("tblLatLongDetails", values, "StoreID=?",new String[] { sID });
			
			int affected26 = db.update("tblRateDistribution", values,"StoreId=?", new String[] { sID });
			
			
			int affected4 = db.update("tblNewStoreListEntries", values,"StoreID=?", new String[] { sID });
			int affected9 = db.update("tblNewStoreEntries", values,"StoreID=?", new String[] { sID });
			int affected10 = db.update("tblTemp", values,"StoreID=?", new String[] { sID });
			
			int affected15 = db.update("tblStoreMaterialDetail", values,"StoreID=?", new String[] { sID });
			int affected16 = db.update("tblStoreMaterialPhotoDetail", values,"StoreID=?", new String[] { sID });
			int affected17 = db.update("tblSalesQuotePersonMeetMstr", values,"StoreId=?", new String[] { sID });
			int affected21 = db.update("tblOutletQuestAnsMstr", values,"OutletID=?", new String[] { sID });
			
			int affected23 = db.update("tblNewStoreSalesQuotePaymentDetails", values,"StoreId=?", new String[] { sID });
			
			int affected24 = db.update("tblStoreOrderBillAddressDetails", values, "StoreID=?",new String[] { sID });
			int affected25 = db.update("tblStoreSalesOrderPaymentDetails", values, "StoreId=?",new String[] { sID });
             int affected27 = db.update("tblAllCollectionData", values, "StoreID=?",new String[] { sID });
			//int affected18 = db.update("tblStoreMaterialPhotoDetail", values,"StoreID=?", new String[] { sID });rerer
			LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr= fngetDistinctSalesQuotePersonMeetMstrForSstatUpdate(sID);
			
			
			Iterator it11new = hmapDistinctSalesQuotePersonMeetMstr.entrySet().iterator();
   			
		    while (it11new.hasNext()) {
		        Map.Entry pair = (Map.Entry)it11new.next();
		        if(hmapDistinctSalesQuotePersonMeetMstr.containsKey(pair.getKey().toString())){
		        	//crntPID	=pair.getKey().toString();
		        	int affected18 = db.update("tblSalesQuoteProductsMstr", values,"SalesQuoteId=?", new String[] { pair.getKey().toString() });
		        }
	      
	    }
			


		 }
		catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}

	}
	
	
	public void UpdateStoreOtherMainTablesFlag(String sID, int flag2set,String pdaOrderID)
	{

		try
		 {

			final ContentValues values = new ContentValues();
			values.put("Sstat", flag2set);
			
			//tblOutletQuestAnsMstr
            ////// System.out.println("Updating Status for Store ID: " + sID);
			
			//int affected2 = db.update("tblTransac", values, "StoreID=?",new String[] { sID });
			int affected3 = db.update("tblInvoice", values, "StoreID=? AND OrderIDPDA=? ",new String[] { sID,pdaOrderID });
			
			//int affected4 = db.update("tblDistributionStoreProductWiseDetails", values, "StoreID=?",new String[] { sID });
			//int affected5 = db.update("tblDistributionStoreProductMstr", values, "StoreID=?",new String[] { sID });
			int affected5 = db.update("tblPDAProductReturnMstr", values,
					"StoreID=? AND OrderIDPDA=? ", new String[] { sID,pdaOrderID });
			
			int affected7 = db.update("tblStoreProdcutPurchaseDetails", values,"StoreID=? AND OrderIDPDA=? ", new String[] { sID,pdaOrderID });
			int affected8 = db.update("tblStoreProductAppliedSchemesBenifitsRecords", values,"StoreID=? AND OrderIDPDA=? ", new String[] { sID,pdaOrderID });
			
			
			
			int affected11 = db.update("tblStoreReturnDetail", values,"StoreID=? AND OrderIDPDA=? ", new String[] { sID,pdaOrderID });
			
			//int affected12 = db.update("tblStoreReturnDetail", values,"StoreID=?", new String[] { sID });
			int affected13 = db.update("tblProductMappedWithSchemeSlabApplied", values,"StoreId=? AND OrderIDPDA=? ", new String[] { sID,pdaOrderID });
			//StoreId text null,ProductID text null,schSlabId text null,schmIdMapped text null,Sstat int null);";
			int affected14 = db.update("tblStoreProductPhotoDetail", values,"StoreID=? AND OrderIDPDA=? ", new String[] { sID,pdaOrderID });
			
			
			
			int chkValue = fnChkStoreIdExistsInReturnMstr(sID,pdaOrderID);

			if (chkValue == 1)
			{
				int productreturnmstrid = fnGetAutoIdStoreOnReturnPAge(sID);

				int chkValueReturnDetails = fnChkAutoIdMstrForReturnDetails(productreturnmstrid,pdaOrderID);
				if (chkValueReturnDetails == 1) 
				{
					int affected6 = db.update("tblPDAProductReturnDetails",
							values, "ReturnIdMstr=? AND OrderIDPDA=? ", new String[] { ""
									+ productreturnmstrid,pdaOrderID });
				}
			}
			//
			
			//Log.w(TAG, "affected records: " + affected);

			Log.w(TAG, "Record(s) Updated..");

		 }
		catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}

	}
	
	
	
	public void UpdateStoreVisitBatt(String StoreID, String vBatt) {

		final ContentValues values = new ContentValues();
		values.put("BateryLeftStatus", vBatt);
		int affected = db.update("tblStoreList", values, "StoreID=?",
				new String[] { StoreID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreActualLatLongi added..");
	}



	public void UpdateStoreActualLatLongi(String StoreID,
			String ActualLatitude, String ActualLongitude, String Accuracy,
			String LocProvider, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking, int flgRestart, int flgStoreOrder)
	{
		open();
		final ContentValues values = new ContentValues();
		values.put("ActualLatitude", ActualLatitude);
		values.put("ActualLongitude", ActualLongitude);
		values.put("Accuracy", Accuracy);
		values.put("LocProvider", LocProvider);


		values.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
		values.put("flgGPSOnOff", flgGPSOnOff);
		values.put("flgNetworkOnOff", flgNetworkOnOff);
		values.put("flgFusedOnOff", flgFusedOnOff);
		values.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
		values.put("flgRestart", flgRestart);


		int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { StoreID });
		close();
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreActualLatLongi added..");
	}


	// ---insert sample data into the database---
	//

	// ---insert XML data into the database---
	public void createRouteTBL() {
		try {
			
			db.execSQL(TABLE_tblRouteMstr_Definition);
			//db.execSQL(DATABASE_CREATE_TABLE_2);
		} catch (Exception e) {
			Log.e(TAG, "Error: onUpgrade db");
		}

	}
	
	
	// tblRouteMstr(ID string null, Descr string null, Active int null);";
	
	
	public void fnSetAllRouteActiveStatus() {

		try {

			
			
			 // db.execSQL("UPDATE tblRouteMstr SET flgTodayRoute= 0" );
            db.execSQL("UPDATE tblRouteMstr SET flgTodayRoute= 0 where CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"'" );



		} catch (Exception ex) {
			Log.e(TAG, ex.toString());
		}

	}
	public void updateActiveRoute(String sID, int flag2set) {

		try {

			
			final ContentValues values = new ContentValues();
			values.put("flgTodayRoute", flag2set);

			int affected = db.update("tblRouteMstr", values, "ID=?",
					new String[] { sID });

			

		} catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}

	}
	
	public String GetRouteNameBasedOnRouteID(String ID) {

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr WHERE ID='"+ ID +"' Limit 1", null);
		try {
			//String strLocationIDDetais[] = new String[cursor2.getCount()];
			String activeRouteID = "NA";
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					activeRouteID = cursor2.getString(LoncolumnIndex);
					////// System.out.println("active Route Id : "+ cursor2.getString(LoncolumnIndex).toString().trim());
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return activeRouteID;
		} finally {
			cursor2.close();
		}

	}
	
	
	public String GetRouteDateBasedOnRouteID(String ID) {

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT RouteDate FROM tblRouteMstr WHERE ID='"+ ID +"'", null);
		try {
			//String strLocationIDDetais[] = new String[cursor2.getCount()];
			String activeRouteID = "NA";
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					activeRouteID = cursor2.getString(LoncolumnIndex);
					////// System.out.println("active Route Id : "+ cursor2.getString(LoncolumnIndex).toString().trim());
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return activeRouteID;
		} finally {
			cursor2.close();
		}

	}
	
	public String GetActiveRouteIDForToday(String fDate) {

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE RouteDate='"+ fDate +"' and Active = 1 Limit 1", null);
		try {
			//String strLocationIDDetais[] = new String[cursor2.getCount()];
			String activeRouteID = "NA";
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					activeRouteID = cursor2.getString(LoncolumnIndex);
					////// System.out.println("active Route Id : "+ cursor2.getString(LoncolumnIndex).toString().trim());
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return activeRouteID;
		} finally {
			cursor2.close();
		}

	}
	
	//StoreID ='"+ StoreID + "'"
	
	public String GetActiveRouteIDForTomorrow(String fDate) {

		int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE RouteDate='"+ fDate +"' Limit 1", null);
		try {
			//String strLocationIDDetais[] = new String[cursor2.getCount()];
			String activeRouteID = "NA";
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					activeRouteID = cursor2.getString(LoncolumnIndex);
					////// System.out.println("active Route Id : "+ cursor2.getString(LoncolumnIndex).toString().trim());
					cursor2.moveToNext();
					// cursor.close();
				}

			}
			return activeRouteID;
		} finally {
			cursor2.close();
		}

	}
	
	public String GetAllActiveRouteDescr()
	{
         int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr WHERE flgTodayRoute = 1", null);
		try 
		{
			String activeRouteID = "NA";
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					if(i ==0)
					{
						activeRouteID = cursor2.getString(LoncolumnIndex);
					}
					else
					{
						activeRouteID = activeRouteID+"^"+cursor2.getString(LoncolumnIndex);
					}
					activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();
					
				}

			}
			return activeRouteID;
		} finally {
			cursor2.close();
		}

	}
	
	
	public String GetAllActiveRouteID()
	{
         int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE flgTodayRoute=1", null);
		try 
		{
			String activeRouteID = "NA";
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					if(i ==0)
					{
						activeRouteID = cursor2.getString(LoncolumnIndex);
					}
					else
					{
						activeRouteID = activeRouteID+"^"+cursor2.getString(LoncolumnIndex);
					}
					activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();
					
				}

			}
			return activeRouteID;
		} finally {
			cursor2.close();
		}

	}

    private String GetNOActiveRouteIDSunil()
    {
        int LoncolumnIndex = 0;


        Cursor cursor2 = null;
        try
        {
            //cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);
            cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"' Limit 1", null);


            String activeRouteID = "0";
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++)
                {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            return activeRouteID;
        } finally {
            cursor2.close();

        }

    }
	
	public String GetActiveRouteID()
	{
         int LoncolumnIndex = 0;
		String activeRouteID = "0";
        Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr where CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"' and flgTodayRoute = 1 Limit 1", null);
		//Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);
		try 
		{

			if (cursor2.moveToFirst())
			{

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();
					
				}

			}
            if(activeRouteID.equals("0"))
            {
                activeRouteID=GetNOActiveRouteIDSunil();
            }

		} finally {
			cursor2.close();
			return activeRouteID;
		}

	}


	public String GetNotActiveRouteID()
	{
		int LoncolumnIndex = 0;
		String activeRouteID = "0";
		//Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE flgTodayRoute = 0 Limit 1", null);
        Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"' and flgTodayRoute = 0 Limit 1", null);

        try
		{

			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					activeRouteID = cursor2.getString(LoncolumnIndex);
					cursor2.moveToNext();

				}

			}

		} finally {
			cursor2.close();
			return activeRouteID;
		}

	}
	
	
	public String GetActiveRouteIDSunil()
	{
         int LoncolumnIndex = 0;
         
         open();
         Cursor cursor2 = null;
         try 
 		{
		 cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);
		
			String activeRouteID = "0";
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();
					
				}

			}
			return activeRouteID;
		} finally {
			cursor2.close();
			close();
		}

	}
	
	public String GetCurrentDayActiveRouteID()
	{
         int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE Active=1 Limit 1", null);
		try 
		{
			String activeRouteID = "NA";
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();
					
				}

			}
			return activeRouteID;
		} finally {
			cursor2.close();
		}

	}
	
	public int GetActiveRouteIDForRadioButton()
	{
         int LoncolumnIndex = 0;

		Cursor cursor2 = db.rawQuery("SELECT Active FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);
		try 
		{
			int activeRouteID = 0;
			if (cursor2.moveToFirst()) {

				
					activeRouteID = Integer.parseInt(cursor2.getString(LoncolumnIndex));
                   
				

			}
			return activeRouteID;
		} finally {
			cursor2.close();
		}

	}
	
	
	
	public long savetblPOSMaterialMstr(String POSMaterialID, String POSMaterialDescr) 
	{
	
		ContentValues initialValues = new ContentValues();
		initialValues.put("POSMaterialID", POSMaterialID.trim());
		initialValues.put("POSMaterialDescr", POSMaterialDescr.trim());
		
		
		return db.insert(DATABASE_TABLE_MAIN161, null, initialValues);
		
	}
	
	public long savetblStoreIDAndMaterialIDMap(String StoreID, String VisitID,String MaterialID,String CurrentStockQty) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("VisitID", VisitID.trim());
		initialValues.put("MaterialID", MaterialID.trim());
		initialValues.put("CurrentStockQty", CurrentStockQty.trim());
		
		
		
		return db.insert(DATABASE_TABLE_MAIN162, null, initialValues);
	}
	

	
	
	public long savetblSchemeStoreMapping(String StoreID, String SchemeID) 
	{
	
		ContentValues initialValues = new ContentValues();
		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("SchemeID", SchemeID.trim());
		
		// System.out.println("Ajay Data Save in table 201");
		
		
		return db.insert(DATABASE_TABLE_MAIN201, null, initialValues);
		
	}
	
	
	public long savetblSchemeMstr(String SchemeID, String SchemeName,String SchemeApplicationID,String SchemeAppliedRule) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("SchemeID", SchemeID.trim());
		initialValues.put("SchemeName", SchemeName.trim());
		initialValues.put("SchemeApplicationID", SchemeApplicationID.trim());
		initialValues.put("SchemeAppliedRule", SchemeAppliedRule.trim());
		
		
		
		// System.out.println("Ajay Data Save in table 202");
		
		
		return db.insert(DATABASE_TABLE_MAIN202, null, initialValues);
	}
	
	
	public long savetblSchemeSlabDetail(String SchemeID, String SchemeSlabID,String SchemeSlabDesc,String BenifitDescr) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("SchemeID", SchemeID.trim());
		initialValues.put("SchemeSlabID", SchemeSlabID.trim());
		initialValues.put("SchemeSlabDesc", SchemeSlabDesc.trim());
		initialValues.put("BenifitDescr", BenifitDescr.trim());
		
		// System.out.println("Ajay Data Save in table 203");
		return db.insert(DATABASE_TABLE_MAIN203, null, initialValues);
	}
	
	
	
	public long savetblSchemeSlabBucketDetails(String RowID, String SchemeID,String SchemeSlabID,
			String BucketID,String SubBucketID,String SlabSubBucketType,String SlabSubBucketValue,String SubBucketValType) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("RowID", RowID.trim());
		initialValues.put("SchemeID", SchemeID.trim());
		initialValues.put("SchemeSlabID", SchemeSlabID.trim());
		initialValues.put("BucketID", BucketID.trim());
		
		initialValues.put("SubBucketID", SubBucketID.trim());
		initialValues.put("SlabSubBucketType", SlabSubBucketType.trim());
		initialValues.put("SlabSubBucketValue", SlabSubBucketValue.trim());
		initialValues.put("SubBucketValType", SubBucketValType.trim());
		
		// System.out.println("Ajay Data Save in table 204");
		return db.insert(DATABASE_TABLE_MAIN204, null, initialValues);
	}
	
	
	//tblSchemeSlabBucketProductMapping (RowID text null,ProductID text null);";
	
	public long savetblSchemeSlabBucketProductMapping(String RowID, String ProductID) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("RowID", RowID.trim());
		initialValues.put("ProductID", ProductID.trim());
		
		// System.out.println("Ajay Data Save in table 205");
		return db.insert(DATABASE_TABLE_MAIN205, null, initialValues);
	}
	
	/* dbengine.savetblSchemeSlabBenefitsBucketDetails(RowID,SchemeID,SchemeSlabID,BucketID,
     		SubBucketID,BenSubBucketType,BenDiscApplied,CouponCode,BenSubBucketValue);
     */
     
	
	
	public long savetblSchemeSlabBenefitsBucketDetails(String RowID, String SchemeID,String SchemeSlabID,
			String BucketID,String SubBucketID,String BenSubBucketType,String BenDiscApplied,String CouponCode
			,String BenSubBucketValue,String per,String UOM,int ProRata,int IsDiscountOnTotalAmount)
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("RowID", RowID.trim());
		initialValues.put("SchemeID", SchemeID.trim());
		initialValues.put("SchemeSlabID", SchemeSlabID.trim());
		initialValues.put("BucketID", BucketID.trim());
		initialValues.put("SubBucketID", SubBucketID.trim());
		initialValues.put("BenSubBucketType", BenSubBucketType.trim());
		initialValues.put("BenDiscApplied", BenDiscApplied.trim());
		initialValues.put("CouponCode", CouponCode.trim());
		initialValues.put("BenSubBucketValue", BenSubBucketValue.trim());
		initialValues.put("Per", Double.parseDouble(per));
		if(Double.parseDouble(per)==1000.00)
		{
			// System.out.println("NDTV"+Double.parseDouble(per));
		}
		initialValues.put("UOM", Double.parseDouble(UOM));
		initialValues.put("ProRata", ProRata);

        initialValues.put("IsDiscountOnTotalAmount", IsDiscountOnTotalAmount);
		// System.out.println("Ajay Data Save in table 206");
		return db.insert(DATABASE_TABLE_MAIN206, null, initialValues);
	}
	
	
	public long savetblSchemeSlabBenefitsProductMappingDetail(String RowID, String ProductID) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("RowID", RowID.trim());
		initialValues.put("ProductID", ProductID.trim());
		
		// System.out.println("Ajay Data Save in table 207");
		return db.insert(DATABASE_TABLE_MAIN207, null, initialValues);
	}
	
	//tblSchemeSlabBenefitsValueDetail (RowID text null,BenValue text null,Remarks text null,Type text null);";
	
	
	public long savetblSchemeSlabBenefitsValueDetail(String RowID, String BenValue,String Remarks,String Type) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("RowID", RowID.trim());
		initialValues.put("BenValue", BenValue.trim());
		initialValues.put("Remarks", Remarks.trim());
		initialValues.put("Type", Type.trim());
		
		// System.out.println("Ajay Data Save in table 208");
		return db.insert(DATABASE_TABLE_MAIN208, null, initialValues);
	}
	
	//tblProductRelatedScheme (ProductID text null,PrdString text null);";
	
	public long savetblProductRelatedScheme(String ProductID, String PrdString) 
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("ProductID", ProductID.trim());
		initialValues.put("PrdString", PrdString.trim());
		
		// System.out.println("Ajay Data Save in table 209");
		return db.insert(DATABASE_TABLE_MAIN209, null, initialValues);
	}
	
	
	
	public long saveRoutesInfo(String ID,String RouteType, String Descr,int ActiveFlg,int flgTodayRoute,String RouteDate,
							   String CoverageAreaNodeID,String CoverageAreaNodeType)
	{
		
		ContentValues initialValues = new ContentValues();
		initialValues.put("ID", ID.trim());
		initialValues.put("RouteType", RouteType.trim());
		initialValues.put("Descr", Descr.trim());
		initialValues.put("Active", ActiveFlg);
		initialValues.put("flgTodayRoute", flgTodayRoute);
		initialValues.put("RouteDate", RouteDate);
		initialValues.put("CoverageAreaNodeID", Integer.parseInt(CoverageAreaNodeID));
		initialValues.put("CoverageAreaNodeType", Integer.parseInt(CoverageAreaNodeType));
		
		return db.insert(TABLE_tblRouteMstr_Define, null, initialValues);
	}
	
	//(StoreID text not null, StoreType string not null, StoreName string not null, StoreLatitude real not null, 
	//StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not null, Sstat integer not null,
	//ForDate string not null, ActualLatitude text null, ActualLongitude text null, VisitStartTS text null, VisitEndTS text null,
	//AutoIdStore int null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreClose integer null,
	//StoreNextDay integer null,chainID integer null);";
	
	
	/*private static final String DATABASE_CREATE_TABLE_13 = "create table tblStoreList " +
	(StoreID text not null, StoreType string not null, StoreName string not null, StoreLatitude real not null,
   StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not null, 
   Sstat integer not null, ForDate string not null, ActualLatitude text null, ActualLongitude text null, 
   VisitStartTS text null, VisitEndTS text null, ISNewStore int null, AutoIdStore int null, LocProvider text null,
   Accuracy text null, BateryLeftStatus text null,StoreRouteID text null);";
*/	
	
	
	 public int fncheckStoreIsNewOrOld(String StoreID)
     {
    	 open();
		   Cursor cursor = db.rawQuery("SELECT ISNewStore FROM tblStoreList WHERE StoreID='"+StoreID+"'" , null);
		   try {
		    int ISNewStore =0;
		    if (cursor.getCount() > 0) {
		     if (cursor.moveToFirst()) {
		      
		    	 ISNewStore = Integer.parseInt(cursor.getString(0));
		      
		     }
		    }
		    return ISNewStore;

		   } finally {
		    cursor.close();
		    close();
		   }

     }
	
	 public int fncheckStoreIsNewStoreDataCompleteSaved(String StoreID)
     {
    	 open();
		   Cursor cursor = db.rawQuery("SELECT IsNewStoreDataCompleteSaved FROM tblStoreList WHERE StoreID='"+StoreID+"'" , null);
		   try {
		    int IsNewStoreDataCompleteSaved =0;
		    if (cursor.getCount() > 0) {
		     if (cursor.moveToFirst()) {
		      
		    	 IsNewStoreDataCompleteSaved = Integer.parseInt(cursor.getString(0));
		      
		     }
		    }
		    return IsNewStoreDataCompleteSaved;

		   } finally {
		    cursor.close();
		    close();
		   }

     }


    public long saveSOAPdataStoreList(String StoreID, String StoreName, String StoreType,
                                      Double StoreLatitude, Double StoreLongitude, String LastVisitDate, String LastTransactionDate,
                                      String ForDate, int AutoIdStore, int Sstat, int StoreClose, int StoreNextDay, int StoreRouteID,
                                      int StoreCatNodeId,String StoreAddress,String PaymentStage,int flgHasQuote,int flgAllowQuotation,
                                      int flgSubmitFromQuotation,String flgGSTCapture,String flgGSTCompliance,String GSTNumber,
                                      int flgGSTRecordFromServer,String DBR,String RouteNodeType,int flgOrderType,String OwnerName,
                                      String StoreContactNo,String StoreCatType)
    {


        int flgIfStoreHasRecords=0;
        try {
            flgIfStoreHasRecords=CheckTotalStoreCount();
        }
        catch (Exception ex)
        {

        }

        if(flgGSTCapture.equals(""))
        {
            flgGSTCapture="1";
        }
        if(flgGSTCompliance.equals(""))
        {
            flgGSTCompliance="0";
        }
        if(GSTNumber.equals(""))
        {
            GSTNumber="0";
        }

        ContentValues initialValues = new ContentValues();

        //String rID=GetActiveRouteID();
        //String RouteNodeType=FetchRouteType(rID);


        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("StoreType", StoreType.trim());
        initialValues.put("StoreName", StoreName.trim());
        initialValues.put("StoreLatitude", StoreLatitude);
        initialValues.put("StoreLongitude", StoreLongitude);
        initialValues.put("LastVisitDate", LastVisitDate.trim());
        initialValues.put("LastTransactionDate", LastTransactionDate.trim());
        initialValues.put("Sstat", Sstat);

        initialValues.put("ForDate", ForDate.trim());
        initialValues.put("ActualLatitude", "0");
        initialValues.put("ActualLongitude", "0");
        initialValues.put("VisitStartTS", "0");
        initialValues.put("VisitEndTS", "0");
        initialValues.put("AutoIdStore", AutoIdStore);
        initialValues.put("LocProvider", "0");
        initialValues.put("Accuracy", "0");
        initialValues.put("BateryLeftStatus", "0");
        initialValues.put("StoreClose", StoreClose);
        initialValues.put("StoreNextDay", StoreNextDay);

        initialValues.put("chainID", 1);
        initialValues.put("ISNewStore", 0);
        initialValues.put("StoreRouteID", StoreRouteID);
        initialValues.put("RouteNodeType", RouteNodeType);
        initialValues.put("StoreCatNodeId", StoreCatNodeId);
        initialValues.put("IsNewStoreDataCompleteSaved", 0);
        initialValues.put("flgFromWhereSubmitStatus", 0);
        initialValues.put("StoreAddress", StoreAddress);

        initialValues.put("PaymentStage", PaymentStage);

        initialValues.put("flgHasQuote", flgHasQuote);
        initialValues.put("flgAllowQuotation", flgAllowQuotation);
        initialValues.put("flgSubmitFromQuotation", flgSubmitFromQuotation);

        initialValues.put("flgGSTCapture", flgGSTCapture);
        initialValues.put("flgGSTCompliance", flgGSTCompliance);
        initialValues.put("GSTNumber", GSTNumber);
        initialValues.put("flgGSTRecordFromServer", flgGSTRecordFromServer);
        initialValues.put("DistanceNear", 1000);

        initialValues.put("flgLocationServicesOnOff", 0);
        initialValues.put("flgGPSOnOff", 0);
        initialValues.put("flgNetworkOnOff", 0);
        initialValues.put("flgFusedOnOff", 0);
        initialValues.put("flgInternetOnOffWhileLocationTracking", 0);
        initialValues.put("flgRestart", 0);

        initialValues.put("flgStoreOrder", (flgIfStoreHasRecords+1));

        initialValues.put("StoreCity", "NA");
        initialValues.put("StorePinCode", "NA");
        initialValues.put("StoreState", "NA");
        initialValues.put("flgRetailerCreditBalnce", -1);
        initialValues.put("DBR", DBR);
        initialValues.put("CoverageAreaNodeID", CommonInfo.CoverageAreaNodeID);
        initialValues.put("CoverageAreaNodeType", CommonInfo.CoverageAreaNodeType);
        initialValues.put("FlgDSRSO", CommonInfo.FlgDSRSO);

        initialValues.put("flgOrderType", flgOrderType);
        initialValues.put("OwnerName", OwnerName.trim());
        initialValues.put("StoreContactNo", StoreContactNo.trim());
        initialValues.put("StoreCatType", StoreCatType);

        ////// System.out.println("inserting records in StoreList table..");

        return db.insert(DATABASE_TABLE_MAIN13, null, initialValues);
    }
	
	// (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null);";

	
// tblProductList (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, 
	//CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null,
	//KGLiter string nulll);";

	/*public long saveSOAPdataProductList(String CategoryID,String ProductID, String ProductShortName,
			String DisplayUnit, Double CalculateKilo,Double pMRP, Double pRLP, Double pTA, String KGLiter,
			Double RetMarginPer, Double VatTax,Double StandardRate,Double StandardRateBeforeTax,
			Double StandardTax,int CatOrdr,int PrdOrdr,int StoreCatNodeId,String SearchField)*/
	public long saveSOAPdataProductList(String CategoryID,String ProductID, String ProductShortName,
			String DisplayUnit, Double CalculateKilo, String KGLiter,int CatOrdr,int PrdOrdr,int StoreCatNodeId,String SearchField,int ManufacturerID,int flagPriority)
	{
		ContentValues initialValues = new ContentValues();
		
		initialValues.put("CategoryID", CategoryID.trim());
		initialValues.put("ProductID", ProductID.trim());
		initialValues.put("ProductShortName", ProductShortName.trim());
		initialValues.put("DisplayUnit", DisplayUnit.trim());
		initialValues.put("CalculateKilo", CalculateKilo);
		/*initialValues.put("ProductMRP", pMRP);
		initialValues.put("ProductRLP", pRLP);
		initialValues.put("ProductTaxAmount", pTA);*/
		initialValues.put("KGLiter", KGLiter);
		/*initialValues.put("RetMarginPer", RetMarginPer);
		initialValues.put("VatTax", VatTax);
		initialValues.put("StandardRate", StandardRate);
		initialValues.put("StandardRateBeforeTax", StandardRateBeforeTax);
		initialValues.put("StandardTax", StandardTax);*/
		
		
		initialValues.put("CatOrdr", CatOrdr);
		initialValues.put("PrdOrdr", PrdOrdr);
		initialValues.put("StoreCatNodeId", StoreCatNodeId);
		initialValues.put("SearchField", SearchField);
		initialValues.put("ManufacturerID", ManufacturerID);
        initialValues.put("flagPriority", flagPriority);
		return db.insert(DATABASE_TABLE_MAIN14, null, initialValues);
	}
	
	
	//dbengine.saveProductSegementMap(ProductID,ProductMRP, ProductRLP, ProductTaxAmount,RetMarginPer,VatTax,StandardRate,StandardRateBeforeTax,StandardTax,BusinessSegmentId);
	public long saveProductSegementMap(String ProductID,double pMRP,double pRLP,double pTA,double RetMarginPer,double VatTax,double StandardRate,double StandardRateBeforeTax,double StandardTax,int BusinessSegmentId,int flgPriceAva)
	{
		ContentValues initialValues = new ContentValues();
		
		initialValues.put("ProductID", ProductID.trim());
		
		initialValues.put("ProductMRP", pMRP);
		initialValues.put("ProductRLP", pRLP);
		initialValues.put("ProductTaxAmount", pTA);
		
		initialValues.put("RetMarginPer", RetMarginPer);
		initialValues.put("VatTax", VatTax);
		initialValues.put("StandardRate", StandardRate);
		initialValues.put("StandardRateBeforeTax", StandardRateBeforeTax);
		initialValues.put("StandardTax", StandardTax);
		initialValues.put("flgPriceAva", flgPriceAva);
		
		//flgPriceAva
		initialValues.put("BusinessSegmentId", BusinessSegmentId);
		
		return db.insert(DATABASE_TABLE_MAINProductSegementMap, null, initialValues);
	}
	
	public int getFwdPgIdonNextBtnClick(String StoreID, String PgId, String ChainId) 
	{
		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT fwdSeq FROM tblStorePgSeqFlow WHERE storeID="+ StoreID +" and pgId=" + PgId + " and chainID="+ChainId, null);
		try 
		{
			int strFwdPgIdonNextBtnClick = 0;
			if (cursor.moveToFirst())
            {

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					if (!cursor.isNull(ScodecolumnIndex))
					{
						strFwdPgIdonNextBtnClick = Integer.parseInt(cursor.getString(ScodecolumnIndex));
						////// System.out.println("Store Page PgId = "+ PgId +" and strFwdPgIdonNextBtnClick :"+strFwdPgIdonNextBtnClick);
						cursor.moveToNext();
					}

				}
			 }
		   return strFwdPgIdonNextBtnClick;
		} 
		finally 
		{
			cursor.close();
		}
	}
	
	public int getFwdPgIdonBackBtnClick(String StoreID, String PgId, String ChainId) 
	{
		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT bckSeq FROM tblStorePgSeqFlow WHERE storeID="+ StoreID +" and pgId=" + PgId + " and chainID="+ChainId, null);
		try 
		{
			int strFwdPgIdonBackBtnClick = 0;
			if (cursor.moveToFirst())
            {

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					if (!cursor.isNull(ScodecolumnIndex))
					{
						strFwdPgIdonBackBtnClick = Integer.parseInt(cursor.getString(ScodecolumnIndex));
						////// System.out.println("Store Page PgId = "+ PgId +" and strFwdPgIdonBackBtnClick :"+strFwdPgIdonBackBtnClick);
						cursor.moveToNext();
					}

				}
			 }
		   return strFwdPgIdonBackBtnClick;
		} 
		finally 
		{
			cursor.close();
		}
	}
	
	public String getCustomPGid(int pgID) {

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT pgName FROM tblStorePgSeqFlow WHERE pgId = "+ pgID, null);
		try {
			String strProdStockQty="";
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					if (!cursor.isNull(ScodecolumnIndex)) {
						strProdStockQty = cursor.getString(ScodecolumnIndex);	//Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
						cursor.moveToNext();
					}

				}
			}
			return strProdStockQty;
		} finally {
			cursor.close();
		}
	}

	
	public String[] checkStoreCloseOrNextMethod(String StoreID) 
	{

		int columnIndex1 = 0;
		int columnIndex2 = 1;
		Cursor cursor2 = db.rawQuery("SELECT StoreClose,StoreNextDay FROM tblStoreList WHERE StoreID ='"+ StoreID + "'", null);
		//Cursor cursorLocE = db.rawQuery("SELECT ActualLatitude FROM tblStoreList WHERE StoreID ='"+ passedStoreID + "'", null);

		try 
		  {
			String checkStoreCloseOrNextDetials[] = new String[cursor2.getCount()];
			
			////// System.out.println("records count[ProcessStoreReq]: "+cursor2.getCount());
			
			if (cursor2.moveToFirst()) 
			  {

				for (int i = 0; i < cursor2.getCount(); i++) 
				{
					checkStoreCloseOrNextDetials[i] = (String) cursor2.getString(columnIndex1)+ "_"+ (String) cursor2.getString(columnIndex2);
					
					//////// System.out.println("VAL1: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"VAL2: "+(String) cursor2.getString(LoncolumnIndex2));
					cursor2.moveToNext();
                 }

			  }
			return checkStoreCloseOrNextDetials;
		   } 
		finally 
		{
			cursor2.close();
		}

	}
	
	public int getChainIDBasedOnStoreID(String StoreID) 
	{
		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT chainID FROM tblStorePgSeqFlow WHERE storeID="+ StoreID, null);
		try 
		{
			int strChainID = 0;
			if (cursor.moveToFirst())
            {

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					if (!cursor.isNull(ScodecolumnIndex))
					{
						strChainID = Integer.parseInt(cursor.getString(ScodecolumnIndex));
						////// System.out.println("Store StoreID = '"+ StoreID +"' and strChainID :"+strChainID);
						cursor.moveToNext();
					}

				}
			 }
		   return strChainID;
		} 
		finally 
		{
			cursor.close();
		}
	}
	
	public String[] FetchStoreStoreNextDayStatus() 
	{

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT StoreNextDay FROM tblStoreList ORDER BY DistanceNear", null);
		try {
			String StoreName[] = new String[cursor.getCount()];
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++) 
				{
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
		  return StoreName;
		} 
		finally
		{
			cursor.close();
		}
	}
	
	public void updateCloseflg(String sID, int StoreClose) 
	{
		try 
		{
            ContentValues values = new ContentValues();
			values.put("StoreClose", StoreClose);
			int affected = db.update("tblStoreList", values, "StoreID= ?",new String[] { sID });
			Log.w(TAG, "affected records: " + affected);
			Log.w(TAG, "Record(s) Updated..");

		} 
		catch (Exception ex) 
		{
			Log.e(TAG, ex.toString());
		}

	}
	
	public void updateNextDayflg(String sID,int StoreNextDay) 
	{
		try 
		{
            ContentValues values = new ContentValues();
			values.put("StoreNextDay", StoreNextDay);
			////// System.out.println("nextday: "+StoreNextDay);
            int affected = db.update("tblStoreList", values, "StoreID= ?",new String[] { sID });
			
			Log.w(TAG, "affected records: " + affected);

			Log.w(TAG, "Record(s) Updated..");

		 } 
		catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}

	}
	
	public String[] FetchStoreStoreCloseStatus(String rID)
	{
		int ScodecolumnIndex = 0;

		//Cursor cursor = db.rawQuery("SELECT StoreClose FROM tblStoreList ORDER BY DistanceNear", null);
        Cursor cursor = db.rawQuery("SELECT StoreClose FROM tblStoreList where StoreRouteID='"+ rID +"'   ORDER BY DistanceNear", null);

        try {
			String StoreName[] = new String[cursor.getCount()];
			if (cursor.moveToFirst()) 
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} 
		finally 
		{
			cursor.close();
		}
	}
	
	/*public void deleteCategroyProductINformation(String CategoryId, String storeID) {
		// int entryCount;
		db.execSQL("DELETE FROM tblCategoryQuestionInformation WHERE CategoryID ='" + CategoryId + "' and StoreID='"+ storeID +"'");
		
	}*/
	
	public int getRouteId()
	{
		int LoncolumnIndex = 0;
	
		int strRouteIdMstr=0;
		Cursor cursor2 = db.rawQuery("SELECT ID FROM  tblRouteMstr where flgTodayRoute=1", null);
		try {
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++) {
					strRouteIdMstr = Integer.parseInt(cursor2
							.getString(LoncolumnIndex));
					cursor2.moveToNext();
					// cursor.close();
				}

			}

			return strRouteIdMstr;
		} finally {
			cursor2.close();
		}
	}
	
	private String[] fnarrUniqueProductsSaleSummry()
	{
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		int LoncolumnIndex2 = 2;
		
		//ProductID text not null, ProductShortName
	
		//Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductShortName, KGLiter, DisplayUnit FROM tblProductList", null);
		Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductShortName, KGLiter, DisplayUnit FROM tblProductList", null);
		try {
			String UniqueProductShortName[] = new String[cursor2.getCount()];
			if (cursor2.moveToFirst()) 
			{

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					
					if (!cursor2.isNull(LoncolumnIndex))
					{
						UniqueProductShortName[i] = cursor2.getString(LoncolumnIndex) + "^" + cursor2.getString(LoncolumnIndex1) + "^" + cursor2.getString(LoncolumnIndex2);
						//// System.out.println("Anuj ProductShortName sunil: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"KGLiter sunil: "+(String) cursor2.getString(LoncolumnIndex1));
						
						cursor2.moveToNext();
					}
					
				}

			}
			return UniqueProductShortName;
		} finally {
			cursor2.close();
		}
	}
	
	private String fnCalculateLinesSkuWise(String PSName)
	  {
	   String LineValue="0";
	   int LoncolumnIndex = 0;
	   
	   
	   //ProductID text not null, ProductShortName
	  
	   Cursor cursor2 = db.rawQuery("SELECT Count(DISTINCT StoreID) FROM tblStoreProdcutPurchaseDetails WHERE OrderQty>0 and ProductShortName ='" + PSName + "'", null);
	   try {
	    if(cursor2.getCount()>0)
	    {
	     if (cursor2.moveToFirst()) 
	     {
	 
	      for (int i = 0; i < cursor2.getCount(); i++)
	      {
	       if (!cursor2.isNull(LoncolumnIndex))
	       {
	        LineValue = cursor2.getString(LoncolumnIndex);
	        cursor2.moveToNext();
	       }
	       
	      }
	 
	     }
	    }
	    
	   } finally {
	    cursor2.close();
	   }   
	   
	   return LineValue;
	  }
	
	
	public String[] fnCalculateProductsSaleSummry() 
	{
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		int LoncolumnIndex2 = 2;
		String[] UniqueProductsSaleSummry;
		UniqueProductsSaleSummry=fnarrUniqueProductsSaleSummry();
		String val="";
		String SummryPName="";
		String SDisplayName="";
		String SDisplayUnit="";
		
		
		String SumOQty[]=new String[UniqueProductsSaleSummry.length];
		String SumFQty[]=new String[UniqueProductsSaleSummry.length];
		String SumSQty[]=new String[UniqueProductsSaleSummry.length];
		//String DisplaySQty[]=new String[UniqueProductsSaleSummry.length];
		
		String SumOQtyKG[]=new String[UniqueProductsSaleSummry.length];
		String SumFQtyKG[]=new String[UniqueProductsSaleSummry.length];
		String SumSQtyKG[]=new String[UniqueProductsSaleSummry.length];
		//String DisplaySKG[]=new String[UniqueProductsSaleSummry.length];
		
		String SummryProductName[]=new String[UniqueProductsSaleSummry.length];
		String SummryDisplayUnit[]=new String[UniqueProductsSaleSummry.length];
		
		String FinalReturnValue[]=new String[UniqueProductsSaleSummry.length];
		
		String LineSkuWise[]=new String[UniqueProductsSaleSummry.length];
		
		
		for (int kk = 0; kk < UniqueProductsSaleSummry.length; kk++)
		{
			val="";
			SummryPName="";
			SDisplayUnit="";
			String getVal="";
			getVal= UniqueProductsSaleSummry[kk].trim();
			
			StringTokenizer tokens = new StringTokenizer(String.valueOf(getVal), "^");
			SummryPName=tokens.nextToken().trim();
			val=tokens.nextToken().trim();
			SDisplayUnit=tokens.nextToken().trim();
			//SDisplayName=tokens.nextToken().trim();
			//////////// System.out.println("SummryPName"+SummryPName);
			//////////// System.out.println("SDisplayUnit"+SDisplayUnit);
			
			SummryProductName[kk]=SummryPName;
			SummryDisplayUnit[kk]=SDisplayUnit;
			////////////// System.out.println("SummryProductName[kk]"+SummryProductName[kk]);
			//////////// System.out.println("SummryProductName val"+val);
			
			
			LineSkuWise[kk]=fnCalculateLinesSkuWise(SummryPName);
			
			//if(val.contains("0g"))
			if(SDisplayUnit.contains("Kg"))
			{
				
				Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity) FROM  tblStoreProdcutPurchaseDetails where ProductShortName ='" + SummryPName + "'", null);
				try {
					//val=val.replace("g", "");
					if (cursor2.getCount() > 0)
					{
						
					
					if (cursor2.moveToFirst()) 
					{

						for (int i = 0; i < cursor2.getCount(); i++)
						{
							
							if (!cursor2.isNull(LoncolumnIndex))
							{
								SumOQty[kk]=""+ Integer.parseInt(cursor2.getString(LoncolumnIndex));
								//////////// System.out.println("SummryPName SumOQty[kk]"+SumOQty[kk]);
								String OrderKG=	"" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));			
								//////////// System.out.println("SummryPName OrderKG"+OrderKG);
								SumOQtyKG[kk] =ConvertGramToKilo(OrderKG);
							//	cursor2.moveToNext();
							}
							else
							{
								SumOQty[kk]=""+ "0";
								SumOQtyKG[kk] ="" +"0.0";
							}
							
							if (!cursor2.isNull(LoncolumnIndex1))
							{
								SumFQty[kk] ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)));
								String FreeKG="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
								
								SumFQtyKG[kk] =ConvertGramToKilo(FreeKG);
								
							//	cursor2.moveToNext();
							}
							else
							{
								SumFQty[kk] ="" +"0";
								SumFQtyKG[kk] ="0.0";
							}
							if (!cursor2.isNull(LoncolumnIndex2))
							{
								SumSQty[kk] ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)));
								String SampleKG="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
								SumSQtyKG[kk] =ConvertGramToKilo(SampleKG);
							
							}
							else
							{
								SumSQty[kk] ="0";
								SumSQtyKG[kk] ="0.0";
							}
							cursor2.moveToNext();
						}

					}
				}
					
				} finally {
					cursor2.close();
				}
				
			}
			//if(val.contains("0ml"))
			if(SDisplayUnit.contains("Lt"))
			{
				
				Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity) FROM  tblStoreProdcutPurchaseDetails where ProductShortName ='" + SummryPName + "'", null);
				try {
					//val=val.replace("ml", "");
					if (cursor2.getCount() > 0)
					{
						
					
					if (cursor2.moveToFirst()) 
					{

						for (int i = 0; i < cursor2.getCount(); i++)
						{
							
							if (!cursor2.isNull(LoncolumnIndex))
							{
								SumOQty[kk]=""+ Integer.parseInt(cursor2.getString(LoncolumnIndex));
								String OrderKG=	"" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));								
								SumOQtyKG[kk] =ConvertMLToLiters(OrderKG);
							
							}
							else
							{
								SumOQty[kk]=""+ "0";
								SumOQtyKG[kk] ="" +"0.0";
							}
							
							if (!cursor2.isNull(LoncolumnIndex1))
							{
								SumFQty[kk] ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)));
								String FreeKG="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
								SumFQtyKG[kk] =ConvertMLToLiters(FreeKG);
							
							}
							else
							{
								SumFQty[kk] ="" +"0";
								SumFQtyKG[kk] ="0.0";
							}
							if (!cursor2.isNull(LoncolumnIndex2))
							{
								SumSQty[kk] ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)));
								String SampleKG="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
								SumSQtyKG[kk] =ConvertMLToLiters(SampleKG);
							
							}
							else
							{
								SumSQty[kk] ="0";
								SumSQtyKG[kk] ="0.0";
							}
							cursor2.moveToNext();
						}

					}
					}
					
				} finally {
					cursor2.close();
				}
				
			}
		}
		

		
		String strGettblSyncSummuryDetailsKGLitersDetails[];//="";
		strGettblSyncSummuryDetailsKGLitersDetails=fnGettblSyncProductWiseDetailsKGLitersDetails();
		
		//////////// System.out.println("strGettblSyncSummuryDetailsKGLitersDetails :"+ strGettblSyncSummuryDetailsKGLitersDetails.length);
		
		
		
		
		for (int kk = 0; kk < UniqueProductsSaleSummry.length; kk++)
		{
			
			//////////// System.out.println("Sunil Check Line UniqueProductsSaleSummry :"+UniqueProductsSaleSummry[kk]);
			
			if(strGettblSyncSummuryDetailsKGLitersDetails.length>0)
			{
				for (int in = 0; in < strGettblSyncSummuryDetailsKGLitersDetails.length; in++)
				{
//////////// System.out.println("Sunil Check LinestrGettblSyncSummuryDetailsKGLitersDetails :"+strGettblSyncSummuryDetailsKGLitersDetails[in]);
					
					String SumOQtyofTable="";
					String SumFQtyofTable="";
					String SumSQtyofTable="";
					
					String SumOQtyKGofTable="";
					String SumFQtyKGofTable="";
					String SumSQtyKGofTable="";
					String SummryPNameofTable="";
					String LineCountSKUWiseFromServer="";
					
					StringTokenizer tokensofTable = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsKGLitersDetails[in]), "^");
					SummryPNameofTable=tokensofTable.nextToken().trim();
					SumOQtyofTable=tokensofTable.nextToken().trim();
					SumFQtyofTable=tokensofTable.nextToken().trim();
					SumSQtyofTable=tokensofTable.nextToken().trim();
					SumOQtyKGofTable=tokensofTable.nextToken().trim();
					SumFQtyKGofTable=tokensofTable.nextToken().trim();
					SumSQtyKGofTable=tokensofTable.nextToken().trim();
					tokensofTable.nextToken().trim();
					
					LineCountSKUWiseFromServer=tokensofTable.nextToken().trim();//For Line Count SKU Wise
					
				// System.out.println("Sunil Check Line Server Parsing :"+Integer.parseInt(LineCountSKUWiseFromServer));
					
					
					//SumOQtyKGofTable=Double.parseDouble(new DecimalFormat("##.##").format(SumOQtyKGofTable));
					//SumFQtyKGofTable=Double.parseDouble(new DecimalFormat("##.##").format(SumFQtyKGofTable));
				//	SumSQtyKGofTable=Double.parseDouble(new DecimalFormat("##.##").format(SumSQtyKGofTable));
					
					 
					//////////// System.out.println("SummryProductName[kk].toString().trim() :" +SummryProductName[kk].toString().trim());
					//////////// System.out.println("SummryPNameofTable.trim() :"+ SummryPNameofTable.trim());
					if(SummryProductName[kk].trim().equals(SummryPNameofTable.trim()))
					{
						//////////// System.out.println("Condition matched");
						SumOQty[kk]=""+(Integer.parseInt(SumOQty[kk])+Integer.parseInt(SumOQtyofTable));
						SumFQty[kk]= ""+(Integer.parseInt(SumFQty[kk])+Integer.parseInt(SumFQtyofTable));
						SumSQty[kk]= ""+(Integer.parseInt(SumSQty[kk])+Integer.parseInt(SumSQtyofTable));
						// System.out.println("Sunil Check Line PDA :"+Integer.parseInt(LineSkuWise[kk]));
						// System.out.println("Sunil Check Line Server :"+Integer.parseInt(LineCountSKUWiseFromServer));
						
						LineSkuWise[kk]=""+(Integer.parseInt(LineSkuWise[kk])+Integer.parseInt(LineCountSKUWiseFromServer));//For Line Count SKU Wise
						
						if(SummryDisplayUnit[kk].contains("Kg"))
						{
							Double SumOQtyKGofTable11=Double.parseDouble(SumOQtyKG[kk]) + Double.parseDouble(SumOQtyKGofTable);
							String a1=""+Double.parseDouble(new DecimalFormat("##.##").format(SumOQtyKGofTable11));
							
							Double SumFQtyKGofTable11= Double.parseDouble(SumFQtyKG[kk]) + Double.parseDouble(SumFQtyKGofTable);
							String a2=""+Double.parseDouble(new DecimalFormat("##.##").format(SumFQtyKGofTable11));
							
							Double SumSQtyKGofTable11=Double.parseDouble(SumSQtyKG[kk]) + Double.parseDouble(SumSQtyKGofTable);
							String a3=""+Double.parseDouble(new DecimalFormat("##.##").format(SumSQtyKGofTable11));
							SumOQtyKG[kk]= ""+ a1 + " Kg";
							SumFQtyKG[kk]= ""+ a2 + " Kg";
							SumSQtyKG[kk]= ""+ a3 + " Kg";
						}
						
						if(SummryDisplayUnit[kk].contains("Lt"))
						{
							
							Double SumOQtyKGofTable11=Double.parseDouble(SumOQtyKG[kk]) + Double.parseDouble(SumOQtyKGofTable);
							String a1=""+Double.parseDouble(new DecimalFormat("##.##").format(SumOQtyKGofTable11));
							
							Double SumFQtyKGofTable11= Double.parseDouble(SumFQtyKG[kk]) + Double.parseDouble(SumFQtyKGofTable);
							String a2=""+Double.parseDouble(new DecimalFormat("##.##").format(SumFQtyKGofTable11));
							
							Double SumSQtyKGofTable11=Double.parseDouble(SumSQtyKG[kk]) + Double.parseDouble(SumSQtyKGofTable);
							String a3=""+Double.parseDouble(new DecimalFormat("##.##").format(SumSQtyKGofTable11));
							SumOQtyKG[kk]= ""+ a1 + " Lt";
							SumFQtyKG[kk]= ""+ a2 + " Lt";
							SumSQtyKG[kk]= ""+ a3 + " Lt";
						}
						
						FinalReturnValue[kk]=SummryProductName[kk] + "^" + SumOQty[kk] + "^" + SumFQty[kk] + "^" + SumSQty[kk] + "^" + SumOQtyKG[kk] + "^" + SumFQtyKG[kk] + "^" + SumSQtyKG[kk]+ "^" + LineSkuWise[kk];
						// System.out.println("Sunil Check Line return FinalReturnValue[kk] :" + FinalReturnValue[kk]);
						break;
						
					}
				}
			}
			else
			{
				FinalReturnValue[kk]=SummryProductName[kk] + "^" + SumOQty[kk] + "^" + SumFQty[kk] + "^" + SumSQty[kk] + "^" + SumOQtyKG[kk] + "^" + SumFQtyKG[kk] + "^" + SumSQtyKG[kk]+ "^" + LineSkuWise[kk];
				//////////// System.out.println("FinalReturnValue[kk] :" + FinalReturnValue[kk]);
			}
			
		}
		
		
		return FinalReturnValue;
		
	}
	
	
	private String[] fnGettblSyncProductWiseDetailsKGLitersDetails() {
		
		int LoncolumnIndex = 0;
		int LoncolumnIndex1 = 1;
		int LoncolumnIndex2 = 2;
		int LoncolumnIndex3 = 3;
		int LoncolumnIndex4 = 4;
		int LoncolumnIndex5 = 5;
		int LoncolumnIndex6 = 6;
		int LoncolumnIndex7 = 7;
		int LoncolumnIndex8 = 8;
		

		Cursor cursor = db.rawQuery("SELECT * from tblSyncSummuryForProductDetails", null);

		try {
			String CompleteResult[] =new String[cursor.getCount()];// "0.0_0.0_0.0_0.0_0.0_0.0";
		
			////// System.out.println("cursor.getCount() :"+cursor.getCount());
			if (cursor.getCount() > 0) {

				if (cursor.moveToFirst()) {

					
					for (int i = 0; i < cursor.getCount(); i++)
					{
						
						if (!cursor.isNull(LoncolumnIndex))
						{
							CompleteResult[i] = cursor.getString(LoncolumnIndex) + "^" + cursor.getString(LoncolumnIndex1) + "^" + cursor.getString(LoncolumnIndex2) + "^" + cursor.getString(LoncolumnIndex3) + "^" + cursor.getString(LoncolumnIndex4) + "^" + cursor.getString(LoncolumnIndex5) + "^" + cursor.getString(LoncolumnIndex6) + "^" + cursor.getString(LoncolumnIndex7) + "^" + cursor.getString(LoncolumnIndex8); // the 8th one is for Line;
							////// System.out.println("ProductDetails sunil: "+(String) cursor.getString(LoncolumnIndex) + "  "+"Product sunil: "+(String) cursor.getString(LoncolumnIndex1));
							
							cursor.moveToNext();
						}
						
					}
			
					
				}

			}
			return CompleteResult;

		} finally {
			cursor.close();
		}

	}
	
	 private String ConvertGramToKilo(String strGrams)
	 {
		  //1 gram = 0.001 kilogram;
		  String kilogram=""; 
		 
		  Double gram = Double.parseDouble(strGrams);
		  kilogram ="" + (gram * 0.001);
		  return kilogram;
	 }
	 
	 private String ConvertMLToLiters(String strML)
	 {
		  //1 gram = 0.001 kilogram;
		  String Lt=""; 
		 
		  Double ML = Double.parseDouble(strML);
		  Lt ="" + (ML * 0.001);
		  return Lt;
	 }
	 
	 public String fnGetFullSummryDetailsForSale() 
		{
			
			String FullSummryDetailsForSale;
			FullSummryDetailsForSale="";
			
			int TotActualCall=0;
			TotActualCall=fnGetActualCall();
			
			////// System.out.println("TotActualCall: "	+ TotActualCall);
			
			int TotProductiveCall=0;
			TotProductiveCall=fnGetProductiveCall();
			
			////// System.out.println("TotProductiveCall: "	+ TotProductiveCall);
			
			String TotSalesValue="0.00";
			TotSalesValue=fnGetTotalSales();//fnGetTotalDiscount
			
			
			String TotDiscountValue="0.00";
			TotDiscountValue=fnGetTotalDiscount();
			
			
			////// System.out.println("TotSalesValue: "	+ TotSalesValue);
			////// System.out.println("fnGetTotalDiscount: "	+ TotDiscountValue);
			String strGettblSyncSummuryDetailsCallDetails="";
			strGettblSyncSummuryDetailsCallDetails=fnGettblSyncSummuryDetailsCallDetails();
			////// System.out.println("strGettblSyncSummuryDetailsCallDetails: "	+ strGettblSyncSummuryDetailsCallDetails);
			StringTokenizer tokensGettblSyncSummuryDetailsCallDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsCallDetails), "_");
					
			TotActualCall= TotActualCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
			TotProductiveCall= TotProductiveCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
			TotSalesValue="" + (Double.parseDouble(TotSalesValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
			TotDiscountValue="" + (Double.parseDouble(TotDiscountValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
			FullSummryDetailsForSale =TotActualCall + "_" + TotProductiveCall + "_" + TotSalesValue + "_" + TotDiscountValue;
			
			
			////// System.out.println("FullSummryDetailsForSale: "	+ FullSummryDetailsForSale);
			
			return FullSummryDetailsForSale;
		}
	 
	 
	 private int fnGetActualCall()
		{
			
			int LoncolumnIndex = 0;
			int TotActualCall = 0;
			Cursor cursor2 = db.rawQuery("SELECT Count (StoreID) FROM tblInvoice", null);
			try {
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							TotActualCall = Integer.parseInt(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
						
					}

				}
				return TotActualCall;
			} finally {
				cursor2.close();
			}
		}
	 
	 private int fnGetProductiveCall()
		{
			int LoncolumnIndex = 0;
			int TotProductiveCall = 0;
			
			Double TotInvoiceValCall = 0.00;
			Cursor cursor2 = db.rawQuery("SELECT Count (StoreID) FROM tblInvoice where InvoiceVal >" + TotInvoiceValCall, null);
			try {
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							TotProductiveCall = Integer.parseInt(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
						
					}

				}
				return TotProductiveCall;
			} finally {
				cursor2.close();
			}
		}
	 
	 private String fnGetTotalSales()
		{
			int LoncolumnIndex = 0;
			String TotSalesValue = "0.0";
			
		
			Cursor cursor2 = db.rawQuery("SELECT SUM(InvoiceVal) FROM tblInvoice", null);
			try {
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							TotSalesValue =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex));
							////// System.out.println("Abhinav Raj Summary New TotSalesValue from function: "+TotSalesValue);
							cursor2.moveToNext();
						}
						
					}

				}
				return TotSalesValue.replace(",", "");//(TotSalesValue, ",");
			} finally {
				cursor2.close();
			}
		}
	 
	 private String fnGetTotalDiscount()
		{
			int LoncolumnIndex = 0;
			String TotDiscountValue = "0.0";
			
		
			Cursor cursor2 = db.rawQuery("SELECT SUM(TotalDis) FROM tblInvoice", null);
			try {
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							TotDiscountValue =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex));
							cursor2.moveToNext();
						}
						
					}

				}
				return TotDiscountValue;
			} finally {
				cursor2.close();
			}
		}
	 
	 private String fnGettblSyncSummuryDetailsCallDetails() {

			Cursor cursor = db.rawQuery("SELECT ActualCalls, ProductiveCalls, TotSalesValue, TotDiscountKGSales from tblSyncSummuryDetails", null);

			try {
				String CompleteResult = "0_0_0.0_0.0";
				if (cursor.getCount() > 0) {

					if (cursor.moveToFirst()) {

						CompleteResult = (String) cursor.getString(0)
									+ "_"
									+ (String) cursor.getString(1)
									+ "_"
									+ (String) cursor.getString(2)
									+ "_"
									+ (String) cursor.getString(3);
							
									cursor.moveToNext();
						
					}

				}
				return CompleteResult;

			} finally {
				cursor.close();
			}

		}

	 
	 public String fnCalculateKGLiters() 
		{
			int LoncolumnIndex = 0;
			int LoncolumnIndex1 = 1;
			int LoncolumnIndex2 = 2;
			String[] UniqueKgLiters;
			UniqueKgLiters=fnarrUniqueKgLiters();//fnarrUniqueKgLitersDisplayUnit();
			String val="";
			String totalKGSales="0.0";
			String totalSampleSalesKG="0.0";
			String totalFreeQtySalesKG="0.0";
			String totalLitersSales="0.0";
			String totalSampleSalesLT="0.0";
			String totalFreeQtySalesLT="0.0";
			String totalDiscountLT="0.0";
			String totalDiscountKG="0.0";
			
			
			String totalOverallKGSales="0.0";
			String totalOverallSampleSalesKG="0.0";
			String totalOverallFreeQtySalesKG="0.0";
			String totalOverallLitersSales="0.0";
			String totalOverallSampleSalesLT="0.0";
			String totalOverallFreeQtySalesLT="0.0";
			String totalOverallDiscountLT="0.0";
			String totalOverallDiscountKG="0.0";
			
			String FinalReturnValue="";
			String ppName="";
			String pDisplayUnit="";
			for (int kk = 0; kk < UniqueKgLiters.length; kk++)
			{
				StringTokenizer tokensUniqueKgLiters = new StringTokenizer(String.valueOf(UniqueKgLiters[kk]), "^");
				
				ppName= tokensUniqueKgLiters.nextToken().trim();
				
				val="";
				val=tokensUniqueKgLiters.nextToken().trim();//UniqueKgLiters[kk].toString().trim();
				
				// change by sunil
				//val="0";
				//// System.out.println("Abhi UniqueKgLiters[kk] :"+UniqueKgLiters[kk]);
				
				pDisplayUnit=tokensUniqueKgLiters.nextToken().trim();
				//// System.out.println("Abhi pDisplayUnit:" +pDisplayUnit);
				//if(val.contains("0g"))
				if(pDisplayUnit.contains("Kg"))
				{
					//// System.out.println("Abhi getting Kg");
					Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblStoreProdcutPurchaseDetails where ProductShortName='" + ppName + "'", null);
					try {
						//val=val.replace("g", "");
						if (cursor2.getCount() > 0)
						{
							
						
						if (cursor2.moveToFirst()) 
						{

							for (int i = 0; i < cursor2.getCount(); i++)
							{
								totalKGSales="0.0";
								totalFreeQtySalesKG="0.0";
								totalSampleSalesKG="0.0";
								if (!cursor2.isNull(LoncolumnIndex))
								{
									totalKGSales ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
								//	cursor2.moveToNext();
									
									////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalKGSales-:"+ totalKGSales);
								}
								
								if (!cursor2.isNull(LoncolumnIndex1))
								{
									totalFreeQtySalesKG ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
								//	cursor2.moveToNext();
									////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalFreeQtySalesKG-:"+ totalFreeQtySalesKG);
								}
								if (!cursor2.isNull(LoncolumnIndex2))
								{
									totalSampleSalesKG ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
									
									////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalSampleSalesKG-:"+ totalSampleSalesKG);
								//	
								}
								
								
								//Write Here
								
								totalOverallKGSales="" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(totalKGSales));
								//////// System.out.println("AbhiSunil  totalOverallKGSales-:"+ totalOverallKGSales);
								totalOverallFreeQtySalesKG="" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(totalFreeQtySalesKG));
								//////// System.out.println("AbhiSunil  totalOverallFreeQtySalesKG-:"+ totalOverallFreeQtySalesKG);
								totalOverallSampleSalesKG="" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(totalSampleSalesKG));
								cursor2.moveToNext();
							}

						}
					}
						
					} finally {
						cursor2.close();
					}
					
				}
				//if(val.contains("0ml"))
				if(pDisplayUnit.contains("Lt"))
				{
					//// System.out.println("Abhi getting Liter");
					
					Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblStoreProdcutPurchaseDetails where ProductShortName ='" + ppName + "'", null);
					try {
						//// System.out.println("Abhi  cursor2.getCount() :"+cursor2.getCount());
						//val=val.replace("ml", "");
						if (cursor2.getCount() > 0) 
						{
							
						
						if (cursor2.moveToFirst()) 
						{

							for (int i = 0; i < cursor2.getCount(); i++)
							{
								 totalLitersSales="0.0";
								 totalSampleSalesLT="0.0";
								 totalFreeQtySalesLT="0.0";
								
								if (!cursor2.isNull(LoncolumnIndex))
								{
									
									totalLitersSales ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
								//	////// System.out.println("totalLitersSales :"+totalLitersSales);
									totalOverallLitersSales="" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(totalLitersSales));
									
									//// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
									//cursor2.moveToNext();
								}
								
								if (!cursor2.isNull(LoncolumnIndex1))
								{
									totalFreeQtySalesLT ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
									//////// System.out.println("totalFreeQtySalesLT :"+totalFreeQtySalesLT);
									totalOverallFreeQtySalesLT="" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(totalFreeQtySalesLT));
									
									//// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
									//cursor2.moveToNext();
								}
								if (!cursor2.isNull(LoncolumnIndex2))
								{
									totalSampleSalesLT ="" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
									totalOverallSampleSalesLT="" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(totalSampleSalesLT));
								
									//// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
									//	////// System.out.println("totalSampleSalesLT :"+totalSampleSalesLT);
								}
								

								
								cursor2.moveToNext();
							}

						}
						}
						
					} finally {
						 cursor2.close();
					}
					
					
				}
			}
			
			//// System.out.println("Abhi Sunil  totalOverallKGSales Before:" +totalOverallKGSales);
			//// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG Before:" +totalOverallFreeQtySalesKG);
			//// System.out.println("Abhi Sunil  totalOverallSampleSalesKG Before:" +totalOverallSampleSalesKG);
			
			totalOverallKGSales= ConvertGramToKilo(totalOverallKGSales);

			totalOverallFreeQtySalesKG= ConvertGramToKilo(totalOverallFreeQtySalesKG);

			totalOverallSampleSalesKG= ConvertGramToKilo(totalOverallSampleSalesKG);
	
			//// System.out.println("Abhi Sunil  totalOverallKGSales After:" +totalOverallKGSales);
	       //// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG After:" +totalOverallFreeQtySalesKG);
	   //// System.out.println("Abhi Sunil  totalOverallSampleSalesKG After:" +totalOverallSampleSalesKG);
			totalOverallLitersSales=ConvertMLToLiters(totalOverallLitersSales);

			totalOverallFreeQtySalesLT=ConvertMLToLiters(totalOverallFreeQtySalesLT);
	      //// System.out.println("Abhi Sunil totalOverallFreeQtySalesLT : "+totalOverallFreeQtySalesLT);
			totalOverallSampleSalesLT=ConvertMLToLiters(totalOverallSampleSalesLT);
			
			String strGettblSyncSummuryDetailsKGLitersDetails="";
			strGettblSyncSummuryDetailsKGLitersDetails=fnGettblSyncSummuryDetailsKGLitersDetails();
			
			StringTokenizer tokensGettblSyncSummuryDetailsKGLitersDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsKGLitersDetails), "_");
					
			totalOverallKGSales= "" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallFreeQtySalesKG= "" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallSampleSalesKG= "" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallLitersSales= "" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallFreeQtySalesLT= "" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			totalOverallSampleSalesLT= "" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
			
			
			Double DtotalOverallKGSales =  Double.parseDouble(totalOverallKGSales);
			DtotalOverallKGSales= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));
			
			Double DtotalOverallFreeQtySalesKG = Double.parseDouble(totalOverallFreeQtySalesKG);
			DtotalOverallFreeQtySalesKG= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));
			
			Double DtotalOverallSampleSalesKG = Double.parseDouble(totalOverallSampleSalesKG);
			DtotalOverallSampleSalesKG= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));
			
			Double DtotalOverallLitersSales =  Double.parseDouble(totalOverallLitersSales);
			DtotalOverallLitersSales= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));
			
			Double DtotalOverallFreeQtySalesLT = Double.parseDouble(totalOverallFreeQtySalesLT);
			DtotalOverallFreeQtySalesLT= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));
			
			Double DtotalOverallSampleSalesLT =Double.parseDouble(totalOverallSampleSalesLT);
			DtotalOverallSampleSalesLT= Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));
			
			
			 //DtotalOverallKGSales = Double.parseDouble(decimalFormat.format(DtotalOverallKGSales));
			 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));
			 FinalReturnValue= FinalReturnValue + DtotalOverallKGSales + " Units";
			 
			// DtotalOverallFreeQtySalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesKG));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallFreeQtySalesKG + " Units";
			 
			// DtotalOverallSampleSalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesKG));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallSampleSalesKG + " Units";
			 
			// DtotalOverallLitersSales = Double.parseDouble(decimalFormat.format(DtotalOverallLitersSales));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallLitersSales + " LT";
			 
			// DtotalOverallFreeQtySalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesLT));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallFreeQtySalesLT + " LT";
			 
			 //DtotalOverallSampleSalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesLT));
					 //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));
			 FinalReturnValue= FinalReturnValue + "^" + DtotalOverallSampleSalesLT + " LT";
			
			
			//FinalReturnValue= "" + DtotalOverallKGSales + " KG" + "^" + DtotalOverallFreeQtySalesKG + " KG" + "^" + DtotalOverallSampleSalesKG + " KG" + "^" + DtotalOverallLitersSales + " LT" + "^" + DtotalOverallFreeQtySalesLT + " LT" + "^" + DtotalOverallSampleSalesLT + " LT";
			//// System.out.println("Abhi  FinalReturnValue :"+FinalReturnValue);
			return FinalReturnValue;
			
		}
	 
	 
	 private String[] fnarrUniqueKgLiters()
		{
			int LoncolumnIndex = 0;
			
			
		
			Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductShortName,KGLiter,DisplayUnit FROM tblProductList", null);
			try {
				String UniqueKgLiters[] = new String[cursor2.getCount()];
				if (cursor2.moveToFirst()) 
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{
						
						if (!cursor2.isNull(LoncolumnIndex))
						{
							UniqueKgLiters[i] = cursor2.getString(LoncolumnIndex) +"^"+ cursor2.getString(1) +"^"+ cursor2.getString(2);
							cursor2.moveToNext();
						}
						
					}

				}
				return UniqueKgLiters;
			} finally {
				cursor2.close();
			}
		}
	 
		private String fnGettblSyncSummuryDetailsKGLitersDetails() {
			
			

			Cursor cursor = db.rawQuery("SELECT TotKGSales,TotFreeQtyKGSales,TotSampleKGSales,TotLTSales,TotFreeQtyLTSales,TotSampleLTSales,TotDiscountKGSales,TotDiscountLTales from tblSyncSummuryDetails", null);

			try {
				String CompleteResult = "0.0_0.0_0.0_0.0_0.0_0.0_0.0_0.0";
				if (cursor.getCount() > 0) {

					if (cursor.moveToFirst()) {

						CompleteResult = (String) cursor.getString(0)
									+ "_"
									+ (String) cursor.getString(1)
									+ "_"
									+ (String) cursor.getString(2)
									+ "_"
									+ (String) cursor.getString(3)
									+ "_"
									+ (String) cursor.getString(4)
									+ "_"
									+ (String) cursor.getString(5)
									+ "_"
									+ (String) cursor.getString(6)
									+ "_"
									+ (String) cursor.getString(7);
							
									cursor.moveToNext();
						
					}

				}
				return CompleteResult;

			} finally {
				cursor.close();
			}

		}
		
		 public void deleteAllSubmitDataToServer(int Sstat) 
	     {
	      open();
	      db.execSQL("DELETE FROM tblTransac WHERE Sstat ="+ Sstat);
	      db.execSQL("DELETE FROM tblInvoice WHERE Sstat ="+ Sstat);
	      db.execSQL("DELETE FROM tblStoreList WHERE Sstat ="+ Sstat);
	      
	      db.execSQL("DELETE FROM tblNewStoreListEntries WHERE Sstat ="+ Sstat);
	      db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE Sstat ="+ Sstat);
	      db.execSQL("DELETE FROM tblStoreProdcutPurchaseDetails WHERE Sstat ="+ Sstat);
	      
	      
	      db.execSQL("DELETE FROM tblNewStoreEntries WHERE Sstat ="+ Sstat);
	      db.execSQL("DELETE FROM tblOutletQuestAnsMstr WHERE Sstat ="+ Sstat);
	    
	      
	      db.execSQL("DELETE FROM tblStoreMaterialDetail WHERE Sstat ="+ Sstat);
	      
	      db.execSQL("DELETE FROM tblStoreMaterialPhotoDetail WHERE Sstat ="+ Sstat);
	      db.execSQL("DELETE FROM tblStoreReturnDetail WHERE Sstat ="+ Sstat);
	      db.execSQL("DELETE FROM tblStoreProductPhotoDetail WHERE Sstat ="+ Sstat);
	     
	   
	      
	      close(); 
	     }
		
		
		public void updateRecordsSyncStoreProductReturn() {
			try {
			final ContentValues values = new ContentValues();
			values.put("Sstat", "4");
			int affected = db.update("tblStoreReturnDetail", values, "Sstat=?",
					new String[] { "3" });
			int affected1 = db.update("tblStoreProductPhotoDetail", values, "Sstat=?",
					new String[] { "3" });
			
		} catch (Exception ex) {
			Log.e(TAG, ex.toString());
		}
		}
		public void updateRecordsSyncd(int Sstat) {

			try {
				// ////// System.out.println("No. of non-synced records: " +
				// countNonSynced());

				// if (countNonSynced() > 0) {

				Log.w(TAG, "Updating Synced Records..");

				final ContentValues values = new ContentValues();
				values.put("Sstat", Sstat);
				
				
				int affected = db.update("tblTransac", values, "Sstat=?",
						new String[] { "5" });
				int affected2 = db.update("tblInvoice", values, "Sstat=?",
						new String[] { "5" });
				int affected3 = db.update("tblStoreList", values, "Sstat=?",
						new String[] { "5" });
				int affected4 = db.update("tblNewStoreListEntries", values,
						"Sstat=?", new String[] { "5" });
				
				
				int affected7 = db.update("tblStoreProductAppliedSchemesBenifitsRecords", values,
						"Sstat=?", new String[] { "5" });
				int affected8 = db.update("tblStoreProdcutPurchaseDetails", values,
						"Sstat=?", new String[] { "5" });
				
				
				int affected9 = db.update("tblNewStoreEntries", values,
						"Sstat=?", new String[] { "5" });
				
				
				int affected10 = db.update("tblTemp", values,
						"Sstat=?", new String[] { "5" });
			
				int affected11 = db.update("tblProductMappedWithSchemeSlabApplied", values,
						"Sstat=?", new String[] { "5" });
				
				int affected12 = db.update("tblOutletQuestAnsMstr", values,"Sstat=?", new String[] { "5" });
				
				int affected13 = db.update("tblStoreMaterialDetail", values,"Sstat=?", new String[] { "5" });
				
				int affected14 = db.update("tblStoreMaterialPhotoDetail", values,"Sstat=?", new String[] { "5" });
				
			
				int affected15 = db.update("tblNoVisitStoreDetails", values,"Sstat=?", new String[] { "5" });
				
				int affected16 = db.update("tblNotificationMstr", values,
						"Sstat=?", new String[] { "5" });
				
				
				
				
				
				Log.w(TAG, "affected records: " + affected + " in 1st Table, "
						+ affected2 + " in 2nd table, " + affected3
						//+ " in 3rd table(tblStoreList)" + affected4
						/*+ " in 4th table(tblNewStoreListEntries)" + affected5
						+ " in 5th table(tblPDAProductReturnMstr)" + affected6*/
						+ " in 6th table(tblPDAProductReturnDetails)");

				Log.w(TAG, "Synced Records Updated..");
				// } else {
				// Log.w(TAG, "Non-Synced Records not Found..");
				// }

			} catch (Exception ex) {
				Log.e(TAG, ex.toString());
			}

		}
		
		
		
		
		public void AddNewStore(String strNewAddedStoreIDFlg, String RetailerName,
				String OwnerName, String Address, String StoreType,String fDate,String phoneSendValue,String ActualLatitude, String ActualLongitude, String Accuracy,
				String LocProvider,String BateryLevel)
		{/*
			if (Integer.parseInt(strNewAddedStoreIDFlg) == 0)
			{
				int MaxAutoStore = 0;
				int cntTotStore=0;
				cntTotStore=fnGetCountForNewStore();
				String strGetMaxIDForNewStore="0";
				String activeRid;
				activeRid = GetActiveRouteID();
				if(cntTotStore>0)
				{
				MaxAutoStore = fnGetMaxAutoStoreIncrementForNewStore();
				MaxAutoStore = MaxAutoStore + 1;
				strGetMaxIDForNewStore = fnGetMaxIdWithIncrementForNewStore(MaxAutoStore);
				}
				else
				{
					MaxAutoStore=0;
					MaxAutoStore = MaxAutoStore + 1;
					
					strGetMaxIDForNewStore = "-000^" + (1) + "$"
							+ MaxAutoStore;
					
				}
				////// System.out.println("MaxAutoStore.. " + MaxAutoStore);
				

				////// System.out.println("MaxAutoStore. After Increment . "+ MaxAutoStore);
				

				////// System.out.println("New Added Store Name . "+ strGetMaxIDForNewStore);

				if (!strGetMaxIDForNewStore.equals("")
						|| !strGetMaxIDForNewStore.equals(null)) {
					
					////// System.out.println("fDate vlaue by sunil"+fDate);
					////// System.out.println("strGetMaxIDForNewStore.trim() vlaue by sunil"+strGetMaxIDForNewStore.trim());
					////// System.out.println("StoreType vlaue by sunil"+StoreType.trim());

					////// System.out.println("RetailerName vlaue by sunil"+RetailerName.trim());

					////// System.out.println("MaxAutoStore vlaue by sunil"+MaxAutoStore);

					
					saveSOAPdataStoreListNewStore(strGetMaxIDForNewStore.trim(), StoreType.trim(), RetailerName.trim(), Double.parseDouble(ActualLatitude), Double.parseDouble(ActualLongitude), "", "", fDate, MaxAutoStore,1,Accuracy,LocProvider,activeRid,BateryLevel); // in last parameter Fdate
					
					fnUpdateFlgForNewSoreInMainStoreTable(strGetMaxIDForNewStore);
					//fnInsertStoreIfNotExistIntblDaySummary(strGetMaxIDForNewStore);//On Store Selection VisitStart Activity
					////// System.out.println("strGetMaxIDForNewStore"+strGetMaxIDForNewStore.trim());
					////// System.out.println("RetailerName"+RetailerName.toString().trim());
					
					////// System.out.println("OwnerName"+OwnerName.toString().trim());
					
					////// System.out.println("Address"+Address.toString().trim());
					
					////// System.out.println("PinCode"+PinCode.toString().trim());
					
					////// System.out.println("StoreType"+StoreType.toString().trim());
					
					////// System.out.println("Location"+Location.toString().trim());
					
					////// System.out.println("Area"+Area.toString().trim());
					
					saveSOAPdataStoreListDetailsInNewTable(strGetMaxIDForNewStore.trim(), RetailerName.toString().trim(), OwnerName.toString().trim(), Address.toString().trim(),phoneSendValue,ActualLatitude,ActualLongitude,Accuracy,LocProvider,activeRid);
					
				}
			}
		*/}

		private int fnGetMaxAutoStoreIncrementForNewStore() {

			int LoncolumnIndex = 0;
			int strAutoIdStore = 0;

			Cursor cursor2 = db.rawQuery(
					"SELECT Max(AutoIdStore) FROM tblStoreList", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						strAutoIdStore = Integer.parseInt(cursor2
								.getString(LoncolumnIndex));
						cursor2.moveToNext();
						// cursor.close();
					}

				}
				return strAutoIdStore;
			} finally {
				cursor2.close();
			}

		}
		
		
		private int fnGetCountForNewStore() {

			int LoncolumnIndex = 0;
			int strStore = 0;

			Cursor cursor2 = db.rawQuery(
					"SELECT Count(*) FROM tblStoreList", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						strStore = Integer.parseInt(cursor2
								.getString(LoncolumnIndex));
						cursor2.moveToNext();
						// cursor.close();
					}

				}
				return strStore;
			} finally {
				cursor2.close();
			}

		}
		
		private String fnGetMaxIdWithIncrementForNewStore(int MaxAutoStore) {

			int LoncolumnIndex = 0;
			int LoncolumnIndex1 = 1;
			String strLastMaxStoreId = "0";
			String nn = "";
			// String strLastMaxAutoStoreId="0";

			Cursor cursor2 = db
					.rawQuery(
							"SELECT StoreID FROM tblStoreList order by AutoIdStore Desc Limit 1",
							null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						strLastMaxStoreId = cursor2.getString(LoncolumnIndex);
						// strLastMaxAutoStoreId=
						// cursor2.getString(LoncolumnIndex1);
						cursor2.moveToNext();
						// cursor.close();
					}
					strLastMaxStoreId = strLastMaxStoreId.replace("-", "");

					if (strLastMaxStoreId.contains("^")) {
						StringTokenizer tokensSchstrLastMaxStoreIdNew = new StringTokenizer(
								String.valueOf(strLastMaxStoreId), "^");
						nn = tokensSchstrLastMaxStoreIdNew.nextToken().trim();
						strLastMaxStoreId = tokensSchstrLastMaxStoreIdNew
								.nextToken().trim();
					}
					if (strLastMaxStoreId.contains("$")) {
						StringTokenizer tokensSchstrLastMaxStoreId = new StringTokenizer(
								String.valueOf(strLastMaxStoreId), "$");

						strLastMaxStoreId = tokensSchstrLastMaxStoreId.nextToken()
								.trim();
					}

					strLastMaxStoreId = "-000^" + (strLastMaxStoreId) + "$"
							+ MaxAutoStore;
				}
				return strLastMaxStoreId;
			} finally {
				cursor2.close();
			}

		}


//	saveSOAPdataStoreList

    public long saveSOAPdataStoreListNewStore(String sCode, String sType, String sName,
                                              Double sLat, Double sLon, String LVdate, String LTdate,
                                              String sForDate, int AutoIdStore, int newStat, String Accuracy, String LocProvider,
                                              String activeRid,String BateryLevel,int IsNewStoreDataCompleteSaved,String fetchAddress,
                                              String PaymentStage,int flgHasQuote,int flgAllowQuotation,int flgSubmitFromQuotation
            ,String flgGSTCapture,String flgGSTCompliance,String GSTNumber,int flgGSTRecordFromServer, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking, int flgRestart, int flgStoreOrder, String StoreCity,String StorePinCode, String StoreState) {


        int flgIfStoreHasRecords=0;
        try {
            flgIfStoreHasRecords=CheckTotalStoreCount();
        }
        catch (Exception ex)
        {

        }

        ContentValues initialValues = new ContentValues();
        ////// System.out.println("Saved code:" + sCode + "Saved name:" + "" + sName);
        long syncTIMESTAMP = System.currentTimeMillis();
        Date dateobj = new Date(syncTIMESTAMP);
        SimpleDateFormat df = new SimpleDateFormat(
                "dd-MMM-yyyy HH:mm:ss",Locale.ENGLISH);
        String startTS = df.format(dateobj);

        activeRid = GetActiveRouteID();
        String RouteNodeType=FetchRouteType(activeRid);


        initialValues.put("StoreID", sCode.trim());
        initialValues.put("StoreType", sType);
        initialValues.put("StoreName", sName.trim());
        initialValues.put("ActualLatitude", ""+sLat);
        initialValues.put("ActualLongitude",""+ sLon);
        initialValues.put("StoreLatitude", sLat);
        initialValues.put("StoreLongitude", sLon);
        initialValues.put("LastVisitDate", "NA");
        initialValues.put("LastTransactionDate","NA");
        initialValues.put("Sstat", newStat);
        initialValues.put("ISNewStore", 1);
        initialValues.put("StoreClose", 0);
        initialValues.put("StoreNextDay", 0);
        // System.out.println("DateTimeNitish fnDBkenya saveSOAPdataStoreListNewStore = "+startTS);
        initialValues.put("VisitStartTS", startTS);
        initialValues.put("VisitEndTS", startTS);
        initialValues.put("LocProvider", LocProvider);
        initialValues.put("Accuracy", Accuracy);
        initialValues.put("BateryLeftStatus", BateryLevel);
        // initialValues.put(KEY_snxtday, 0);
        // initialValues.put(KEY_sDone, 0);
        initialValues.put("ForDate", sForDate.trim());
        initialValues.put("AutoIdStore", AutoIdStore);
        initialValues.put("StoreRouteID", activeRid);
        initialValues.put("RouteNodeType", RouteNodeType);
        initialValues.put("StoreCatNodeId", 0);
        initialValues.put("IsNewStoreDataCompleteSaved", IsNewStoreDataCompleteSaved);
        initialValues.put("flgFromWhereSubmitStatus", 0);
        initialValues.put("StoreAddress", fetchAddress);
        initialValues.put("PaymentStage", PaymentStage);
        initialValues.put("flgHasQuote", flgHasQuote);
        initialValues.put("flgAllowQuotation", flgAllowQuotation);
        initialValues.put("flgSubmitFromQuotation", flgSubmitFromQuotation);

        initialValues.put("flgGSTCapture", flgGSTCapture);
        initialValues.put("flgGSTCompliance", flgGSTCompliance);
        initialValues.put("GSTNumber", GSTNumber);
        initialValues.put("flgGSTRecordFromServer", flgGSTRecordFromServer);
        initialValues.put("DistanceNear", 1000);



        initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
        initialValues.put("flgGPSOnOff", flgGPSOnOff);
        initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
        initialValues.put("flgFusedOnOff", flgFusedOnOff);
        initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
        initialValues.put("flgRestart", flgRestart);

        initialValues.put("flgStoreOrder", (flgIfStoreHasRecords+1));

        initialValues.put("StoreCity", StoreCity.trim());
        initialValues.put("StorePinCode", StorePinCode.trim());
        initialValues.put("StoreState", StoreState.trim());

        initialValues.put("flgOrderType", -1);
        //flgAllowQuotation

        //flgAllowQuotation
        //StoreCatNodeId
        ////// System.out.println("Total Records Present sunil in DBAdapter:"+checkNumberOfStore);
        checkNumberOfStore++;

        ////// System.out.println("inserting records..");

        return db.insert(DATABASE_TABLE_MAIN13, null, initialValues);
    }


    public int CheckTotalStoreCountSO() throws IOException
    {

        int chkI = 0;
        Cursor cursorE2=null;
        open();
        try
        {
            cursorE2 = db.rawQuery("SELECT flgStoreOrder from tblPreAddedStores order by flgStoreOrder desc limit 1", null);
            if(cursorE2.getCount()>0) {
                if (cursorE2.moveToFirst()) {

                    if (cursorE2.getInt(0) > 0) {
                        chkI = cursorE2.getInt(0);
                    } else {
                        chkI = 0;
                    }
                }
            }

        } finally
        {
            if(cursorE2!=null) {
                cursorE2.close();
            }
            close();
        }
        return chkI;
    }
	private int CheckTotalStoreCount() throws IOException
	{

		int chkI = 0;
		Cursor cursorE2=null;
		//open();
		try
		{
			cursorE2 = db.rawQuery("SELECT flgStoreOrder from tblStoreList order by flgStoreOrder desc limit 1", null);
			if(cursorE2.getCount()>0) {
				if (cursorE2.moveToFirst()) {

					if (cursorE2.getInt(0) > 0) {
						chkI = cursorE2.getInt(0);
					} else {
						chkI = 0;
					}
				}
			}

		} finally
		{
			if(cursorE2!=null) {
				cursorE2.close();
			}
			//close();
		}
		return chkI;
	}

	public void fnUpdateFlgForNewSoreInMainStoreTable(
				String strGetMaxIDForNewStore) {
			final ContentValues values = new ContentValues();
			values.put("ISNewStore", "1");

			int affected = db.update("tblStoreList", values, "StoreID=?",
					new String[] { strGetMaxIDForNewStore });
			Log.w(TAG, "affected records: " + affected);

			Log.w(TAG, "fnUpdateFlgForNewSoreInMainStoreTable Updated..");

		}



	public long saveSOAPdataStoreListDetailsInNewTable(String StoreID, String StoreCity,
													   String StorePinCode, String StoreState,int Sstat)
	{

		ContentValues initialValues = new ContentValues();
		String activeRid = GetActiveRouteID();

		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("StoreCity", StoreCity.trim());
		initialValues.put("StorePinCode", StorePinCode.trim());
		initialValues.put("StoreState", StoreState.trim());
		initialValues.put("ActiveRouteID", activeRid.trim());
		initialValues.put("Sstat", Sstat);

		return db.insert(DATABASE_TABLE_MAIN16, null, initialValues);
	}


	public String fnGetOptionDescrFromtblOptionMstr(String QuestID,String AnsValue)
	{

		Cursor cursor =null;
		String DDlStringCity="";
		try
		{
			open();
			cursor= db.rawQuery("SELECT OptionDescr FROM tblOptionMstr WHERE  QuestID ='"+ QuestID.trim() + "' and OptID='"+AnsValue.trim()+"'", null);
			if (cursor.getCount() > 0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						DDlStringCity= cursor.getString(0).trim();

						cursor.moveToNext();
					}
				}

			}


		} catch (Exception e) {
			System.out.println("shivam query = "+e.toString());
		}
		finally {
			//cursor.close();
			close();

		}
		return DDlStringCity;
	}

	/*public LinkedHashMap isMstrQuestToHide()
	{
		LinkedHashMap<String,String> hmapMstrQstOptId=new LinkedHashMap<String,String>();
		open();

		String channelOptId=getChannelGroupIdOptId();
		String channelkey =getChannelGroupIdKey();
		if(!channelOptId.equals("0-0-0"))
		{
			hmapMstrQstOptId.put(channelkey,channelOptId);
		}
		else
		{
			hmapMstrQstOptId.put(channelkey,"0");
		}
		close();
		return hmapMstrQstOptId;
	}*/

	private String GetPrevDate() {

			Cursor cursorDateE = db.rawQuery(
					"SELECT DISTINCT ForDate FROM tblStoreList", null);
			String returnDate = "";
			String date2Send = "";

			try {
				if (cursorDateE.getCount() > 0) {
					////// System.out.println("GetPrevDate - Records Count: "+ cursorDateE.getCount());

					if (cursorDateE.moveToFirst()) {
						date2Send = cursorDateE.getString(0);
						// chk here
						////// System.out.println("GetPrevDate - forDate: " + date2Send);

					} else {
						////// System.out.println("moveToFirst <- GetPrevDate - FALSE!");
					}
					// ////// System.out.println("returning GetPrevDate - true");
					returnDate = date2Send;
				}

			}

			finally {
				cursorDateE.close();
			}
			return returnDate;
		}
		
		
		public void AddNewStore(String strNewAddedStoreIDFlg, String RetailerName,
				String OwnerName, String Address, String StoreType,String fDate,String phoneSendValue,String ActualLatitude, String ActualLongitude, String Accuracy,
				String LocProvider)
		{/*
			if (Integer.parseInt(strNewAddedStoreIDFlg) == 0)
			{
				int MaxAutoStore = 0;
				int cntTotStore=0;
				cntTotStore=fnGetCountForNewStore();
				String strGetMaxIDForNewStore="0";
				String activeRid;
				activeRid = GetActiveRouteID();
				if(cntTotStore>0)
				{
				MaxAutoStore = fnGetMaxAutoStoreIncrementForNewStore();
				MaxAutoStore = MaxAutoStore + 1;
				strGetMaxIDForNewStore = fnGetMaxIdWithIncrementForNewStore(MaxAutoStore);
				}
				else
				{
					MaxAutoStore=0;
					MaxAutoStore = MaxAutoStore + 1;
					
					strGetMaxIDForNewStore = "-000^" + (1) + "$"
							+ MaxAutoStore;
					
				}
				////// System.out.println("MaxAutoStore.. " + MaxAutoStore);
				

				////// System.out.println("MaxAutoStore. After Increment . "+ MaxAutoStore);
				

				////// System.out.println("New Added Store Name . "+ strGetMaxIDForNewStore);

				if (!strGetMaxIDForNewStore.equals("")
						|| !strGetMaxIDForNewStore.equals(null)) {
					

					
					saveSOAPdataStoreListNewStore(strGetMaxIDForNewStore.trim(), StoreType.trim(), RetailerName.trim(), Double.parseDouble(ActualLatitude), Double.parseDouble(ActualLongitude), "", "", fDate, MaxAutoStore,1,Accuracy,LocProvider,activeRid,IsNewStoreDataCompleteSaved); // in last parameter Fdate
					
					fnUpdateFlgForNewSoreInMainStoreTable(strGetMaxIDForNewStore);
					////// System.out.println("strGetMaxIDForNewStore"+strGetMaxIDForNewStore.trim());
					////// System.out.println("RetailerName"+RetailerName.toString().trim());
					
					////// System.out.println("OwnerName"+OwnerName.toString().trim());
					
					////// System.out.println("Address"+Address.toString().trim());
					
					////// System.out.println("PinCode"+PinCode.toString().trim());
					
					////// System.out.println("StoreType"+StoreType.toString().trim());
					
					////// System.out.println("Location"+Location.toString().trim());
					
					////// System.out.println("Area"+Area.toString().trim());
					
					saveSOAPdataStoreListDetailsInNewTable(strGetMaxIDForNewStore.trim(), RetailerName.toString().trim(), OwnerName.toString().trim(), Address.toString().trim(),phoneSendValue,ActualLatitude,ActualLongitude,Accuracy,LocProvider,activeRid,IsNewStoreDataCompleteSaved);
					
				}
			}
		*/}
	/*	public long saveSOAPdataStoreListNewStore(String sCode, String sType, String sName,
				Double sLat, Double sLon, String LVdate, String LTdate,
				String sForDate, int AutoIdStore, int newStat, String Accuracy, String LocProvider,String activeRid) {
			ContentValues initialValues = new ContentValues();

			////// System.out.println("Saved code:" + sCode + "Saved name:" + "" + sName);
			long syncTIMESTAMP = System.currentTimeMillis();
			Date dateobj = new Date(syncTIMESTAMP);
			SimpleDateFormat df = new SimpleDateFormat(
					"dd-MM-yyyy HH:mm:ss");
			String startTS = df.format(dateobj);
			
			
			initialValues.put("StoreID", sCode.trim());
			initialValues.put("StoreType", "0");
			initialValues.put("StoreName", sName.trim());
			initialValues.put("ActualLatitude", ""+sLat);
			initialValues.put("ActualLongitude",""+ sLon);
			initialValues.put("StoreLatitude", sLat);
			initialValues.put("StoreLongitude", sLon);
			initialValues.put("LastVisitDate", LVdate.trim());
			initialValues.put("LastTransactionDate", LTdate.trim());
			initialValues.put("Sstat", newStat);
			initialValues.put("ISNewStore", 1);
			initialValues.put("StoreClose", 0);
			initialValues.put("StoreNextDay", 0);
			initialValues.put("VisitStartTS", startTS);
			initialValues.put("VisitEndTS", startTS);
			initialValues.put("LocProvider", LocProvider);
			initialValues.put("Accuracy", Accuracy);
			initialValues.put("BateryLeftStatus", "0");
			
			// initialValues.put(KEY_snxtday, 0);
			// initialValues.put(KEY_sDone, 0);
			initialValues.put("ForDate", sForDate.trim());
			initialValues.put("AutoIdStore", AutoIdStore);
			initialValues.put("StoreRouteID", activeRid);
			checkNumberOfStore++;

			////// System.out.println("inserting records..");

			return db.insert(DATABASE_TABLE_MAIN2, null, initialValues);
		}*/
		
		public String[] FetcDistinctProductWhichHaveAnySchemesOrderEntry()
		{
			int ScodecolumnIndex = 0;
			int ScodecolumnIndex1 = 1;

			Cursor cursor = db.rawQuery("SELECT Distinct ProductId FROM tblschemeProductMap", null);
			try 
			{
				String DistinctProductIdStock[] = new String[cursor.getCount()];
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++) 
					{
						DistinctProductIdStock[i] = (String) cursor.getString(ScodecolumnIndex);
						////// System.out.println("product short name :"+StoreProductIdStock[i]);
						cursor.moveToNext();
					}
				 }
				return DistinctProductIdStock;
			 }
			finally 
			{
				cursor.close();
			}
		}
		
		private String[] fnSchemeIDFreePRodQtyDetails()
		{
			
			Cursor cursor = db.rawQuery("SELECT tblSchemeList.SchemeID,tblSchemeList.SchemeType, " +
					" tblSchemeList.CombTypeID,tblSchemeList.flgDiscountType,tblSchemeDetails.FreeProductID from tblSchemeList Inner JOIN tblSchemeDetails" +
					"  ON tblSchemeList.SchemeID=tblSchemeDetails.SchemeID", null);
			try 
			{
				String[] SchemeIDFreePRodQtyDetails= new String[cursor.getCount()];
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++) 
					{
						SchemeIDFreePRodQtyDetails[i] = (String) cursor.getString(0) + "^"+(String) cursor.getString(1) + "^"+(String) cursor.getString(2) + "^"+(String) cursor.getString(3) + "^"+(String) cursor.getString(4);
						// System.out.println("product short name Abhinav Raj :"+SchemeIDFreePRodQtyDetails[i]);
						cursor.moveToNext();
					}
				 }
				return SchemeIDFreePRodQtyDetails;
			 }
			finally 
			{
				cursor.close();
			}
		}
		
		private int fnCheckIfStoreExistInStoreSchemeFreeProQtyOtherDetails(String StoreID)
		{
			Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStoreSchemeFreeProQtyOtherDetails WHERE StoreID ='" + StoreID + "'", null);
			int chkI = 0;
			try {
				if (cursorE2.moveToFirst()) {

					if (cursorE2.getInt(0) > 0) {
						chkI = 1;
					} else {
						chkI = 0;
					}
				}

			} finally {
				cursorE2.close();
			}
			return chkI;
		}
		
		public void fnChkandInsertIfNotPresentInStoreSchemeFreeProQtyOtherDetails(String StoreID)
		{
			int chkI=fnCheckIfStoreExistInStoreSchemeFreeProQtyOtherDetails(StoreID);
			int GetStoreType=fnGetStoreTypeOnStoreID(StoreID);
			if(chkI==0)
			{
				String[] SchemeIDFreePRodQtyDetails=fnSchemeIDFreePRodQtyDetails();
				fnInsertStoreRecordsInStoreSchemeFreeProQtyOtherDetailsIfNotPresent(SchemeIDFreePRodQtyDetails,StoreID,""+GetStoreType);
				
			}
			
		}
		
		private void fnInsertStoreRecordsInStoreSchemeFreeProQtyOtherDetailsIfNotPresent(String SchemeIDFreePRodQtyDetails[], String StoreID, String StoreType) {
			
			for(int cnt=0;cnt<SchemeIDFreePRodQtyDetails.length;cnt++)
			{
				StringTokenizer token = new StringTokenizer(String.valueOf(SchemeIDFreePRodQtyDetails[cnt]), "^");
				//// System.out.println("product short name Abhinav Raj In Loop :"+SchemeIDFreePRodQtyDetails[cnt]);
				ContentValues initialValues = new ContentValues();
				initialValues.put("StoreID", StoreID.trim());
				initialValues.put("StoreType", StoreType.trim());
				initialValues.put("SchemeID",token.nextToken().trim());
				initialValues.put("SchemeType",token.nextToken().trim());
				initialValues.put("CombTypeID", token.nextToken().trim());
				initialValues.put("flgDiscountType", token.nextToken().trim());
				initialValues.put("FreeProductID", token.nextToken().trim());
				initialValues.put("FreeProductQty", "0");
				initialValues.put("Discount", "0.00");
				
				db.insert("tblStoreSchemeFreeProQtyOtherDetails", null, initialValues);
			}
			
		}
		public void deleteStoreRecordFromtblStoreSchemeFreeProQtyOtherDetailsOnceSubmitted(String storeID)
		{
			db.execSQL("DELETE FROM tblStoreSchemeFreeProQtyOtherDetails WHERE StoreID='"+ storeID +"'");
		}
		public String fnGetFreeQtyFromStoreSchemeFreeProQtyOtherDetails(String storeID,String SchID,String SchemeType,String CombTypeID,String FreeProductID)
		  {
			
			  int LoncolumnIndex = 0;
				int LoncolumnIndex1 = 1;
				String strSchemeIDFreeProductId = "";
				String Statement="";
				if(SchemeType.equals("1") || SchemeType.equals("2"))
				{
					Statement="SELECT FreeProductQty FROM tblStoreSchemeFreeProQtyOtherDetails where SchemeID='"
							+ SchID + "' and StoreID='"+storeID+"' and SchemeType='"+SchemeType+"' and CombTypeID='"+CombTypeID+"' and FreeProductID='"+FreeProductID+"'";
				
				}
				else
				{
					Statement="SELECT Discount FROM tblStoreSchemeFreeProQtyOtherDetails where SchemeID='"
							+ SchID + "' and StoreID='"+storeID+"' and SchemeType='"+SchemeType+"' and CombTypeID='"+CombTypeID+"' and FreeProductID='"+FreeProductID+"'";
				}
				Cursor cursor2 = db.rawQuery("SELECT FreeProductQty FROM tblStoreSchemeFreeProQtyOtherDetails where SchemeID='"
						+ SchID + "' and StoreID='"+storeID+"' and SchemeType='"+SchemeType+"' and CombTypeID='"+CombTypeID+"' and FreeProductID='"+FreeProductID+"'", null);
				try {
					if (cursor2.moveToFirst()) {

						for (int i = 0; i < cursor2.getCount(); i++) {

							strSchemeIDFreeProductId = cursor2
									.getString(LoncolumnIndex);
									//+ "_"
									//+ cursor2.getString(LoncolumnIndex1);
							cursor2.moveToNext();
							// cursor.close();
						}

					}
					return strSchemeIDFreeProductId;
				} finally {
					cursor2.close();
				} 
		  }
		
		public void UpdateInvoiceButtonStoreFlag(String storeID,String SchID,String SchemeType,String CombTypeID,String FreeProductID,String FreeProductQty,String Discount)
		{
			if(SchemeType.equals("1") || SchemeType.equals("2"))
			{
				try
				 {
					final ContentValues values = new ContentValues();
					values.put("Discount", FreeProductQty);
					int affected = db.update("tblStoreSchemeFreeProQtyOtherDetails", values, "StoreID=? AND SchemeID=? AND SchemeType=? AND CombTypeID=? AND FreeProductID=?",new String[] { storeID,SchID,SchemeType,CombTypeID,FreeProductID });
				}
				catch (Exception ex)
				{
					Log.e(TAG, ex.toString());
				}
			}
			else if(SchemeType.equals("3"))
			{
				try
				 {
					final ContentValues values = new ContentValues();
					values.put("FreeProductQty", FreeProductQty);
					int affected = db.update("tblStoreSchemeFreeProQtyOtherDetails", values, "StoreID=? AND SchemeID=? AND SchemeType=? AND CombTypeID=? AND FreeProductID=?",new String[] { storeID,SchID,SchemeType,CombTypeID,FreeProductID });
				}
				catch (Exception ex)
				{
					Log.e(TAG, ex.toString());
				}
			}
		}
		private int fnGetStoreTypeOnStoreID(String StoreID) {

			int LoncolumnIndex = 0;
			int strStoreType = 0;

			Cursor cursor2 = db.rawQuery(
					"SELECT StoreType FROM tblStoreList Where StoreID='"+StoreID+"'", null);
			try {
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						strStoreType = Integer.parseInt(cursor2
								.getString(LoncolumnIndex));
						cursor2.moveToNext();
						// cursor.close();
					}

				}
				return strStoreType;
			} finally {
				cursor2.close();
			}

		}

		public ArrayList<HashMap<String, String>> fetch_catgry_prdctsData(String storeID,int BusinessSegmentId) {
			
			open();
			ArrayList<HashMap<String, String>> totalProductDetail= new ArrayList<>();
			//hmapCtgryPrdctDetail= key=prdctId,val=CategoryID
			LinkedHashMap<String, String> hmapCtgryPrdctDetail= new LinkedHashMap<>();
			//hmapCtgryPrdctDetail= key=prdctId,val=Volume^Rate^TaxAmount
			HashMap<String, String> hmapPrdctVolRatTax= new HashMap<>();
			//hmapCtgryPrdctDetail= key=prdctId,val=OrderQty
			HashMap<String, String> hmapPrdctOdrQty= new HashMap<>();
			//hmapCtgryPrdctDetail= key=prdctId,val=ProductSample
			HashMap<String, String> hmapPrdctSmpl= new HashMap<>();
			//hmapCtgryPrdctDetail= key=prdctId,val=ProductFreeQty
			HashMap<String, String> hmapPrdctFreeQty= new HashMap<>();
			//hmapCtgryPrdctDetail= key=prdctId,val=ProductName
			HashMap<String, String> hmapPrdctIdPrdctName= new HashMap<>();
			//hmapCtgryPrdctDetail= key=prdctId,val=ProductDiscount
			HashMap<String, String> hmapPrdctIdPrdctDscnt= new HashMap<>();

			 //hmapProductRetailerMarginPercentage= key =ProductID         value=RetailerMarginPercentage
			   HashMap<String, String> hmapProductRetailerMarginPercentage= new HashMap<>();
			   
			 //hmapProductVatTaxPerventage= key =ProductID         value=VatTaxPercentage
			   HashMap<String, String> hmapProductVatTaxPerventage= new HashMap<>();
			   
			 //hmapProductVatTaxPerventage= key =ProductID         value=ProductMRP
			   HashMap<String, String> hmapProductMRP= new HashMap<>();
			   
			 //hmapProductVatTaxPerventage= key =ProductID         value=DiscountPercentageGivenOnProduct
			   HashMap<String, String> hmapProductDiscountPercentageGive= new HashMap<>();
			   
			 //hmapProductVolumePer= key =ProductID         value=Per
			   HashMap<String, String> hmapProductVolumePer= new HashMap<>();
			   
			 //hmapProductVolumePer= key =ProductID         value=TaxValue
			   HashMap<String, String> hmapProductTaxValue= new HashMap<>();
			   
			 //hmapProductVolumePer= key =ProductID         value=LODQty
			   HashMap<String, String> hmapProductLODQty= new HashMap<>();
			      
			 //hmapProductVolumePer= key =ProductID         value=LODQty
			   HashMap<String, String> hmapProductIdOrdrVal= new HashMap<>();
			   
			   //hmapProductStandardRate= key =ProductID         value=StandardRate
			   HashMap<String, String> hmapProductStandardRate= new HashMap<>();
			   
			   //hmapProductStandardRateBeforeTax= key =ProductID         value=StandardRateBeforeTax
			   HashMap<String, String> hmapProductStandardRateBeforeTax= new HashMap<>();
			   
			   //hmapProductStandardTax= key =ProductID         value=StandardTax
			   HashMap<String, String> hmapProductStandardTax= new HashMap<>();
			   
			   //hmapProductStock= key =ProductID         value=Stock
			   HashMap<String, String> hmapProductStock= new HashMap<>();

			//hmapProductStock= key =ProductID         value=flgPriceAva
			HashMap<String, String> hmapProductflgPriceAva= new HashMap<>();
			   
			   
			 //Cursor cursor = db.rawQuery("SELECT ProductID,CategoryID,ProductShortName,KGLiter ||'^'||ProductRLP||'^'||ProductTaxAmount AS ProductVolumeRateTax,'NA/0' As LODQty,0 AS SampleQty,0 AS ProductFreeQty,0 AS ProductOrderQty,0.00 As PrdctDiscount,RetMarginPer,VatTax,ProductMRP,0.00 AS DiscountPercentageGivenOnProduct,0 AS Per,0.00 AS TaxValue,0.00 AS OrderValue,StandardRate,StandardRateBeforeTax,StandardTax,0 As Stock  FROM tblProductList order by CategoryID,ProductID",null);
			   Cursor cursor = db.rawQuery("SELECT tblProductList.ProductID,tblProductList.CategoryID,tblProductList.ProductShortName,tblProductList.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax,'NA/0' As LODQty,0 AS SampleQty,0 AS ProductFreeQty,0 AS ProductOrderQty,0.00 As PrdctDiscount,tblProductSegementMap.RetMarginPer,tblProductSegementMap.VatTax,tblProductSegementMap.ProductMRP,0.00 AS DiscountPercentageGivenOnProduct,0 AS Per,0.00 AS TaxValue,0.00 AS OrderValue,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,tblProductSegementMap.StandardTax,0 As Stock,tblProductSegementMap.flgPriceAva  FROM tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID inner join tblDistributorStock ON tblProductList.ProductID=tblDistributorStock.PrdctId Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" AND tblDistributorStock.OriginalStock>0  order by tblProductList.CategoryID,tblProductList.PrdOrdr,tblProductList.flagPriority",null);
			
			   //tblProductList.ProductID------------->0
			   //tblProductList.CategoryID------------>1
			   //tblProductList.ProductShortName------>2
			   //tblProductList.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax
			   //'NA/0' As LODQty---------------------->4
			   //0 AS SampleQty------------------------>5
			   //0 AS ProductFreeQty------------------->6
			   //0 AS ProductOrderQty------------------>7
			   //0.00 As PrdctDiscount----------------->8
			   //tblProductSegementMap.RetMarginPer---->9
			   //tblProductSegementMap.VatTax---------->10
			   //tblProductSegementMap.ProductMRP-------->11
			   //0.00 AS DiscountPercentageGivenOnProduct----->12
			   //0 AS Per------------------------------->13
			   //0.00 AS TaxValue----------------------->14
			   //0.00 AS OrderValue--------------------->15
			   //tblProductSegementMap.StandardRate----->16
			   //tblProductSegementMap.StandardRateBeforeTax----->17
			   //tblProductSegementMap.StandardTax------->18
			   //0 As Stock------------------------------>19
			   //FROM tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"  order by tblProductList.CategoryID,tblProductList.ProductID",null);
			   try
			{
				if(cursor.getCount()>0)
				{
					if (cursor.moveToFirst()) {

						for (int i = 0; i < cursor.getCount(); i++)
						{
							hmapCtgryPrdctDetail.put(cursor.getString(0), cursor.getString(1));
							hmapPrdctVolRatTax.put(cursor.getString(0), cursor.getString(3));
							hmapPrdctOdrQty.put(cursor.getString(0), cursor.getString(7));
							hmapPrdctSmpl.put(cursor.getString(0), cursor.getString(5));
							hmapPrdctFreeQty.put(cursor.getString(0), cursor.getString(6));
							hmapPrdctIdPrdctName.put(cursor.getString(0), cursor.getString(2));
							hmapPrdctIdPrdctDscnt.put(cursor.getString(0), cursor.getString(8));
							hmapProductRetailerMarginPercentage.put(cursor.getString(0), cursor.getString(9));
							hmapProductVatTaxPerventage.put(cursor.getString(0), cursor.getString(10));
							hmapProductMRP.put(cursor.getString(0), cursor.getString(11));
							hmapProductDiscountPercentageGive.put(cursor.getString(0), cursor.getString(12));
							hmapProductVolumePer.put(cursor.getString(0), cursor.getString(13));
							hmapProductTaxValue.put(cursor.getString(0), cursor.getString(14));
							hmapProductLODQty.put(cursor.getString(0), cursor.getString(4));
							hmapProductIdOrdrVal.put(cursor.getString(0), cursor.getString(15));
							
							hmapProductStandardRate.put(cursor.getString(0), cursor.getString(16));
							
							hmapProductStandardRateBeforeTax.put(cursor.getString(0), cursor.getString(17));
							
							hmapProductStandardTax.put(cursor.getString(0), cursor.getString(18));
							hmapProductStock.put(cursor.getString(0), cursor.getString(19));
							hmapProductflgPriceAva.put(cursor.getString(0), cursor.getString(20));
							cursor.moveToNext();
							// cursor.close();
						}
						totalProductDetail.add(hmapCtgryPrdctDetail);
						totalProductDetail.add(hmapPrdctVolRatTax);
						totalProductDetail.add(hmapPrdctOdrQty);
						totalProductDetail.add(hmapPrdctSmpl);
						totalProductDetail.add(hmapPrdctFreeQty);
						totalProductDetail.add(hmapPrdctIdPrdctName);
						totalProductDetail.add(hmapPrdctIdPrdctDscnt);
						totalProductDetail.add(hmapProductRetailerMarginPercentage);
						totalProductDetail.add(hmapProductVatTaxPerventage);
						totalProductDetail.add(hmapProductMRP);
						totalProductDetail.add(hmapProductDiscountPercentageGive);
						totalProductDetail.add(hmapProductVolumePer);
						totalProductDetail.add(hmapProductTaxValue);
						totalProductDetail.add(hmapProductLODQty);
						totalProductDetail.add(hmapProductIdOrdrVal);
						totalProductDetail.add(hmapProductStandardRate);
						totalProductDetail.add(hmapProductStandardRateBeforeTax);
						totalProductDetail.add(hmapProductStandardTax);
						totalProductDetail.add(hmapProductStock);
						totalProductDetail.add(hmapProductflgPriceAva);
					}
				}
				
			
				return totalProductDetail;
			} finally {
				cursor.close();
				
				close();
			}
			
			
		}
		
		public LinkedHashMap<String, String> fetch_Category_List_Return(String StoreID)
		{
			open();
			// System.out.println("Abhinav Raj is 1");
			LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
			Cursor cursor = db.rawQuery("SELECT CategoryID,CategoryDescr FROM tblCatagoryMstr inner join tblStoreProdcutPurchaseDetails on tblCatagoryMstr.CategoryID=tblStoreProdcutPurchaseDetails.CatID Where Stock>0 and tblStoreProdcutPurchaseDetails.StoreID='"+StoreID+"'",null);
			try 
			{
				if(cursor.getCount()>0)
				{
					if (cursor.moveToFirst()) 
					{
						
						for (int i = 0; i <= (cursor.getCount() - 1); i++)
						{
							if(i==0)
							{
								hmapCatgry.put("All","0");
							}
							hmapCatgry.put(cursor.getString(1), cursor.getString(0));
							cursor.moveToNext();
						}
					}
					
				}
				
				else
				{
					hmapCatgry.put("No Category", "0");
				}
				// System.out.println("Abhinav Raj is 3");
				return hmapCatgry;
			}
			finally
			{
				cursor.close();
				close();
			}
		}
		public LinkedHashMap<String, String> fetch_Category_List()
		{
			open();
			LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
			Cursor cursor = db.rawQuery("SELECT CategoryID,CategoryDescr FROM tblCatagoryMstr Order by CatOrdr",null);
			try 
			{
				if(cursor.getCount()>0)
				{
					if (cursor.moveToFirst()) 
					{
						
						for (int i = 0; i <= (cursor.getCount() - 1); i++)
						{
							hmapCatgry.put(cursor.getString(1), cursor.getString(0));
							cursor.moveToNext();
						}
					}
					
				}
				
				else
				{
					hmapCatgry.put("No Category", "0");
				}
				return hmapCatgry;
			}
			finally
			{
				cursor.close();
				close();
			}
		}
		
		
		
		
		
		
		
		
		
		
		public LinkedHashMap<String, String> fetch_MaterialMstr_List(String storeID)
		{
			open();
			LinkedHashMap<String, String> hmapMaterial = new LinkedHashMap<>();
			Cursor cursor = db.rawQuery("SELECT POSMaterialID,POSMaterialDescr FROM tblPOSMaterialMstr Order by POSMaterialID",null);
			try 
			{
				if(cursor.getCount()>0)
				{
					if (cursor.moveToFirst()) 
					{
						
						for (int i = 0; i <= (cursor.getCount() - 1); i++)
						{
							//hmapMaterial.put(cursor.getString(1).toString(),cursor.getString(0).toString());
							hmapMaterial.put(cursor.getString(0), cursor.getString(1));
							cursor.moveToNext();
						}
					}
					
				}
				
				else
				{
					hmapMaterial.put("No Category", "0");
				}
				return hmapMaterial;
			}
			finally
			{
				cursor.close();
				close();
			}
		}
		
		
		
		//tblSchemeSlabBucketProductMapping
		public HashMap<String, HashMap<String, HashMap<String, String>>> fnProductWiseAppliedScehmeSlabDetails(String StorID)
		{
			String StorIDnew="1";//StorID;
			open();
			String[] uniqueProdSchemeList=fnUniqueProdSchemeList();
			
			String productId;
			String schemeId = null;
			int countProductId=0;
			int countSchemeId=0;
			
						/*Cursor cursor2 = db.rawQuery("SELECT tblSchemeSlabBucketProductMapping.ProductID FROM tblSchemeSlabBucketProductMapping inner join tblSchemeSlabBucketDetails on tblSchemeSlabBucketProductMapping.RowID=tblSchemeSlabBucketDetails.RowID", null);
			if(cursor2.getCount()>0)
			{
				
			}*/
			// Key=productId,Value=hmapSchemeIdSlab
			HashMap<String, String> hmapSlabIdSlabDscrptnBnftDscrptn=null;
			HashMap<String, HashMap<String, String>> hmapSchemeIdSlab = null;
			HashMap<String, HashMap<String, HashMap<String, String>>> hmapPrdctIdScheme= new HashMap<>();
			//			0						1						2							3							4
			Cursor cursor = db.rawQuery("SELECT tblSchemeSlabBucketProductMapping.ProductID,tblSchemeMstr.SchemeID,tblSchemeMstr.SchemeName,tblSchemeSlabDetail.SchemeSlabId,tblSchemeSlabDetail.SchemeSlabDesc,tblSchemeSlabDetail.BenifitDescr FROM tblSchemeSlabBucketProductMapping inner join tblSchemeSlabBucketDetails on tblSchemeSlabBucketProductMapping.RowID=tblSchemeSlabBucketDetails.RowID inner join tblSchemeSlabDetail on tblSchemeSlabBucketDetails.SchemeID=tblSchemeSlabDetail.SchemeID inner Join tblSchemeMstr on tblSchemeSlabDetail.SchemeID=tblSchemeMstr.SchemeID inner join tblSchemeStoreMapping on tblSchemeMstr.SchemeID=tblSchemeStoreMapping.SchemeID Where tblSchemeStoreMapping.StoreID='"+StorIDnew+"' Order by tblSchemeSlabBucketProductMapping.ProductID", null);
			if(cursor.moveToFirst());
			{
				for(int index=0;index<cursor.getCount();index++)
				{
					
					int length=uniqueProdSchemeList.length;
					if(uniqueProdSchemeList[countProductId].equals(cursor.getString(0)))
					{
						if(index==0)
						{
							hmapSchemeIdSlab= new HashMap<>();
							hmapSlabIdSlabDscrptnBnftDscrptn= new HashMap<>();
							schemeId= cursor.getString(1);
						}
						if(schemeId.equals(cursor.getString(1)))
						{
							hmapSlabIdSlabDscrptnBnftDscrptn.put(cursor.getString(3), cursor.getString(4)+"^"+cursor.getString(5));
							// System.out.println("Astix SlabId="+cursor.getString(3));
						}
						else
						{
							
							
							hmapSchemeIdSlab.put(schemeId, hmapSlabIdSlabDscrptnBnftDscrptn);
							hmapSlabIdSlabDscrptnBnftDscrptn= new HashMap<>();
							// System.out.println("Astix SchemeId="+cursor.getString(1));
							schemeId= cursor.getString(1);
							hmapSlabIdSlabDscrptnBnftDscrptn.put(cursor.getString(3), cursor.getString(4)+"^"+cursor.getString(5));
							// System.out.println("Astix NewScheme SlabId="+cursor.getString(3));
							
						}
						
						
					}
					else
					{
						hmapPrdctIdScheme.put(uniqueProdSchemeList[countProductId], hmapSchemeIdSlab);
						hmapSchemeIdSlab= new HashMap<>();
						// System.out.println("Betu HashMapProduct = "+hmapPrdctIdScheme);
						// System.out.println("Astix ProductID="+uniqueProdSchemeList[countProductId]);
						
						
						
							hmapSlabIdSlabDscrptnBnftDscrptn.put(cursor.getString(3), cursor.getString(4)+"^"+cursor.getString(5));
							// System.out.println("Astix NewProduct SlabId="+cursor.getString(3));
							schemeId= cursor.getString(1);
						
						countProductId++;
						
					}
					
					cursor.moveToNext();
				}	
				
				//// System.out.println("Betu HashMapProduct = "+hmapPrdctIdScheme);
			}
			
			close();
			 return hmapPrdctIdScheme;
		}
		private String[] fnUniqueProdSchemeList()
		{
			
			Cursor cursor = db.rawQuery("SELECT Distinct ProductID from tblSchemeSlabBucketProductMapping Order by ProductID", null);
			try 
			{
				String[] SchemeIDFreePRodQtyDetails= new String[cursor.getCount()];
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++) 
					{
						SchemeIDFreePRodQtyDetails[i] = (String) cursor.getString(0);
						//// System.out.println("Astix short name Abhinav Raj :"+SchemeIDFreePRodQtyDetails[i]);
						cursor.moveToNext();
					}
				 }
				return SchemeIDFreePRodQtyDetails;
			 }
			finally 
			{
				cursor.close();
			}
		}
		
		public HashMap<String, String> fnGetSchemeIdSchemeDescptn(String schemeId)
		{
			open();
			
			Cursor cursor = db.rawQuery("Select SchemeID , SchemeName from tblSchemeMstr where SchemeID'"+schemeId+"'", null);
			try 
			{
				HashMap<String, String> hmapSchemeIDSchemeDes= new HashMap<>();
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++) 
					{
						hmapSchemeIDSchemeDes.put((cursor.getString(0)),(cursor.getString(1)));
						
						cursor.moveToNext();
					}
				 }
				return hmapSchemeIDSchemeDes;
			 }
			finally 
			{
				cursor.close();
				close();
			}
		}
	
		public String[] fectProductIDMappedInSchSlbSubBukRowId(int schSlbSubRowID) 
		  {
			//open();
		   Cursor cursor = db.rawQuery("SELECT ProductID FROM tblSchemeSlabBucketProductMapping WHERE RowID ="+ schSlbSubRowID , null);
		   try {
		    String CompleteResult[] = new String[cursor.getCount()];
		    if (cursor.getCount() > 0) {
		     if (cursor.moveToFirst()) {
		      for (int i = 0; i <= (cursor.getCount() - 1); i++) {
		       CompleteResult[i] = (String) cursor.getString(0);
		       cursor.moveToNext();
		      }
		     }
		    }
		    return CompleteResult;

		   } finally {
		    cursor.close();
		   // close();
		   }

		  }
		
		public HashMap<String, String> fnProductRelatedSchemesList()
		  {
		   open();
		   Cursor cursor = db.rawQuery("SELECT Distinct ProductID,PrdString from tblProductRelatedScheme", null);
		   try 
		   {
		    HashMap<String, String> SchemeIDFreePRodQtyDetails= new HashMap<>();
		    if(cursor.getCount()>0)
		    {
		     if (cursor.moveToFirst())
		     {
		      for (int i = 0; i <= (cursor.getCount() - 1); i++) 
		      {
		       SchemeIDFreePRodQtyDetails.put(cursor.getString(0), cursor.getString(1));
		       cursor.moveToNext();
		      }
		      }
		    }
		    return SchemeIDFreePRodQtyDetails;
		    }
		   finally 
		   {
		    cursor.close();
		    close();
		   }
		  }
		
		public String[] fectProductIDBenifitsListOnPurchase(int schId,int schSlabId,int schSlbBuckId)
		{
			open();
			Cursor cursor = db.rawQuery("SELECT RowID AS BenifitRowID,BenSubBucketType,BenDiscApplied,CouponCode,BenSubBucketValue,Per, UOM,ProRata,IsDiscountOnTotalAmount FROM tblSchemeSlabBenefitsBucketDetails WHERE SchemeID ="+ schId +" and SchemeSlabID="+schSlabId +" and BucketID="+schSlbBuckId , null);
			try {
				String PerBen;
				String UOMBen;
		
				String CompleteResult[] = new String[cursor.getCount()];
				if (cursor.getCount() > 0) {
					if (cursor.moveToFirst()) {
						for (int i = 0; i <= (cursor.getCount() - 1); i++) {
							if(cursor.getString(5)==null)
							{
								PerBen="0.0";
								UOMBen="0.0";
							}
							else
							{
								PerBen=cursor.getString(5);
								UOMBen=cursor.getString(6);
							}
							{
							CompleteResult[i] = cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2)+"^"+ cursor.getString(3)+"^"+cursor.getString(4)+"^"+PerBen+"^"+UOMBen+"^"+cursor.getString(7)+"^"+cursor.getString(8);
							cursor.moveToNext();
						}
					}
				}
			

			} 
				return CompleteResult;
			}finally {
				cursor.close();
				close();
			}

		}
		public HashMap<String, String> fectProductIDMappedInSchSlbSubBukBenifits(int BenifitRowID) 
		{	 open();
			Cursor cursor = db.rawQuery("SELECT tblSchemeSlabBenefitsProductMappingDetail.ProductID,tblProductList.ProductShortName FROM tblSchemeSlabBenefitsProductMappingDetail inner join tblProductList on tblSchemeSlabBenefitsProductMappingDetail.ProductID=tblProductList.ProductID  WHERE RowID ="+ BenifitRowID , null);
			try {
				HashMap<String, String> CompleteResult = new HashMap<>();
				if (cursor.getCount() > 0) {
					if (cursor.moveToFirst()) {
						for (int i = 0; i <= (cursor.getCount() - 1); i++) {
							CompleteResult.put(cursor.getString(1), cursor.getString(0));
							cursor.moveToNext();
						}
					}
				}
				return CompleteResult;

			} finally {
				cursor.close();
				close();
			}
		}
		public String[] fectStatusIfBeniftRowIdExistsInSchemeSlabBenefitsValueDetail(int BenifitRowID,int toMultiply,Double defaultValue,int BenSubBucketType)
		  {

			open();
		   Cursor cursor2 = db.rawQuery("SELECT BenValue FROM tblSchemeSlabBenefitsValueDetail where RowID="+BenifitRowID, null);
		   if(BenSubBucketType==2 || BenSubBucketType==6 || BenSubBucketType==8)
		   {
		   toMultiply=1;
		   }
		   //////////// System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
		   String[] chkI;
		   try {
		    if(cursor2.getCount()>0)
		    {
		     chkI=new String[cursor2.getCount()+1];
		    if (cursor2.moveToFirst()) {
		     for (int i = 0; i < cursor2.getCount(); i++)
		     {
		      if(i==0)
		      {
		       chkI[i]=String.valueOf(defaultValue*toMultiply);
		       
		      }
		      
		      chkI[i+1]=String.valueOf((Integer.parseInt(cursor2.getString(0))*toMultiply));
		      
		      cursor2.moveToNext();
		     }
		     
		    }
		    }
		    else
		    {
		     chkI=new String[1];
		     chkI[0]=String.valueOf(defaultValue*toMultiply);
		    }

		   } finally {
		    cursor2.close();
		    close();
		   }
		   //////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
		   return chkI;
		  }
		public String[] fnGetEarlierFreeProductIDandQtyonSchemeSlabBuckIDTypeBasis(String StoreID,int productID,int schId,int schSlabId,int schSlbBuckId,int BenifitRowID)
		{
			Cursor cursor = db.rawQuery("SELECT FreeProductID,BenifitAssignedValue From tblFreeProductIDandQtyonSchemeSlabBuckIDTypeBasis where StoreID='"+StoreID+"' and ProductID="+productID+" and schId="+schId+" and schSlabId="+schSlabId+" and schSlbBuckId="+schSlbBuckId+" and BenifitRowID="+BenifitRowID , null);
			try {
				String CompleteResult[] = new String[cursor.getCount()];
				if (cursor.getCount() > 0) {
					if (cursor.moveToFirst()) {
						for (int i = 0; i <= (cursor.getCount() - 1); i++) {
							CompleteResult[i] = (String) cursor.getString(0);
							cursor.moveToNext();
						}
					}
				}
				return CompleteResult;

			} finally {
				cursor.close();
			}
		}
		public String fectStatusIfBeniftRowIdExistsInSchemeSlabBenefitsPercentageDetail(int BenifitRowID)
		{

			Cursor cursor2 = db.rawQuery("SELECT RowID,BenValue,Type FROM tblSchemeSlabBenefitsValueDetail where RowID="+BenifitRowID, null);
			
			//////////// System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
			String chkI = "";
			try {
				if(cursor2.getCount()>0)
				{
				if (cursor2.moveToFirst()) {
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						if (!cursor2.isNull(0))
						{
							chkI = cursor2.getString(0) +"_"+ cursor2.getString(1) +"_"+ cursor2.getString(2);
						}
						cursor2.moveToNext();
					}
				}
				}

			} finally {
				cursor2.close();
			}
			//////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
			return chkI;
		}
		public String fectStatusIfBeniftRowIdExistsInSchemeSlabBenefitsFlatAmtDetail(int BenifitRowID)
		{

			Cursor cursor2 = db.rawQuery("SELECT RowID,BenValue,Type FROM tblSchemeSlabBenefitsValueDetail where RowID="+BenifitRowID, null);
			
			//////////// System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
			String chkI = "";
			try {
				if(cursor2.getCount()>0)
				{
				if (cursor2.moveToFirst()) {
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						if (!cursor2.isNull(0))
						{
							chkI = cursor2.getString(0) +"_"+ cursor2.getString(1) +"_"+ cursor2.getString(2);
						}
						cursor2.moveToNext();
					}
					
				}
				}

			} finally {
				cursor2.close();
			}
			//////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
			return chkI;
		}
		
		public HashMap<String, String> fnSchemeIDandDescr()
	    {
	     open();
	     Cursor cursor = db.rawQuery("SELECT SchemeID,SchemeName from tblSchemeMstr", null);
	     try 
	     {
	      HashMap<String, String> SchemeIDSchemeName= new HashMap<>();
	      if(cursor.getCount()>0)
	      {
	       if (cursor.moveToFirst())
	       {
	        for (int i = 0; i <= (cursor.getCount() - 1); i++) 
	        {
	         SchemeIDSchemeName.put(cursor.getString(0), cursor.getString(1));
	         cursor.moveToNext();
	        }
	        }
	      }
	      return SchemeIDSchemeName;
	      }
	     finally 
	     {
	      cursor.close();
	      close();
	     }
	    }
		
		public String[] fnGetProductPurchaseList(String StoreID,String pdaOrderID)
		  {
			open();
		   Cursor cursor = db.rawQuery("SELECT ProdID,Stock,OrderQty,OrderVal,FreeQty,DisVal,SampleQuantity,ProductPrice From tblStoreProdcutPurchaseDetails where StoreID='"+StoreID+"' and OrderIDPDA='"+pdaOrderID+"'" , null);
		   try {
		    String CompleteResult[] = new String[cursor.getCount()];
		    if (cursor.getCount() > 0) {
		     if (cursor.moveToFirst()) {
		      for (int i = 0; i <= (cursor.getCount() - 1); i++) {
		       CompleteResult[i] = (String) cursor.getString(0) +"^"+(String) cursor.getString(1) +"^"+(String) cursor.getString(2) +"^"+(String) cursor.getString(3) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(5) +"^"+(String) cursor.getString(6) +"^"+(String) cursor.getString(7);
		       cursor.moveToNext();
		      }
		     }
		    }
		    return CompleteResult;

		   } finally {
		    cursor.close();
		    close();
		   }
		  }
		
		
		
		public String fngetOrderIDAganistStore(String StoreID)
	    {
	   // System.out.println("Abhinav Nitish Ankit New While Fetching Records Store Id:"+StoreID);
	     open();
	    // Cursor cursorE2 = db.rawQuery("SELECT Distinct OrderIDPDA FROM tblInvoice WHERE StoreID ='" + StoreID + "' and (Sstat=1 or Sstat=2)", null);
			Cursor cursorE2 = db.rawQuery("SELECT Distinct OrderIDPDA FROM tblInvoice WHERE StoreID ='" + StoreID + "'", null);
	     String chkI = "0";
	     try {
	      if(cursorE2.getCount()>0)
	       {
	      if (cursorE2.moveToFirst()) {

	    
	        chkI = (String) cursorE2.getString(0);
	       
	      }
	       }
	     } finally {
	      cursorE2.close();
	      close();
	     }
	     return chkI;
	    }
		
		
		public int fnCheckIfStoreExistInStoreProdcutPurchaseDetails(String StoreID)
	    {
	   // System.out.println("Abhinav Nitish Ankit New While Fetching Records Store Id:"+StoreID);
	     open();
	     //Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStoreProdcutPurchaseDetails WHERE StoreID ='" + StoreID + "' and (Sstat=1 or Sstat=2)", null);
			Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStoreProdcutPurchaseDetails WHERE StoreID ='" + StoreID + "'", null);
	     int chkI = 0;
	     try {
	      if(cursorE2.getCount()>0)
	       {
	      if (cursorE2.moveToFirst()) {

	       if (cursorE2.getInt(0) > 0) {
	        chkI = 1;
	       } else {
	        chkI = 0;
	       }
	      }
	       }
	     } finally {
	      cursorE2.close();
	      close();
	     }
	     return chkI;
	    }
		
		
		public int fnCheckIfStoreExistInStoreProdcutInvoiceDetails(String StoreID)
	    {
	    open();
	    // Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblInvoice WHERE StoreID ='" + StoreID + "' and (Sstat=1 or Sstat=2)", null);
			Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblInvoice WHERE StoreID ='" + StoreID + "'", null);
	     int chkI = 0;
	     try {
	      if(cursorE2.getCount()>0)
	       {
	      if (cursorE2.moveToFirst()) {

	       if (cursorE2.getInt(0) > 0) {
	        chkI = 1;
	       } else {
	        chkI = 0;
	       }
	      }
	       }
	     } finally {
	      cursorE2.close();
	      close();
	     }
	     return chkI;
	    }
		
		public String[] fnGetOnProductQtyChangeApplyApplicableDiscounts(String StoreID,String ProductIdOnClicked)
		   {
		    open();
		    Cursor cursorE2 = db.rawQuery("SELECT BenSubBucketType,BenifitAssignedValue,BenifitDiscountApplied FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and ProductID="+ Integer.parseInt(ProductIdOnClicked) +" and BenSubBucketType in(6,7)", null);
		    String[] chkI = new String[cursorE2.getCount()];
		    try {
		     if(cursorE2.getCount()>0)
		     {
		      if (cursorE2.moveToFirst()) {
		       for (int i = 0; i <= (cursor.getCount() - 1); i++) {
		        chkI[i] = (String) cursor.getString(0) +"^"+(String) cursor.getString(1) +"^"+(String) cursor.getString(2);
		       }
		      }
		     }

		    } finally {
		     cursorE2.close();
		     close();
		    }
		    return chkI;
		   }
		
		public int fnCheckIfPrdRelatedDataExisitIntblStoreProductAppliedSchemesBenifitsRecords(String StoreID,String ProductIdOnClicked)
		 {
		  open();
		  Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and ProductID="+ Integer.parseInt(ProductIdOnClicked), null);
		  int chkI = 0;
		  try {
		   if (cursorE2.moveToFirst()) {

		    if (cursorE2.getInt(0) > 0) {
		     chkI = 1;
		    } else {
		     chkI = 0;
		    }
		   }

		  } finally {
		   cursorE2.close();
		   close();
		  }
		  return chkI;
		 }
		
		/*public String[] fnGetDistinctSchIdsAgainstStoreProduct(String StoreID,String ProductIdOnClicked,int schId)
		   {
		    open();
		    Cursor cursor = db.rawQuery("SELECT BenSubBucketType,FreeProductID,BenifitAssignedValue,BenifitDiscountApplied,IFNULL(BenifitCouponCode,0),schId,schSlbRowId,SchTypeId,ProductID FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and  schId="+schId+" and BenSubBucketType in(1,5,2,6,3,7,10)", null);
		    String[] chkI = new String[cursor.getCount()];
		    try {
		     if(cursor.getCount()>0)
		     { 
		      
		      if (cursor.moveToFirst()) {
		       
		        for (int i = 0; i <= (cursor.getCount() - 1); i++) 
		        {
		         if(cursor.getString(0)!=null && cursor.getString(1)!=null && cursor.getString(2)!=null && cursor.getString(3)!=null)
		          {
		          chkI[i] = cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2)+"^"+cursor.getString(3)+"^"+cursor.getString(4)+"^"+ cursor.getString(5)+"^"+ cursor.getString(6)+"^"+ cursor.getString(7)+"^"+ cursor.getString(8);
		         }
		         cursor.moveToNext();
		        }
		      }
		     }

		    } finally {
		     cursor.close();
		     close();
		    }
		    return chkI;*/
		public String fnGetDistinctSchIdsAgainstStoreProduct(String StoreID,String ProductIdOnClicked,int schId)
		   {
		    open();
		    Cursor cursor = db.rawQuery("SELECT schSlbRowId,SchTypeId FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and  schId="+schId+" and BenSubBucketType in(1,5,2,6,3,7,10) and ProductID="+Integer.parseInt(ProductIdOnClicked), null);
		    String chkI = "";
		    try {
		     if(cursor.getCount()>0)
		     { 
		      
		      if (cursor.moveToFirst()) {
		       
		        for (int i = 0; i <= (cursor.getCount() - 1); i++) 
		        {
		         if(cursor.getString(0)!=null && cursor.getString(1)!=null)
		          {
		          chkI = cursor.getString(0)+"^"+cursor.getString(1);
		         }
		         cursor.moveToNext();
		        }
		      }
		     }

		    } finally {
		     cursor.close();
		     close();
		    }
		    return chkI;
		   }
	/*	public void fnDeleteRecordsAllRecordsForClickedProdoductId(String StoreID,String ProductIdOnClicked,String pdaOrderID)
		 {
			open();
		  db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and ProductID="+ Integer.parseInt(ProductIdOnClicked));
		  close();
		 }*/
    public void fnDeleteRecordsAllRecordsForClickedProdoductId(String StoreID,int ProductIdOnClicked,String pdaOrderID)
    {
        open();
        //db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and ProductID="+ Integer.parseInt(ProductIdOnClicked));
        db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and schId="+ ProductIdOnClicked);
        close();
    }
		
		public void fnDeleteProductDetailsFromReturnTables(String StoreID,String ProductIdOnClicked,String pdaOrderID)
		 {
			
			open();
			try
			{
				 db.execSQL("DELETE FROM tblStoreProductPhotoDetail WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and ProductID="+ Integer.parseInt(ProductIdOnClicked));
				db.execSQL("DELETE FROM tblStoreProdcutPurchaseDetails WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and ProdID='"+ ProductIdOnClicked+"'");
				  db.execSQL("DELETE FROM tblStoreReturnDetail WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and ReturnProductID="+ Integer.parseInt(ProductIdOnClicked));
			}
		 catch(Exception e)
		 {
			 
		 }
		finally {
		     close();
		    }
		  
		 }
		
		 public long fnsaveStoreProdcutPurchaseDetails(String IMEIno,String StoreID,String CatID,String ProdID, String TransDate,
			      int Stock, int OrderQty,
			    Double OrderVal, int FreeQty, Double DisVal,
			    int selProdIDForSampleQty, String ProductShortName, Double ProductRate,int Outstat,Double TaxRate,Double TaxValue, int StoreCatNodeId,String OrderIDPDA,int flgIsQuoteRateApplied,String distibutorID,int flgOrderType) {//String DisplayUnit
			   
			   String activeRid;
			   activeRid = GetActiveRouteID();
			   
			   
			   ContentValues initialValues = new ContentValues();

			   initialValues.put("IMEIno", IMEIno.trim());
			   initialValues.put("TransDate", TransDate.trim());
			   initialValues.put("StoreID", StoreID.trim());
			   initialValues.put("ProdID", ProdID.trim());
			   initialValues.put("Stock", Stock);
			   initialValues.put("OrderQty", OrderQty);
			   initialValues.put("OrderVal", OrderVal);
			   initialValues.put("FreeQty", FreeQty);
			   initialValues.put("DisVal", DisVal);

			   initialValues.put("Sstat", Outstat);
			   
			   initialValues.put("SampleQuantity", selProdIDForSampleQty);
			   
			   initialValues.put("ProductShortName", ProductShortName);
			   
			   initialValues.put("ProductPrice", ProductRate);
			   initialValues.put("RouteID", Integer.parseInt(activeRid));
			   initialValues.put("CatID", CatID.trim());
			   initialValues.put("TaxRate", TaxRate);
			   initialValues.put("TaxValue", TaxValue);
			   initialValues.put("StoreCatNodeId", StoreCatNodeId);
			   initialValues.put("OrderIDPDA", OrderIDPDA);
			   initialValues.put("flgIsQuoteRateApplied", flgIsQuoteRateApplied);
			 initialValues.put("distibutorID", distibutorID);
             initialValues.put("flgOrderType",flgOrderType);
			   //initialValues.put(Key_DisplayUnit, DisplayUnit);
			   
			   ////// System.out.println("inserting saveStoreTransac records..");
				/*// System.out.println("Abhinav Nitish Ankit New Printing Insert Store Id :"+StoreID);
				// System.out.println("Abhinav Nitish Ankit New Printing Insert ProdID Id :"+ProdID);
				// System.out.println("Abhinav Nitish Ankit New Printing Insert OrderQty :"+OrderQty);*/
			   return db.insert(DATABASE_TABLE_MAIN210, null, initialValues);
			  }
		 public void deleteStoreRecordFromtblStorePurchaseDetailsFromProductTrsaction(String storeID,String pdaOrderID)			
			{	
				open();
				db.execSQL("DELETE FROM tblStoreProdcutPurchaseDetails WHERE StoreID='"+ storeID +"' and OrderIDPDA='"+pdaOrderID+"'");
				close();
			}	


		 
		 public void deleteStoreRecordFromtblStorePurchaseDetailsFromProductTrsactionSingleProduct(String storeID,String pdaOrderID,String getPIdToremove)			
			{	
				open();
				db.execSQL("DELETE FROM tblStoreProdcutPurchaseDetails WHERE StoreID='"+ storeID +"' and OrderIDPDA='"+pdaOrderID+"' and ProdID='"+getPIdToremove+"'");
				close();
			}

    public long fnsavetblStoreProductAppliedSchemesBenifitsRecords(String StoreID,int ProdID,int schId, int schSlabId,int schSlbBuckId, double schSlabSubBucketValue,int schSubBucketValType,
                                                                   int schSlabSubBucketType, int BenifitRowID, int BenSubBucketType,
                                                                   int FreeProductID, double BenifitSubBucketValue, double BenifitMaxValue, double BenifitAssignedValue, double BenifitAssignedValueType, int BenifitDiscountApplied, String BenifitCouponCode,double per,double UOM,int WhatFinallyApplied,int schSlbRowId, int SchTypeId,String pdaOrderID,int flgAddOn,int isDiscountOnTotalAmount){
        //StoreID text not null,ProductID int not null,schId int not null,schSlabId integer not null,schSlbBuckId integer not null,schSlabSubBucketValue real not null,
        //schSubBucketValType integer not null,schSlabSubBucketType int not null,BenifitRowID integer not null,BenSubBucketType int null,FreeProductID int null,
        //BenifitSubBucketValue real null,BenifitMaxValue real null,BenifitAssignedValue real null,BenifitAssignedValueType int null,BenifitDiscountApplied int null,
        //BenifitCouponCode text null
        String activeRid;
        // activeRid = GetActiveRouteID();

        open();

        Cursor cur=db.rawQuery("Select schSlabId from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+StoreID+"' AND ProductID="+ProdID+" AND schId="+schId+" AND schSlabId="+schSlabId,null);
        if(cur!=null)
        {
            if(cur.getCount()>0)
            {
                if(cur!=null)
                {
                    cur.close();
                }
                close();
                return 1;
            }
        }
        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("ProductID", ProdID);
        initialValues.put("schId", schId);
        initialValues.put("schSlabId", schSlabId);
        initialValues.put("schSlbBuckId", schSlbBuckId);
        initialValues.put("schSlabSubBucketValue", schSlabSubBucketValue);
        initialValues.put("schSubBucketValType", schSubBucketValType);
        initialValues.put("schSlabSubBucketType", schSlabSubBucketType);
        initialValues.put("BenifitRowID", BenifitRowID);

        initialValues.put("BenSubBucketType", BenSubBucketType);

        initialValues.put("FreeProductID", FreeProductID);

        initialValues.put("BenifitSubBucketValue", BenifitSubBucketValue);

        initialValues.put("BenifitMaxValue", BenifitMaxValue);
        initialValues.put("BenifitAssignedValue", BenifitAssignedValue);
        initialValues.put("BenifitAssignedValueType", BenifitAssignedValueType);

        initialValues.put("BenifitDiscountApplied", BenifitDiscountApplied);
        initialValues.put("BenifitCouponCode", BenifitCouponCode);

        initialValues.put("PER", per);
        initialValues.put("UOM", UOM);
        initialValues.put("Sstat", 0);
        initialValues.put("schSlbRowId", schSlbRowId);
        initialValues.put("SchTypeId", SchTypeId);
        initialValues.put("WhatFinallyApplied", WhatFinallyApplied);
        initialValues.put("OrderIDPDA", pdaOrderID);
        initialValues.put("flgAddOn", flgAddOn);
        initialValues.put("isDiscountOnTotalAmount", isDiscountOnTotalAmount);

        // System.out.println("Save Data Save in Table 211");

        long xyx= db.insert(DATABASE_TABLE_Main211, null, initialValues);
        close();
        return xyx;
    }



    public String fnctnGetMaxAssignedBen8DscntApld1(String storeId,String pdaOrderID)
		   {
			  String discountValOnBen8apld1="";
		    open();
		  try
		  {
		    Cursor cursor=db.rawQuery("Select Max(BenifitAssignedValue),BenifitRowID  from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and OrderIDPDA='"+pdaOrderID+"' and BenSubBucketType='"+8+"' and BenifitDiscountApplied ='"+1+"' Limit 1", null);
		  
		  if(cursor.getCount()>0)
		  {
		   if(cursor.moveToFirst())
		   {
			   if(cursor.getString(0)==null)
			   {
				   discountValOnBen8apld1="";
			   }
			   else
			   {
				   discountValOnBen8apld1=cursor.getString(0)+"^"+cursor.getString(1);   
			   }
		    
		   }
		  }
		    
		  close();
		  }
		  catch(Exception e)
		  {
			  close();  
		  }
		  return discountValOnBen8apld1;
		   }
		   public String fnctnGetMaxAssignedBen8DscntApld2(String storeId,String pdaOrderID)
		   {
			   String discountValOnBen8apld1="";
			   try
				  {
		    open();
		   
		    Cursor cursor=db.rawQuery("Select Max(BenifitAssignedValue),BenifitRowID  from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and OrderIDPDA='"+pdaOrderID+"' and BenSubBucketType='"+8+"' and BenifitDiscountApplied ='"+2+"' Limit 1", null);
		  
		  if(cursor.getCount()>0)
		  {
		   if(cursor.moveToFirst())
		   {
		    //discountValOnBen8apld1=cursor.getString(0)+"^"+cursor.getString(1);
			   if(cursor.getString(0)==null)
			   {
				   discountValOnBen8apld1="";
			   }
			   else
			   {
				   discountValOnBen8apld1=cursor.getString(0)+"^"+cursor.getString(1);   
			   }
		    
		   }
		  }
		    
		  close();
				  }
				  catch(Exception e)
				  {
					  close();  
				  }
		  return discountValOnBen8apld1;
		   }
		   public String fnctnGetMaxAssignedBen9DscntApld1(String storeId,String pdaOrderID)
		   {
			   String discountValOnBen8apld1="";
		    open();
		   try
		   {
		    Cursor cursor=db.rawQuery("Select Max(BenifitAssignedValue),BenifitRowID  from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and OrderIDPDA='"+pdaOrderID+"' and BenSubBucketType='"+9+"' and BenifitDiscountApplied ='"+1+"' Limit 1", null);
		  
		  if(cursor.getCount()>0)
		  {
		   if(cursor.moveToFirst())
		   {
		    //discountValOnBen8apld1=cursor.getString(0)+"^"+cursor.getString(1);
			   if(cursor.getString(0)==null)
			   {
				   discountValOnBen8apld1="";
			   }
			   else
			   {
				   discountValOnBen8apld1=cursor.getString(0)+"^"+cursor.getString(1);   
			   }
		   }
		  }
		    
		  close();
			  }
			  catch(Exception e)
			  {
				  close();  
			  }
		  return discountValOnBen8apld1;
		   }
		   public String fnctnGetMaxAssignedBen9DscntApld2(String storeId,String pdaOrderID)
		   {
			   String discountValOnBen8apld1="";
			   try
			   {
		    open();
		   
		Cursor cursor=db.rawQuery("Select Max(BenifitAssignedValue),BenifitRowID  from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and OrderIDPDA='"+pdaOrderID+"' and BenSubBucketType='"+9+"' and BenifitDiscountApplied ='"+2+"' Limit 1", null);
		  
		  if(cursor.getCount()>0)
		  {
		   if(cursor.moveToFirst())
		   {
		   // discountValOnBen8apld1=cursor.getString(0)+"^"+cursor.getString(1);
			   if(cursor.getString(0)==null)
			   {
				   discountValOnBen8apld1="";
			   }
			   else
			   {
				   discountValOnBen8apld1=cursor.getString(0)+"^"+cursor.getString(1);   
			   }
		   }
		  }
		    
		   
		  close();
			  }
			  catch(Exception e)
			  {
				  close();  
			  }
		  return discountValOnBen8apld1;
		   }
		 
		 public String fnctnGetHighestDiscount(String freeProductId,String storeId,String benSubBucketType)
		   {
			 String highestDiscount="";
			 try
			 {
		    open();
		   
		    Cursor cursor=db.rawQuery("Select Distinct FreeProductID,Max(BenifitAssignedValue),BenSubBucketType from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and FreeProductID='"+freeProductId+"' and BenSubBucketType ='"+benSubBucketType+"' Limit 1", null);
		    if(cursor.getCount()>0)
		    {
		     if(cursor.moveToFirst())
		     {
		      highestDiscount=cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2);
		     }
		    }
		    
		    close();
			  }
			  catch(Exception e)
			  {
				  close();  
			  }
		    return highestDiscount;
		   }
		 public HashMap<String, String> fnctnSchemeStoreID(String storeID)
		   {
		    open();
		    //hmapSchemeStoreID= key = SchemeId  value=StoreId
		    HashMap<String, String> hmapSchemeStoreID= new HashMap<>();
		    //tblSchemeStoreMapping=StoreID text null,SchemeID text null
		    Cursor cursor=db.rawQuery("Select StoreID,SchemeID from tblSchemeStoreMapping where  StoreID ='"+storeID+"'",null);
		    
		    if(cursor.getCount()>0)
		    {
		     if(cursor.moveToFirst())
		     {
		      for(int index=0;index<cursor.getCount();index++)
		      {
		       hmapSchemeStoreID.put(cursor.getString(1), cursor.getString(0));
		       
		       cursor.moveToNext();
		      }
		     }
		    }
		    close();
		    return hmapSchemeStoreID;
		   }
		   
		   public ArrayList<HashMap<String, String>> fnctnSchemeSlabIdSchmVal()
		   {
		    open();
		   // tblSchemeSlabDetail (SchemeID text null,SchemeSlabID text null,SchemeSlabDesc text null,BenifitDescr text null);";
		    
		    ArrayList<HashMap<String, String>> arrayListSchemeSlabDteail= new ArrayList<>();
		    
		    //hmapSchmeSlabIdSchemeId= key =SchemeSlabId         value=SchemeID
		    HashMap<String, String> hmapSchmeSlabIdSchemeId= new HashMap<>();
		    //hmapSchmeSlabIdSchemeId= key =SchemeSlabId         value=SchemeSlabDes
		    HashMap<String, String> hmapSchmeSlabIdSlabDes= new HashMap<>();
		    //hmapSchmeSlabIdSchemeId= key = SchemeSlabId        value=BenifitDescription
		    HashMap<String, String> hmapSchmeSlabIdBenifitDes= new HashMap<>();
		    Cursor cursor=db.rawQuery("Select * from tblSchemeSlabDetail", null);
		    if(cursor.getCount()>0)
		    {
		     if(cursor.moveToFirst())
		     {
		      for(int i=0;i<cursor.getCount();i++)
		      {
		       hmapSchmeSlabIdSchemeId.put(cursor.getString(1), cursor.getString(0));
		       hmapSchmeSlabIdSlabDes.put(cursor.getString(1), cursor.getString(2));
		       hmapSchmeSlabIdBenifitDes.put(cursor.getString(1), cursor.getString(3));
		       
		       cursor.moveToNext();
		      }
		      
		      arrayListSchemeSlabDteail.add(hmapSchmeSlabIdSchemeId);
		      arrayListSchemeSlabDteail.add(hmapSchmeSlabIdSlabDes);
		      arrayListSchemeSlabDteail.add(hmapSchmeSlabIdBenifitDes);
		      
		     }
		    }
		    close();
		    return arrayListSchemeSlabDteail;
		   }
		   public String fnctnGetHighestDiscountPercentge(String freeProductId,String storeId)
		   {
		    open();
		    String highestDiscount="";
		  //  Cursor cursor=db.rawQuery("Select  Max(BenifitAssignedValue),BenifitRowID from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and FreeProductID='"+freeProductId+"' and BenSubBucketType in (2,6) Limit 1", null);
               Cursor cursor=db.rawQuery("Select  Max(BenifitAssignedValue),BenifitRowID,isDiscountOnTotalAmount from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and FreeProductID='"+freeProductId+"' and flgAddOn=0 and BenSubBucketType in (2,6) Limit 1", null);
		     try {
				    if(cursor.getCount()>0)
				    {
				     if(cursor.moveToFirst())
				     {
				      //highestDiscount=cursor.getString(0)+"^"+cursor.getString(1);
				    	 if(cursor.getString(0)==null)
						   {
				    		 highestDiscount="";
						   }
						   else
						   {
							   highestDiscount=cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2);;
						   }
				     }
				    }
				    close();
		    } catch (Exception ex) {
		    	close();
			     Log.e(TAG, ex.toString());
			 }
		    
		   
		    return highestDiscount;
		   }
		   
		   
		   public String[] fnGetAllSchSlabbasedOnSchemeID(String SchemeID) 
		   {
		          open();
		    Cursor cursorE2 = db.rawQuery("SELECT DISTINCT SchemeSlabID FROM tblSchemeSlabDetail WHERE SchemeID ='"
		        + SchemeID + "'", null);
		    String AllSchemeSlabID[] = new String[cursorE2.getCount()];
		    
		    try {
		          if(cursorE2.getCount()>0)
		            {
		        if (cursorE2.moveToFirst())
		        {
		     
		         for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
		         {
		          AllSchemeSlabID[i] = (String) cursorE2.getString(0);
		          cursorE2.moveToNext();
		          //cursor.moveToNext();
		         }
		        }
		      }
		       return AllSchemeSlabID;
		    } finally {
		     cursorE2.close();
		     close();
		    }

		   }
		   
		   public String fnctnGetHighestDiscountAmount(String freeProductId,String storeId)
		   {
		    open();
		    String highestDiscount="";
		   // Cursor cursor=db.rawQuery("Select  Max(BenifitAssignedValue),BenifitRowID from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and ProductID='"+freeProductId+"' and BenSubBucketType in (3,7,10) Limit 1", null);
               Cursor cursor=db.rawQuery("Select  Max(BenifitAssignedValue),BenifitRowID,isDiscountOnTotalAmount from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and ProductID='"+freeProductId+"' and flgAddOn=0 and BenSubBucketType in (3,7,10) Limit 1", null);
               try {
				    if(cursor.getCount()>0)
				    {
					     if(cursor.moveToFirst())
					     {
					      //highestDiscount=cursor.getString(0)+"^"+cursor.getString(1);
					    	 if(cursor.getString(0).equals(null))
							   {
					    		 highestDiscount="";
							   }
							   else
							   {
								   highestDiscount=cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2);;
							   }
					     }
				    }
		     close();
		    } catch (Exception ex) {
		    	close();
			     Log.e(TAG, ex.toString());
			 }
		    
		    
		    
		    return highestDiscount;
		   }
		   
		   public void updatewhatAppliedFlag(int flag,String storeId,int benifitrRowId,String pdaOrderID) {

		    try {
		     
		     

		     final ContentValues values = new ContentValues();
		     values.put("WhatFinallyApplied", flag);
		     int affected = db.update(DATABASE_TABLE_Main211, values, "StoreID=? AND BenifitRowID=? AND OrderIDPDA=? ",new String[] { storeId,""+benifitrRowId,pdaOrderID });
		       
		     
		     

		    } catch (Exception ex) {
		     Log.e(TAG, ex.toString());
		    }

		   }
		   
		   public String fnctnGetfreePerUnitVol(String freeProductId,String storeId)
		   {
		    open();
		    String perUnit="";
		    Cursor cursor=db.rawQuery("Select  Per,UOM from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and ProductID='"+freeProductId+"' and BenSubBucketType = '"+10+"' ", null);
		    if(cursor.getCount()>0)
		    {
		     if(cursor.moveToFirst())
		     {
		      //highestDiscount=cursor.getString(0)+"^"+cursor.getString(1);
		    	 if(cursor.getString(0)==null)
				   {
		    		 perUnit="";
				   }
				   else
				   {
					   perUnit=cursor.getString(0)+"^"+cursor.getString(1);   
				   }
		     }
		    }
		    
		    close();
		    return perUnit;
		   }
		   
		   public String[] fnGetProductsAgainstBenifitTable(String StoreID,String ProdId) 
		     {
		            open();
		      Cursor cursorE2 = db.rawQuery("SELECT FreeProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+StoreID+"' and ProductID='"+ProdId+"'", null);
		      String AllSchemeSlabID[] = new String[cursorE2.getCount()];
		      
		      try {
		            if(cursorE2.getCount()>0)
		              {
		          if (cursorE2.moveToFirst())
		          {
		       
		           for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
		           {
		            AllSchemeSlabID[i] = (String) cursorE2.getString(0);
		            cursorE2.moveToNext();
		            //cursor.moveToNext();
		           }
		          }
		        }
		         return AllSchemeSlabID;
		      } finally {
		       cursorE2.close();
		       close();
		      }

		     }
		   
		   public int fnGetSlabIdBasedOnPrdIDSchmId(String StoreID,String ProdId,int SchID) 
		     {
		            open();
		      Cursor cursorE2 = db.rawQuery("SELECT schSlabId FROM  tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+StoreID+"' and ProductID='"+ProdId+"' and schId="+SchID, null);
		      int AllSchemeSlabID = 0;
		      
		      try {
		            if(cursorE2.getCount()>0)
		              {
		          if (cursorE2.moveToFirst())
		          {
		       
		          
		            AllSchemeSlabID = (Integer.parseInt(cursorE2.getString(0)));
		          
		          
		          }
		        }
		         return AllSchemeSlabID;
		      } finally {
		       cursorE2.close();
		       close();
		      }

		     }
		   
		   public int fnGetStoreCatNodeId(String StoreID) 
		     {
		      Cursor cursorE2 = db.rawQuery("SELECT StoreType FROM  tblStoreList where StoreID='"+StoreID+"'", null);
		      int StoreCatNodeId = 0;
		      //open();
		      try {
		            if(cursorE2.getCount()>0)
		              {
		          if (cursorE2.moveToFirst())
		          {
		       
		          
		        	  StoreCatNodeId = (Integer.parseInt(cursorE2.getString(0)));
		          
		          
		          }
		        }
		         return StoreCatNodeId;
		      } finally {
		       cursorE2.close();
		     //  close();
		       
		      }

		     }
		   
		   public int fnGetRowIDBasedOnSchIDAndSlabID(int SchID,int slabSchmId) 
		     {
			   //tblSchemeSlabBenefitsBucketDetails
			  // [11:23:51 PM] Abhinav Raj: RowID
			   //[11:23:58 PM] Abhinav Raj: SchemeID text null,SchemeSlabID
		            open();
		      Cursor cursorE2 = db.rawQuery("SELECT BenifitRowID FROM  tblSchemeSlabBenefitsBucketDetails where  SchemeID='"+SchID+"' and SchemeSlabID="+slabSchmId, null);
		      int AllSchemeSlabID = 0;
		      
		      try {
		            if(cursorE2.getCount()>0)
		              {
		          if (cursorE2.moveToFirst())
		          {
		       
		          
		            AllSchemeSlabID = (Integer.parseInt(cursorE2.getString(0)));
		          
		          
		          }
		        }
		         return AllSchemeSlabID;
		      } finally {
		       cursorE2.close();
		       close();
		      }

		     }
		     
		     public String[] fnGetProductsSchIdSlabRow(String StoreID,int RowID,String pdaOrderID) 
		     {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
		            open();//schId
		     // Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
		            Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID +"  and StoreID='"+StoreID+"' and OrderIDPDA='"+pdaOrderID+"'", null);
		      String AllProductInSlab[] = new String[cursorE2.getCount()];
		      
		      try {
		            if(cursorE2.getCount()>0)
		              {
		          if (cursorE2.moveToFirst())
		          {
		       
		           for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
		           {
		            AllProductInSlab[i] = (String) cursorE2.getString(0);
		            cursorE2.moveToNext();
		            //cursor.moveToNext();
		           }
		          }
		        }
		         return AllProductInSlab;
		      } finally {
		       cursorE2.close();
		       close();
		      }

		     }
		     public String[] fnGetProductsSchIds(String StoreID,int schID,String pdaOrderID) 
		     {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
		            open();//schIdsd
		          //  ssd
		     // Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
		            Cursor cursorE2 = db.rawQuery("SELECT ProductID,schSlbRowId,BenifitAssignedValue,FreeProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schId="+schID +"  and StoreID='"+StoreID+"' and OrderIDPDA='"+pdaOrderID+"'", null);
		      String AllProductInSlab[] = new String[cursorE2.getCount()];
		      
		      try {
		            if(cursorE2.getCount()>0)
		              {
		          if (cursorE2.moveToFirst())
		          {
		       
		           for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
		           {
		            AllProductInSlab[i] = (String) cursorE2.getString(0) +"^"+(String) cursorE2.getString(1) +"^"+(String) cursorE2.getString(2) +"^"+(String) cursorE2.getString(3);
		            cursorE2.moveToNext();
		            //cursor.moveToNext();
		           }
		          }
		        }
		         return AllProductInSlab;
		      } finally {
		       cursorE2.close();
		       close();
		      }

		     }
		     public void fnDeleteOldSchemeRowIdRecords(String StoreID,int RowID,String pdaOrderID)
			 {
				open();
			  db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords where  StoreID='"+StoreID+"' and OrderIDPDA='"+pdaOrderID+"' and schSlbRowId="+RowID);
			  close();
			 }
		     
		     public void fnDeleteOldStoreProductAppliedSchemesBenifitsRecordsWhileSubmit(String StoreID,String pdaOrderID)
			 {
				open();
			  db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords where OrderIDPDA='"+pdaOrderID+"'  and StoreID='"+StoreID+"'");
			  close();
			 }
		     
		     public String[] fnGetRowsIDsAgainstProdIs(String StoreID,int schId) 
		     {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
		            open();//schId
		     // Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
		            Cursor cursorE2 = db.rawQuery("SELECT BenifitRowID,BenSubBucketType,schSlbRowId,BenifitAssignedValue,FreeProductID,SchTypeId,ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where  StoreID='"+StoreID+"' and schId="+schId, null);
		      String AllProductInSlab[] = new String[cursorE2.getCount()];
		      
		      try {
		            if(cursorE2.getCount()>0)
		              {
		          if (cursorE2.moveToFirst())
		          {
		       
		           for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
		           {
		            AllProductInSlab[i] = (String) cursorE2.getString(0) +"^" +(String) cursorE2.getString(1) +"^"+(String) cursorE2.getString(2) +"^" +(String) cursorE2.getString(3) +"^" +(String) cursorE2.getString(4) +"^" +(String) cursorE2.getString(5) +"^" +(String) cursorE2.getString(6);
		            cursorE2.moveToNext();
		            //cursor.moveToNext();
		           }
		          }
		        }
		         return AllProductInSlab;
		      } finally {
		       cursorE2.close();
		       close();
		      }

		     }
		     
		     public String dbfunctiongetProdMapedWithBenifitRowID(int benifitRowID,int ClickedProID) 
		     {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
		            open();//schId
		            //tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
		     // Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
		           Cursor cursorE2 = db.rawQuery("SELECT tblStoreProductAppliedSchemesBenifitsRecords.ProductID,tblStoreProductAppliedSchemesBenifitsRecords.FreeProductID FROM  tblSchemeSlabBenefitsProductMappingDetail inner join tblStoreProductAppliedSchemesBenifitsRecords on tblSchemeSlabBenefitsProductMappingDetail.RowID=tblStoreProductAppliedSchemesBenifitsRecords.BenifitRowID  where  tblSchemeSlabBenefitsProductMappingDetail.RowID='"+benifitRowID+"'", null);
		            String AllProductInSlab = "";
				      try {
				            if(cursorE2.getCount()>0)
				              {
				          if (cursorE2.moveToFirst())
				          {
				       
				           for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
				           {
				            AllProductInSlab = (String) cursorE2.getString(0) +"^"+(String) cursorE2.getString(1);
				            cursorE2.moveToNext();
				            //cursor.moveToNext();
				           }
				          }
				        }
				         return AllProductInSlab;
				      } finally {
				       cursorE2.close();
				       close();
				      }

		     }
		     
		     public String dbfunctiongetProdMapedWithBenifitRowID2(int benifitRowID,int ClickedProID) 
		     {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
		            open();//schId
		            //tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
		     // Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
		           Cursor cursorE2 = db.rawQuery("SELECT ProductID,FreeProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where BenifitRowID='"+benifitRowID+"'", null);
		            String AllProductInSlab = "";
				      try {
				            if(cursorE2.getCount()>0)
				              {
				          if (cursorE2.moveToFirst())
				          {
				       
				           for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
				           {
				            AllProductInSlab = (String) cursorE2.getString(0) +"^"+(String) cursorE2.getString(1);
				            cursorE2.moveToNext();
				            //cursor.moveToNext();
				           }
				          }
				        }
				         return AllProductInSlab;
				      } finally {
				       cursorE2.close();
				       close();
				      }

		     }
		     
		     public String[] fnGetDistinctProductIdAgainstStoreProduct(String StoreID,String schmIdForProductsavdInRecord,String pdaOrderID)
		     {
		      open();
		    //  Cursor cursor = db.rawQuery("SELECT BenSubBucketType,ProductID,BenifitAssignedValue,BenifitDiscountApplied,IFNULL(BenifitCouponCode,0),schId,schSlbRowId,SchTypeId FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and  OrderIDPDA='"+pdaOrderID+"' and  schId="+ schmIdForProductsavdInRecord +" and BenSubBucketType in(10)", null);
                 Cursor cursor = db.rawQuery("SELECT BenSubBucketType,ProductID,BenifitAssignedValue,BenifitDiscountApplied,IFNULL(BenifitCouponCode,0),schId,schSlbRowId,SchTypeId FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and  OrderIDPDA='"+pdaOrderID+"' and  schId="+ schmIdForProductsavdInRecord +" and BenSubBucketType in(10)", null);
		       String[] chkI = new String[cursor.getCount()];
		      try {
		       if(cursor.getCount()>0)
		       { 
		        
		        if (cursor.moveToFirst()) {
		         
		          for (int i = 0; i <= (cursor.getCount() - 1); i++) 
		          {
		           if(cursor.getString(0)!=null && cursor.getString(1)!=null && cursor.getString(2)!=null && cursor.getString(3)!=null)
		            {
		            chkI[i] = cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2)+"^"+cursor.getString(3)+"^"+cursor.getString(4)+"^"+ cursor.getString(5)+"^"+ cursor.getString(6)+"^"+ cursor.getString(7);
		           }
		           cursor.moveToNext();
		          }
		        }
		       }

		      } finally {
		       cursor.close();
		       close();
		      }
		      return chkI;
		     }
		     
		     public String[] fnctnGetBensubBucket10Column(String schmId,String storeId,String pdaOrderID)
		       {
		        open();
		        Cursor cursor=db.rawQuery("Select ProductID,FreeProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where StoreID='"+storeId+"' and schId='"+schmId+"' and OrderIDPDA='"+pdaOrderID+"' and BenSubBucketType in(1,10)", null);
		        try{
		        String[] productIdBen10=new String[cursor.getCount()];
		        if(cursor.getCount()>0)
		        {
		         if(cursor.moveToFirst())
		          {
		          
		          for(int index=0;index<cursor.getCount();index++)
		           {
		           productIdBen10[index]=cursor.getString(0)+"^"+cursor.getString(1);
		           //updateBensubBucket10Col(storeId,schmId, ((productIdBen10[index]).split(Pattern.quote("^")))[0],"10");
		           cursor.moveToNext();
		           }
		         }
		         
		         
		        }
		        
		        return productIdBen10;
		        } 
		          finally
		          {
		           cursor.close();
		             close(); 
		          }
		       }
		     
		     public void updateBensubBucket10Col(String storeId,String schemeId,String productId,String benSubBucketType)
		       {
		        final ContentValues values = new ContentValues();
		        values.put("BenifitAssignedValue", 0.0);
		       
		        
		        
		        int affected = db.update(DATABASE_TABLE_Main211, values, "StoreID=? AND schId=? AND ProductID=? AND BenSubBucketType=?",new String[] {storeId,schemeId,productId,benSubBucketType});
		       }
		     
		     public void deleteUnRequiredRecordsFromTablesAfterCase() {
open();
		 		db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE Sstat ="+ 4);
		 		
close();
		 	}
		     
		     
		     public int fectRowIdBasedOnSchIDSlabID(int SchID,int SchemeSlabID) 
			  {
				open();
			   Cursor cursor = db.rawQuery("SELECT RowID FROM tblSchemeSlabBucketDetails WHERE SchemeID="+SchID+" and SchemeSlabID ="+ SchemeSlabID +" and SlabSubBucketType=5" , null);
			   try {
			    int CompleteResult = 0;
			    if (cursor.getCount() > 0) {
			     if (cursor.moveToFirst()) {
			      for (int i = 0; i <= (cursor.getCount() - 1); i++) {
			       CompleteResult = Integer.parseInt(cursor.getString(0));
			       cursor.moveToNext();
			      }
			     }
			    }
			    return CompleteResult;

			   } finally {
			    cursor.close();
			    close();
			   }

			  }
		     
		     public String[] fectProdIDBasedOnRowIDOfProductsPurchased(int sclSlabRowID) 
			  {
				open();
			   Cursor cursor = db.rawQuery("SELECT ProductID FROM tblSchemeSlabBucketProductMapping WHERE RowID="+sclSlabRowID , null);
			   try {
			    String CompleteResult[] = new String[cursor.getCount()];
			    if (cursor.getCount() > 0) {
			     if (cursor.moveToFirst()) {
			      for (int i = 0; i <= (cursor.getCount() - 1); i++) {
			       CompleteResult[i] = (String) cursor.getString(0);
			       cursor.moveToNext();
			      }
			     }
			    }
			    return CompleteResult;

			   } finally {
			    cursor.close();
			    close();
			   }

			  }
		     public int fnGetStatValueagainstStore(String StoreID)
		     {
		    	 open();
				   Cursor cursor = db.rawQuery("SELECT Sstat FROM tblStoreList WHERE StoreID='"+StoreID+"'" , null);
				   try {
				    int Sstat =0;
				    if (cursor.getCount() > 0) {
				     if (cursor.moveToFirst()) {
				      
				    	 Sstat = Integer.parseInt(cursor.getString(0));
				      
				     }
				    }
				    return Sstat;

				   } finally {
				    cursor.close();
				    close();
				   }

		     }
		     
		    
		     
		     
		     public void updateReturnData(HashMap<String, String> hmapReturnData,String OrderPDAID,HashMap<String, String> hmapRemark)
	         {
	        open();
	        String routeID;
	        String storeID;
	        String returnProductID;
	        String prodReturnQty;
	        String prodReturnReason;
	        String prodReturnReasonIndex;
	        String returnDate ;
	       // String _outstat;
	        int Sstat=0;
	   
	        
	        for (Map.Entry<String, String> entry : hmapReturnData.entrySet()) {
	        
	         returnProductID=entry.getKey();
	         routeID=(entry.getValue().split(Pattern.quote("~")))[0];
	         storeID=(entry.getValue().split(Pattern.quote("~")))[1];
	         if((entry.getValue().split(Pattern.quote("~")))[2].equals(""))
	         {
	        	 prodReturnQty="0";
	         }
	         else
	         {
	        	 prodReturnQty=(entry.getValue().split(Pattern.quote("~")))[2];
	         }
	        
	         prodReturnReason=hmapRemark.get(returnProductID);
	         prodReturnReasonIndex=(entry.getValue().split(Pattern.quote("~")))[4];
	         returnDate=(entry.getValue().split(Pattern.quote("~")))[5];
	        // _outstat=(entry.getValue().split(Pattern.quote("~")))[6];
	        
	         Cursor cursor = db.rawQuery("SELECT RouteID FROM tblStoreReturnDetail where StoreID='"+storeID +"' and ReturnProductID ='"+ returnProductID +"' and OrderIDPDA='"+OrderPDAID+"'" , null);
	         // System.out.println("NitishReturn "+cursor.getCount());
	         ContentValues initialValues = new ContentValues();
	         // StoreID ,ProductID ,ClickedDateTime ,PhotoName ,PhotoValidation ,PDAPhotoPath ,outstat 
	         initialValues.put("RouteID", routeID.trim()); 
	       initialValues.put("ReturnProductID", returnProductID.trim());
	       initialValues.put("StoreID", storeID.trim());
	       
	         initialValues.put("ProdReturnQty", prodReturnQty.trim()); 
	         
	         initialValues.put("ProdReturnReason", prodReturnReason.trim());
	         initialValues.put("ProdReturnReasonIndex", prodReturnReasonIndex.trim());
	         initialValues.put("ReturnDate", returnDate.trim());
	         initialValues.put("Sstat", Sstat);
	         initialValues.put("OrderIDPDA", OrderPDAID);
	         if(cursor.getCount()>0)
	         {
	        
	        // System.out.println("Return update is called :"+ routeID+":"+storeID+":"+returnProductID+":"+prodReturnQty+":"+prodReturnReason+":"+ prodReturnReasonIndex+":"+returnDate);
	        int affected = db.update(DATABASE_TABLE_Main213, initialValues, "StoreID=? AND ReturnProductID=? AND OrderIDPDA=? ",new String[] {storeID,returnProductID,OrderPDAID});  
	        
	       
	         }
	         else 
	         {
	        // System.out.println("Return insert is called :"+ routeID+":"+storeID+":"+returnProductID+":"+prodReturnQty+":"+prodReturnReason+":"+ prodReturnReasonIndex+":"+returnDate);
	         db.insert(DATABASE_TABLE_Main213, null, initialValues); 
	         }
	        
	        }
	       close();
	         }
		     
		     private HashMap<String, String> getRtrnOrderQtyReason(String storeID, String OrderPDAID)
		     {
		      HashMap<String, String> hmapPrdctIdPrdctRtrnQtyReason= new HashMap<>();
		      //ReturnProductID text null, ProdReturnQty text null, ProdReturnReason 
		      Cursor cursor = db.rawQuery("SELECT ReturnProductID,ProdReturnQty,ProdReturnReasonIndex FROM tblStoreReturnDetail where StoreID='"+storeID+"' and OrderIDPDA='"+OrderPDAID+"'",null);
		      String rtrnQty=null;
		      // System.out.println("Return Cursor storeId"+storeID);
		      // System.out.println("Return Cursor"+cursor.getCount());
		      try
		      {
		       if(cursor.getCount()>0)
		       {
		        if (cursor.moveToFirst()) {

		         for (int i = 0; i < cursor.getCount(); i++) {
		          
		          
		          hmapPrdctIdPrdctRtrnQtyReason.put(cursor.getString(0), cursor.getString(1) +"^"+cursor.getString(2));
		         
		          
		          cursor.moveToNext();
		          // cursor.close();
		         }
		        
		        }
		       }
		       else
		       {
		        hmapPrdctIdPrdctRtrnQtyReason.put("No Product", "Thankyou");
		       }
		       
		      
		       return hmapPrdctIdPrdctRtrnQtyReason;
		      } finally {
		       cursor.close();
		       
		      
		      }
		     }
		     
		     private HashMap<String, String> getProductStockList(String StoreID, String OrderPDAID)
		       {
		      
		      //hmapCtgryPrdctDetail= key=prdctId,val=Stock
		      HashMap<String, String> hmapPrdctIdPrdctStock= new HashMap<>();
		        Cursor cursor = db.rawQuery("SELECT ProdID,Stock From tblStoreProdcutPurchaseDetails where StoreID='"+StoreID+"' and OrderIDPDA='"+OrderPDAID+"'" , null);
		        try {
		         String CompleteResult[] = new String[cursor.getCount()];
		         if (cursor.getCount() > 0) {
		          if (cursor.moveToFirst()) {
		           for (int i = 0; i <= (cursor.getCount() - 1); i++) {
		            hmapPrdctIdPrdctStock.put(cursor.getString(0), cursor.getString(1));
		            cursor.moveToNext();
		           }
		          }
		         }
		         return hmapPrdctIdPrdctStock;

		        } finally {
		         cursor.close();
		         
		        }
		       }
		     
		     public ArrayList<HashMap<String, String>> fetch_catgry_prdctReturnData(String storeId,String OrderPDAID) {
		    	 // System.out.println("Abhinav Raj is 2");
		      open();
		      ArrayList<HashMap<String, String>> totalProductDetail= new ArrayList<>(4);
		      //hmapCtgryPrdctDetail= key=prdctId,val=CategoryID
		      HashMap<String, String> hmapCtgryPrdctDetail= new HashMap<>();
		      
		      //hmapCtgryPrdctDetail= key=prdctId,val=ProductName
		      HashMap<String, String> hmapPrdctIdPrdctName= new HashMap<>();
		      //hmapCtgryPrdctDetail= key=prdctId,val=Stock
		      HashMap<String, String> hmapPrdctIdPrdctStock= new HashMap<>();
		         
		      //hmapCtgryPrdctDetail= key=prdctId,val=ProductRtrnQty,Reason
		      HashMap<String, String> hmapPrdctIdPrdctRtrnQtyReason= new HashMap<>();
		        
		      hmapPrdctIdPrdctRtrnQtyReason=getRtrnOrderQtyReason(storeId,OrderPDAID);
		      hmapPrdctIdPrdctStock=getProductStockList(storeId,OrderPDAID);
		      
		      //Cursor cursor = db.rawQuery("SELECT ProductID,CategoryID,ProductShortName FROM tblProductList",null);
		      Cursor cursor = db.rawQuery("SELECT ProductID,CategoryID,tblProductList.ProductShortName,tblStoreProdcutPurchaseDetails.Stock FROM tblProductList inner join tblStoreProdcutPurchaseDetails on tblProductList.ProductID=tblStoreProdcutPurchaseDetails.ProdID Where tblStoreProdcutPurchaseDetails.Stock>0 and StoreID='"+storeId+"' and OrderIDPDA='"+OrderPDAID+"' order by CategoryID,ProductID",null);
			      try
		      {
		       if(cursor.getCount()>0)
		       {
		        if (cursor.moveToFirst()) {

		         for (int i = 0; i < cursor.getCount(); i++) {
		          hmapCtgryPrdctDetail.put(cursor.getString(0), cursor.getString(1));
		          
		          hmapPrdctIdPrdctName.put(cursor.getString(0), cursor.getString(2));
		          hmapPrdctIdPrdctStock.put(cursor.getString(0), cursor.getString(3));
		          cursor.moveToNext();
		          // cursor.close();
		         }
		         totalProductDetail.add(0,hmapCtgryPrdctDetail);
		         totalProductDetail.add(1,hmapPrdctIdPrdctName);
		         totalProductDetail.add(2,hmapPrdctIdPrdctRtrnQtyReason);
		         totalProductDetail.add(3,hmapPrdctIdPrdctStock);
		         
		        }
		       }
		       
		      
		       return totalProductDetail;
		      } finally {
		       cursor.close();
		       
		       close();
		      }
		      
		      
		     }
		     
		     public void UpdateCancelStoreFlag(HashMap<String, String> hmapConfirmCancel,int isCancelConfirm)
       {
        open();
      
         {
         for(Map.Entry<String, String> dataEntry : hmapConfirmCancel.entrySet()){
          
         // // System.out.println("Update tblInvoiceButtonTransac Set flgCancel='"+isCancelConfirm+"' and Sstat="+dataEntry.getValue()+" WHERE OrderID='"+dataEntry.getKey()+"'");
           // db.execSQL("Update tblInvoiceButtonTransac Set flgCancel='"+isCancelConfirm+"' and Sstat="+dataEntry.getValue()+" WHERE OrderID='"+dataEntry.getKey()+"'");
         
      final ContentValues values = new ContentValues();
      if(Integer.parseInt(dataEntry.getValue())==10)
      {
       values.put("Sstat", 9);
      }
      else
      {
      values.put("Sstat", dataEntry.getValue());
      }
      values.put("flgCancel", isCancelConfirm);
               ////// System.out.println("Updating Status for Store ID: " + sID);
      //int affected = db.update("tblInvoiceButtonStoreMstr", values, "StoreID=? AND RouteId=? AND DistId=? AND InvoiceForDate=?",new String[] { sID,RouteId,DistId,Invdate });
      
      int affected = db.update("tblInvoiceButtonStoreMstr", values, "OrderID=?",new String[] { dataEntry.getKey() });
      int affected2 = db.update("tblInvoiceButtonTransac", values, "OrderID=?",new String[] { dataEntry.getKey() });
      
      //int affected2 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
      //int affected1 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
      
            }
        
       //  9,1

     close();
         
         }
       

       }
		     
		     public void UpdateProductCancelStoreFlag(String orderId,int isCancelConfirm)
		     {
		    	 open();
		    
		       {
		    	 
		    		 // // System.out.println("Update tblInvoiceButtonTransac Set flgCancel='"+isCancelConfirm+"' and Sstat="+dataEntry.getValue()+" WHERE OrderID='"+dataEntry.getKey()+"'");
		    		   // db.execSQL("Update tblInvoiceButtonTransac Set flgCancel='"+isCancelConfirm+"' and Sstat="+dataEntry.getValue()+" WHERE OrderID='"+dataEntry.getKey()+"'");
		    			
						final ContentValues values = new ContentValues();
						values.put("Sstat", "9");
						values.put("flgCancel", isCancelConfirm);
			            ////// System.out.println("Updating Status for Store ID: " + sID);
						//int affected = db.update("tblInvoiceButtonStoreMstr", values, "StoreID=? AND RouteId=? AND DistId=? AND InvoiceForDate=?",new String[] { sID,RouteId,DistId,Invdate });
						
						int affected = db.update("tblInvoiceButtonStoreMstr", values, "OrderID=?",new String[] { orderId });
						int affected2 = db.update("tblInvoiceButtonTransac", values, "OrderID=?",new String[] { orderId });
						
						
						
						//int affected2 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
						//int affected1 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
						
		       
		    	 
		    	//  9,1

		   close();
		       
		       }
		     

		     }
		     
		     
		     
		     
		     
		    // change by Abhnav Sir 
		     
		     
		     
		     public int fnCountToDisplayDailySummaryDetailsSKUWise(int DraftorNonSubmitted)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
		     {
		    	 int CountToDisplayDailySummaryDetailsSKUWise=0;
		    	 //ArrayList<HashMap<String, String>> totalProductDetail=new ArrayList<HashMap<String, String>>(4);
		    	 
		    	 //Getting Category Details Starts Here
		    	
					open();
				   Cursor cursor = db.rawQuery("Select Count(tblCatagoryMstr.CategoryID) from tblCatagoryMstr inner join tblStoreProdcutPurchaseDetails on tblCatagoryMstr.CategoryID=tblStoreProdcutPurchaseDetails.CatID Where (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted , null);
				   try {
				    if (cursor.getCount() > 0) {
				     if (cursor.moveToFirst()) {
				    	 CountToDisplayDailySummaryDetailsSKUWise=Integer.parseInt(cursor.getString(0));
				     }
				    }
				   return CountToDisplayDailySummaryDetailsSKUWise;
				   } finally {
				    cursor.close();
				    close();
				   }
				 
		     }
		     
		     @SuppressWarnings("unchecked")
			public LinkedHashMap<String, String> fnGetDailySummaryDetailsSKUWiseCategoryLevel(int DraftorNonSubmitted)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
		     {
		    	 ArrayList<Object> totalCategoryWiseResult= new ArrayList<>(11);
		    	 
		    	 //Getting Category Details Starts Here
		    	 
		    	LinkedHashMap<String, String> hmapSKUWiseDailySummaryReport= new LinkedHashMap<>();
		    	 
		    	LinkedHashMap<String, String> hmapGrandTotalCategorySKUWiseDailySummaryReport= new LinkedHashMap<>();
		    	 
		    	 String CompleteResult[]=null;
		    	 
		    	 String strGrandTotalDiscValue="";
				 String strGrandTotalAmountBeforeTax="";
				 String strGrandTotalTaxValue="";
				 String strGrandTotalOrderValue="";
		    	//tblStoreProdcutPurchaseDetails (IMEIno text not null,RouteID int null,StoreID text not null,CatID text  null,ProdID text not null,TransDate string not null,Stock integer not null,OrderQty integer not null,OrderVal real not null,FreeQty integer not null,DisVal real not null,Sstat integer not null,SampleQuantity int null,ProductShortName text null,ProductPrice real null, TaxRate real null,TaxValue real null,StoreCatNodeId int null,OrderIDPDA text null,flgIsQuoteRateApplied int null);";
					open();
				 //  Cursor cursor = db.rawQuery("Select tblCatagoryMstr.CategoryID,tblCatagoryMstr.CategoryDescr,Count(Distinct tblStoreProdcutPurchaseDetails.StoreID) As StoreCount,1 AS FlgRowType  from tblCatagoryMstr inner join tblStoreProdcutPurchaseDetails on tblCatagoryMstr.CategoryID=tblStoreProdcutPurchaseDetails.CatID Where (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+" Group By tblCatagoryMstr.CategoryID,tblCatagoryMstr.CategoryDescr" , null);
					//or tblStoreProdcutPurchaseDetails.Stock>0
					 Cursor cursor = db.rawQuery("Select tblCatagoryMstr.CategoryID,tblCatagoryMstr.CategoryDescr,Count(Distinct tblStoreProdcutPurchaseDetails.StoreID) As StoreCount,1 AS FlgRowType  from tblCatagoryMstr inner join tblStoreProdcutPurchaseDetails on tblCatagoryMstr.CategoryID=tblStoreProdcutPurchaseDetails.CatID Where (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+" Group By tblCatagoryMstr.CategoryID,tblCatagoryMstr.CategoryDescr Order by tblCatagoryMstr.CatOrdr" , null);
					  
					try {
				    if (cursor.getCount() > 0) {
				    	//CompleteResult = new String[cursor.getCount()];
				     if (cursor.moveToFirst()) {
				      for (int i = 0; i <= (cursor.getCount() - 1); i++) {
				    	  ArrayList<Object> arrProductDailySummaryKUWiseReportWithCategory=fnGetDailySummaryDetailsSKUWiseProductLevel(Integer.parseInt(cursor.getString(0)),DraftorNonSubmitted);
					    	 
				    	  if(arrProductDailySummaryKUWiseReportWithCategory.size()>0)
				    	  {

				    	  	// CompleteResult[i]=(String) cursor.getString(0).toString();
				    	  
					    	  
				    	  	
				    		  String strCatDisplayUnit=(String) arrProductDailySummaryKUWiseReportWithCategory.get(0);
								 String strCatOrderVolume=(String) arrProductDailySummaryKUWiseReportWithCategory.get(1);
								 String strCatFreeVolume=(String) arrProductDailySummaryKUWiseReportWithCategory.get(2);
								 String strCatDiscValue=(String) arrProductDailySummaryKUWiseReportWithCategory.get(3);
								 String strCatAmountBeforeTax=(String) arrProductDailySummaryKUWiseReportWithCategory.get(4);
								 String strCatTaxValue=(String) arrProductDailySummaryKUWiseReportWithCategory.get(5);
								 String strCatOrderValue=(String) arrProductDailySummaryKUWiseReportWithCategory.get(6);
								 
								 if(strGrandTotalDiscValue.equals(""))
						    	  {
									 strGrandTotalDiscValue=""+Double.parseDouble(strCatDiscValue);
						    	  }
						    	  else
						    	  {
						    		  strGrandTotalDiscValue=""+(Double.parseDouble(strGrandTotalDiscValue) + Double.parseDouble(strCatDiscValue));
						    	  }
								 if(strGrandTotalAmountBeforeTax.equals(""))
						    	  {
									 strGrandTotalAmountBeforeTax=""+Double.parseDouble(strCatAmountBeforeTax);
						    	  }
						    	  else
						    	  {
						    		  strGrandTotalAmountBeforeTax=""+(Double.parseDouble(strGrandTotalAmountBeforeTax) + Double.parseDouble(strCatAmountBeforeTax));
						    	  }
								 if(strGrandTotalTaxValue.equals(""))
						    	  {
									 strGrandTotalTaxValue=""+Double.parseDouble(strCatTaxValue);
						    	  }
						    	  else
						    	  {
						    		  strGrandTotalTaxValue=""+(Double.parseDouble(strGrandTotalTaxValue) + Double.parseDouble(strCatTaxValue));
						    	  }
								 if(strGrandTotalOrderValue.equals(""))
						    	  {
									 strGrandTotalOrderValue=""+Double.parseDouble(strCatOrderValue);
						    	  }
						    	  else
						    	  {
						    		  strGrandTotalOrderValue=""+(Double.parseDouble(strGrandTotalOrderValue) + Double.parseDouble(strCatOrderValue));
						    	  }
								 LinkedHashMap<String, String> hmapSkuLevelRows= new LinkedHashMap<>();
								 hmapSkuLevelRows=(LinkedHashMap<String, String>) arrProductDailySummaryKUWiseReportWithCategory.get(7);
								 //hmapSKUWiseDailySummaryReport.put((String) cursor.getString(0).toString(), "CATEGORY :"+(String) cursor.getString(1).toString()+"^"+0+"^"+0+"^"+(String) cursor.getString(2).toString()+"^"+strCatOrderVolume+" "+strCatDisplayUnit+"^"+strCatFreeVolume+" "+strCatDisplayUnit+"^"+strCatDiscValue+"^"+strCatAmountBeforeTax+"^"+strCatTaxValue+"^"+strCatOrderValue+"^"+(String) cursor.getString(3).toString());
								 hmapSKUWiseDailySummaryReport.put((String) cursor.getString(0), "CATEGORY :"+(String) cursor.getString(1) +"^"+0+"^"+0+"^"+strCatOrderVolume+" "+strCatDisplayUnit+"^"+strCatFreeVolume+" "+strCatDisplayUnit+"^"+strCatDiscValue+"^"+strCatAmountBeforeTax+"^"+strCatTaxValue+"^"+strCatOrderValue+"^"+(String) cursor.getString(2) +"^"+(String) cursor.getString(3));
								 hmapSKUWiseDailySummaryReport.putAll(hmapSkuLevelRows);
								 if(i == cursor.getCount()-1)
						    	  {
									 int storeCntGrandTotal=fnGetCountDailySummaryDetailsSKUWiseGrandTotal(DraftorNonSubmitted);
									 hmapGrandTotalCategorySKUWiseDailySummaryReport.putAll(hmapSKUWiseDailySummaryReport);
									 //hmapGrandTotalCategorySKUWiseDailySummaryReport.put("0", "GRAND TOTAL :"+"^"+" "+"^"+" "+"^"+storeCntGrandTotal+"^"+" "+"^"+" "+"^"+strGrandTotalDiscValue+"^"+strGrandTotalAmountBeforeTax+"^"+strGrandTotalTaxValue+"^"+strGrandTotalOrderValue+"^0");
									 hmapGrandTotalCategorySKUWiseDailySummaryReport.put("0", "GRAND TOTAL :"+"^"+"0"+"^"+"0"+"^"+"0"+"^"+"0"+"^"+strGrandTotalDiscValue+"^"+strGrandTotalAmountBeforeTax+"^"+strGrandTotalTaxValue+"^"+strGrandTotalOrderValue+"^"+storeCntGrandTotal+"^0");
									 
						    	  }
								 
				    	  
				    	  	 
				       cursor.moveToNext();
				      

}	
				      }
				     }
				     
				    }
				    
				    
				    
				    
				    return hmapGrandTotalCategorySKUWiseDailySummaryReport;

				   } finally {
				    cursor.close();
				    close();
				   }
				 //Getting Category Details Ends Here
				 
		     }


	public LinkedHashMap<String, String> fnGetTabelEntry()//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
	{
		LinkedHashMap<String, String> hmapPrdRowDetails= new LinkedHashMap<>();
		//ArrayList<Object> totalProductCategoryWiseResult=new ArrayList<Object>(8);
open();
		Cursor cursorSKUPrd = db.rawQuery("Select * from tblStoreProdcutPurchaseDetails", null);
		try {
			if (cursorSKUPrd.getCount() > 0) {
				cursorSKUPrd.moveToFirst();
				//if (cursorSKUPrd.moveToFirst()) {
					for (int i = 0; i <= (cursorSKUPrd.getCount() - 1); i++) {
						String rowVales="";
						for (int j = 0; j <= (cursorSKUPrd.getColumnCount() - 1); j++) {
							if(rowVales.equals(""))
							{
								rowVales= cursorSKUPrd.getString(j);
							}
							else
							{
								rowVales+="^"+ cursorSKUPrd.getString(j);
							}
						}

						hmapPrdRowDetails.put(""+i,rowVales);
						cursorSKUPrd.moveToNext();
					}
				//}
			}

			return hmapPrdRowDetails;

		} finally {
			cursorSKUPrd.close();
			//LinkedHashMap<String,String> hmapProductList=fnGetTabelEntryProduct();
			close();
			// close();
		}

	}


	public LinkedHashMap<String, String> fnGetTabelEntryProduct()//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
	{
		LinkedHashMap<String, String> hmapPrdRowDetails= new LinkedHashMap<>();
		//ArrayList<Object> totalProductCategoryWiseResult=new ArrayList<Object>(8);
		//open();
		Cursor cursorSKUPrd = db.rawQuery("Select * from tblProductList", null);
		try {
			if (cursorSKUPrd.getCount() > 0) {
				cursorSKUPrd.moveToFirst();
				//if (cursorSKUPrd.moveToFirst()) {
				for (int i = 0; i <= (cursorSKUPrd.getCount() - 1); i++) {
					String rowVales="";
					for (int j = 0; j <= (cursorSKUPrd.getColumnCount() - 1); j++) {
						if(rowVales.equals(""))
						{
							rowVales= cursorSKUPrd.getString(j);
						}
						else
						{
							rowVales+="^"+ cursorSKUPrd.getString(j);
						}
					}

					hmapPrdRowDetails.put(""+i,rowVales);
					cursorSKUPrd.moveToNext();
				}
				//}
			}

			return hmapPrdRowDetails;

		} finally {
			cursorSKUPrd.close();
			//close();
			// close();
		}

	}
		     private ArrayList<Object> fnGetDailySummaryDetailsSKUWiseProductLevel(int CategoryId, int DraftorNonSubmitted)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
		     {
		    	 ArrayList<Object> totalProductCategoryWiseResult= new ArrayList<>(8);
				 
		    	// Cursor cursorSKUPrd = db.rawQuery("Select tblProductList.StoreCatNodeId || tblStoreProdcutPurchaseDetails.ProdID AS PID,tblProductList.ProductShortName As ProdShortName,tblProductList.ProductMRP As PMRP,tblStoreProdcutPurchaseDetails.ProductPrice As PSRate,Sum(tblStoreProdcutPurchaseDetails.OrderQty) as OrderQty,Sum(Cast(tblStoreProdcutPurchaseDetails.FreeQty As Real)) AS FreeQty, Sum(Cast(tblStoreProdcutPurchaseDetails.OrderQty as Real)) As OrderVolume,Cast(Sum(tblStoreProdcutPurchaseDetails.FreeQty) AS Real) As FreeVolume,Sum(Cast(tblStoreProdcutPurchaseDetails.DisVal As Real)) As DisVal,Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real))-Sum(Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As AmtBeforeTax,Sum(Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As TaxValue,Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)) As OrderVal,tblProductList.DisplayUnit AS PDisplayUnit,Count(Distinct tblStoreProdcutPurchaseDetails.StoreID) As StoreCount,2 AS FlgRowType  from tblStoreProdcutPurchaseDetails inner join tblProductList on tblStoreProdcutPurchaseDetails.ProdID=tblProductList.ProductID and tblProductList.StoreCatNodeId=tblStoreProdcutPurchaseDetails.StoreCatNodeId Where tblProductList.StoreCatNodeId=tblStoreProdcutPurchaseDetails.StoreCatNodeId and  (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.CatID="+CategoryId+" and  tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+" Group By tblStoreProdcutPurchaseDetails.ProdID,tblProductList.ProductShortName,tblProductList.ProductMRP,tblProductList.StandardRate,tblProductList.DisplayUnit,tblProductList.StoreCatNodeId Order by tblProductList.CatOrdr,tblProductList.PrdOrdr", null);
		    	//Cursor cursorSKUPrd = db.rawQuery("Select tblStoreProdcutPurchaseDetails.CatID || tblStoreProdcutPurchaseDetails.ProdID AS PID,tblProductList.ProductShortName As ProdShortName,tblProductSegementMap.ProductMRP As PMRP,tblStoreProdcutPurchaseDetails.ProductPrice As PSRate,Sum(tblStoreProdcutPurchaseDetails.OrderQty) as OrderQty,Sum(Cast(tblStoreProdcutPurchaseDetails.FreeQty As Real)) AS FreeQty, Sum(Cast(tblStoreProdcutPurchaseDetails.OrderQty as Real)) As OrderVolume,Cast(Sum(tblStoreProdcutPurchaseDetails.FreeQty) AS Real) As FreeVolume,Sum(Cast(tblStoreProdcutPurchaseDetails.DisVal As Real)) As DisVal,Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real))-Sum(Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As AmtBeforeTax,Sum(Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As TaxValue,Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)) As OrderVal,tblProductList.DisplayUnit AS PDisplayUnit,Count(Distinct tblStoreProdcutPurchaseDetails.StoreID) As StoreCount,2 AS FlgRowType  from tblStoreProdcutPurchaseDetails inner join tblProductList on tblStoreProdcutPurchaseDetails.ProdID=tblProductList.ProductID and tblProductList.StoreCatNodeId=tblStoreProdcutPurchaseDetails.StoreCatNodeId inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID  Where tblProductList.StoreCatNodeId=tblStoreProdcutPurchaseDetails.StoreCatNodeId and  (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.CatID="+CategoryId+" and  tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+"  Group By tblStoreProdcutPurchaseDetails.ProdID,tblProductList.ProductShortName,tblProductSegementMap.ProductMRP,tblProductSegementMap.StandardRate,tblProductList.DisplayUnit,tblProductList.StoreCatNodeId Order by tblProductList.CatOrdr,tblProductList.PrdOrdr", null);
		    	// Cursor cursorSKUPrd = db.rawQuery("Select tblProductList.CategoryID || tblStoreProdcutPurchaseDetails.ProdID AS PID,tblProductList.ProductShortName As ProdShortName,((Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)))/Sum(tblStoreProdcutPurchaseDetails.OrderQty)) As PMRP,tblStoreProdcutPurchaseDetails.ProductPrice As PSRate,Sum(tblStoreProdcutPurchaseDetails.OrderQty) as OrderQty,Sum(Cast(tblStoreProdcutPurchaseDetails.FreeQty As Real)) AS FreeQty, Sum(Cast(tblStoreProdcutPurchaseDetails.OrderQty as Real)) As OrderVolume,Cast(Sum(tblStoreProdcutPurchaseDetails.FreeQty) AS Real) As FreeVolume,Sum(Cast(tblStoreProdcutPurchaseDetails.DisVal As Real)) As DisVal,Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real))-Sum(Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As AmtBeforeTax,Sum(Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As TaxValue,Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)) As OrderVal,tblProductList.DisplayUnit AS PDisplayUnit,Count(Distinct tblStoreProdcutPurchaseDetails.StoreID) As StoreCount,2 AS FlgRowType  from tblStoreProdcutPurchaseDetails inner join tblProductList on tblStoreProdcutPurchaseDetails.ProdID=tblProductList.ProductID   Where tblProductList.CategoryID=tblStoreProdcutPurchaseDetails.CatID and  (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.CatID="+CategoryId+" and  tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+"  Group By tblStoreProdcutPurchaseDetails.ProdID,tblProductList.ProductShortName,tblProductList.DisplayUnit Order by tblProductList.CatOrdr,tblProductList.PrdOrdr", null);

				 Cursor cursorSKUPrd = db.rawQuery("Select tblProductList.CategoryID || tblStoreProdcutPurchaseDetails.ProdID AS PID,tblProductList.ProductShortName As ProdShortName,((Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)))/Sum(tblStoreProdcutPurchaseDetails.OrderQty)) As PMRP,((Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)))/Sum(tblStoreProdcutPurchaseDetails.OrderQty)) As PSRate,Sum(tblStoreProdcutPurchaseDetails.OrderQty) as OrderQty,Sum(Cast(tblStoreProdcutPurchaseDetails.FreeQty As Real)) AS FreeQty, Sum(Cast(tblStoreProdcutPurchaseDetails.OrderQty as Real)) As OrderVolume,Cast(Sum(tblStoreProdcutPurchaseDetails.FreeQty) AS Real) As FreeVolume,Sum(Cast(tblStoreProdcutPurchaseDetails.DisVal As Real)) As DisVal,Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real))-Sum(Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As AmtBeforeTax,Sum(Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) AS TaxValue,Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)) As OrderVal,tblProductList.DisplayUnit AS PDisplayUnit,Count(Distinct tblStoreProdcutPurchaseDetails.StoreID) As StoreCount,2 AS FlgRowType  from tblStoreProdcutPurchaseDetails inner join tblProductList on tblStoreProdcutPurchaseDetails.ProdID=tblProductList.ProductID Where tblStoreProdcutPurchaseDetails.CatID="+CategoryId+"  and  tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+"  Group By tblProductList.CategoryID, tblStoreProdcutPurchaseDetails.ProdID,tblProductList.ProductShortName,tblProductList.DisplayUnit having Sum(tblStoreProdcutPurchaseDetails.OrderQty) >0 or  Sum(Cast(tblStoreProdcutPurchaseDetails.FreeQty As Real))>0 Order by tblProductList.CatOrdr,PrdOrdr", null);
		    		   	   	   try {
						 //hmapCtgryDetails= key=CategoryId,val=CategoryDescr
						 LinkedHashMap<String, String> hmapPrdRowDetails= new LinkedHashMap<>();
						 String strCatDisplayUnit="Kg/Liters";
						 String strCatOrderVolume="";
						 String strCatFreeVolume="";
						 String strCatDiscValue="";
						 String strCatAmountBeforeTax="";
						 String strCatTaxValue="";
						 String strCatOrderValue="";
					    if (cursorSKUPrd.getCount() > 0) {
					     if (cursorSKUPrd.moveToFirst()) {
					      for (int i = 0; i <= (cursorSKUPrd.getCount() - 1); i++) {
					    	  
					    	  if(i==0)
					    	  {
					    		  strCatDisplayUnit=(String) cursorSKUPrd.getString(12);
					    	  }
					    	  if(strCatOrderVolume.equals(""))
					    	  {
					    		  strCatOrderVolume=""+Double.parseDouble(cursorSKUPrd.getString(6));
					    	  }
					    	  else
					    	  {
					    		  strCatOrderVolume=""+(Double.parseDouble(strCatOrderVolume) + Double.parseDouble(cursorSKUPrd.getString(6)));
					    	  }
					    	  if(strCatFreeVolume.equals(""))
					    	  {
					    		    strCatFreeVolume=""+Double.parseDouble(cursorSKUPrd.getString(7));
					    		  
					    			Double strCatFreeVolumeVolumeValue=Double.parseDouble(strCatFreeVolume);
					    		  	strCatFreeVolume=""+ Double.parseDouble(new DecimalFormat("##.##").format(strCatFreeVolumeVolumeValue));
					    	  }
					    	  else
					    	  {
					    		  	strCatFreeVolume=""+(Double.parseDouble(strCatFreeVolume) + Double.parseDouble(cursorSKUPrd.getString(7)));
					    		  
					    		  	Double strCatFreeVolumeVolumeValue=Double.parseDouble(strCatFreeVolume);
					    		  	strCatFreeVolume=""+ Double.parseDouble(new DecimalFormat("##.##").format(strCatFreeVolumeVolumeValue));
					    	  }
					    	  if(strCatDiscValue.equals(""))
					    	  {
					    		  strCatDiscValue=""+Double.parseDouble(cursorSKUPrd.getString(8));
					    	  }
					    	  else
					    	  {
					    		  strCatDiscValue=""+(Double.parseDouble(strCatDiscValue) + Double.parseDouble(cursorSKUPrd.getString(8)));
					    		  
					    		  
					    	  }
					    	  if(strCatAmountBeforeTax.equals(""))
					    	  {
					    		  strCatAmountBeforeTax=""+Double.parseDouble(cursorSKUPrd.getString(9));
					    	  }
					    	  else
					    	  {
					    		  strCatAmountBeforeTax=""+(Double.parseDouble(strCatAmountBeforeTax) + Double.parseDouble(cursorSKUPrd.getString(9)));
					    	  }
					    	  if(strCatTaxValue.equals(""))
					    	  {
					    		  strCatTaxValue=""+Double.parseDouble(cursorSKUPrd.getString(10));
					    	  }
					    	  else
					    	  {
					    		  strCatTaxValue=""+(Double.parseDouble(strCatTaxValue) + Double.parseDouble(cursorSKUPrd.getString(10)));
					    	  }
					    	  if(strCatOrderValue.equals(""))
					    	  {
					    		  strCatOrderValue=""+Double.parseDouble(cursorSKUPrd.getString(11));
					    	  }
					    	  else
					    	  {
					    		  strCatOrderValue=""+(Double.parseDouble(strCatOrderValue) + Double.parseDouble(cursorSKUPrd.getString(11)));
					    	  }
					    	  
					    	  hmapPrdRowDetails.put(CategoryId +"_"+(String) cursorSKUPrd.getString(0),(String) cursorSKUPrd.getString(1) +"^"+(String) cursorSKUPrd.getString(2) +"^"+(String) cursorSKUPrd.getString(3) +"^"+(String) cursorSKUPrd.getString(4) +"^"+(String) cursorSKUPrd.getString(5) +"^"+(String) cursorSKUPrd.getString(8) +"^"+(String) cursorSKUPrd.getString(9) +"^"+(String) cursorSKUPrd.getString(10) +"^"+(String) cursorSKUPrd.getString(11) +"^"+(String) cursorSKUPrd.getString(13) +"^"+(String) cursorSKUPrd.getString(14));
					       cursorSKUPrd.moveToNext();
					      }
					     }
					     
					     if(strCatDisplayUnit.equals("Kg"))
					     {
					     strCatOrderVolume=ConvertGramToKilo(strCatOrderVolume);
					     Double strCatOrderVolumeValue=Double.parseDouble(strCatOrderVolume);
					     strCatOrderVolume=""+ Double.parseDouble(new DecimalFormat("##.##").format(strCatOrderVolumeValue));
					     }
					     if(strCatDisplayUnit.equals("Lt"))
					     {
					     strCatOrderVolume=ConvertMLToLiters(strCatOrderVolume);
					     Double strCatOrderVolumeValue=Double.parseDouble(strCatOrderVolume);
					     strCatOrderVolume=""+ Double.parseDouble(new DecimalFormat("##.##").format(strCatOrderVolumeValue));
					     }
					     
					     
					     if(strCatDisplayUnit.equals("Kg"))
				          {
				           strCatFreeVolume=ConvertGramToKilo(strCatFreeVolume);
				           Double strCatFreeVolumeValue=Double.parseDouble(strCatFreeVolume);
				          strCatFreeVolume=""+ Double.parseDouble(new DecimalFormat("##.##").format(strCatFreeVolumeValue));
				          }
				          if(strCatDisplayUnit.equals("Lt"))
				          {
				           strCatFreeVolume=ConvertMLToLiters(strCatFreeVolume);
				          Double strCatFreeVolumeValue=Double.parseDouble(strCatFreeVolume);
				          strCatFreeVolume=""+ Double.parseDouble(new DecimalFormat("##.##").format(strCatFreeVolumeValue));
				          }
					     
					     
					     totalProductCategoryWiseResult.add(0, strCatDisplayUnit);
					     totalProductCategoryWiseResult.add(1, strCatOrderVolume);
					     totalProductCategoryWiseResult.add(2, strCatFreeVolume);
					     totalProductCategoryWiseResult.add(3, strCatDiscValue);
					     totalProductCategoryWiseResult.add(4, strCatAmountBeforeTax);
					     totalProductCategoryWiseResult.add(5, strCatTaxValue);
					     totalProductCategoryWiseResult.add(6, strCatOrderValue);
					     totalProductCategoryWiseResult.add(7, hmapPrdRowDetails);
					    }
					    
					    
					    return totalProductCategoryWiseResult;

					   } finally {
					    cursorSKUPrd.close();
					   // close();
					   }

					  }
		     
		     private int fnGetCountDailySummaryDetailsSKUWiseGrandTotal(int DraftorNonSubmitted)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
		     {
					//open();
					   Cursor cursorGTota = db.rawQuery("Select Count(*) from tblStoreProdcutPurchaseDetails where (OrderQty>0 or FreeQty>0) and Sstat="+DraftorNonSubmitted+"" , null);
					   try {
					    int CountCompleteResultSkuWiseProductLevel=0;
					    if (cursorGTota.getCount() > 0) {
					     if (cursorGTota.moveToFirst()) {
					      for (int i = 0; i <= (cursorGTota.getCount() - 1); i++) {
					    	  CountCompleteResultSkuWiseProductLevel = Integer.parseInt(cursorGTota.getString(0));
					       cursorGTota.moveToNext();
					      }
					     }
					    }
					    return CountCompleteResultSkuWiseProductLevel;

					   } finally {
					    cursorGTota.close();
					   // close();
					   }

			 }
		     
		     
	//	 DATABASE_CREATE_TABLE_215 =tblProductMappedWithSchemeSlabApplied (StoreId,ProductID,schSlabId,schmIdMapped		     
		     // changes by nitish
		     
		     public void insertProductMappedWithSchemApplied(String storeId,String productId,String _schSlabId,String _schmId,String pdaOrderID)
		       {
		        open();
		       
		        
		        ContentValues initialValues = new ContentValues();
		        	  initialValues.put("schmIdMapped", _schmId.trim());
		        	  initialValues.put("schSlabId", _schSlabId.trim());
		        	
		        	  
		          initialValues.put("StoreId", storeId.trim());
		          initialValues.put("ProductID", productId.trim());
		          initialValues.put("Sstat", 0);
		          initialValues.put("OrderIDPDA", pdaOrderID);
		         // System.out.println("DATABASE_TABLE_Main215 : StoreId = "+storeId+" ProductID = "+productId+" schSlabId ="+_schSlabId+" schmIdMapped ="+_schmId);
		          
		          db.insert(DATABASE_TABLE_Main215, null, initialValues);
		          
		         
		        
		        close();
		        
		       }
		     
		     public void insertSchemeAlrtVal(String storeId,String productId,String spinnerVal,String product,String SpinnerPosition,String _schSlabId,String _schmAlrtId,String pdaOrderID)
		       {
		        open();
		        //StoreId text null,ProductID text null,SpinnerVal text null,SpinnerPosition text null,Product text null,schSlabId text null,schmAlrtId text null);";
		        Cursor cur=db.rawQuery("Select Product,SpinnerVal from tblAlrtVal where StoreId ='"+storeId+"' and ProductID = '"+productId+"' and schSlabId = '"+_schSlabId+"' and schmAlrtId = '"+_schmAlrtId+"' and OrderIDPDA='"+pdaOrderID+"'",null );
		        ContentValues initialValues = new ContentValues();
		           
		           initialValues.put("Product", product.trim()); 
		         initialValues.put("SpinnerVal", spinnerVal.trim());
		         initialValues.put("SpinnerPosition", SpinnerPosition.trim());
		       
		       
		        		 
		         if(cur.getCount()>0)
		         {
		          db.update(DATABASE_TABLE_Main214, initialValues, "StoreID=? AND ProductID=? AND OrderIDPDA=? ",new String[] {storeId,productId,pdaOrderID});
		         }
		         else
		         {
		        	 
		        //	 DATABASE_CREATE_TABLE_214,SpinnerPosition
		        	  initialValues.put("schmAlrtId", _schmAlrtId.trim());
		        	  initialValues.put("schSlabId", _schSlabId.trim());
		          initialValues.put("StoreId", storeId.trim());
		          initialValues.put("ProductID", productId.trim());
		          initialValues.put("OrderIDPDA", pdaOrderID);
		         
		          
		          db.insert(DATABASE_TABLE_Main214, null, initialValues);
		          
		         }
		        
		        close();
		        cur.close();
		       }
		       
		       public String[] getValOfSchemeAlrt(String storeId,String productId,String _schmSlabID,String pdaOrderID)
		       {
		        open();
		       String[] alrtValues=new String[2];
		       open();
		       Cursor cur=db.rawQuery("Select Product,SpinnerPosition from tblAlrtVal where StoreId ='"+storeId+"' and ProductID = '"+productId+"' and schSlabId = '"+_schmSlabID+"' and OrderIDPDA='"+pdaOrderID+"'",null );
		       
		       if(cur.getCount()>0)
		       {
		        if(cur.moveToFirst())
		        {
		         alrtValues[0]=cur.getString(0);
		         alrtValues[1]=cur.getString(1);
		        }
		        
		        
		       }
		       else
		       {
		        alrtValues[0]="No Data";
		        alrtValues[1]="";
		       }
		       close();
		       cur.close();
		       return alrtValues;
		       
		       }
		       
		       public String getValOfSchemeAlrtSelected(String storeId,String _schmAlrtId,String _schSlabId,String pdaOrderID)
		       {
		        open();
		       String alrtValues=null;
		       open();
		       Cursor cur=db.rawQuery("Select SpinnerVal from tblAlrtVal where StoreId ='"+storeId+"' and schmAlrtId = '"+_schmAlrtId+"' and schSlabId = '"+_schSlabId+"' and OrderIDPDA='"+pdaOrderID+"'",null );
		       
		       if(cur.getCount()>0)
		       {
		        if(cur.moveToFirst())
		        {
		         alrtValues=cur.getString(0);
		       
		        }
		        
		        
		       }
		       else
		       {
		        alrtValues="0";
		       
		       }
		       close();
		       cur.close();
		       return alrtValues;
		       
		       }
		       
		       
		       // StoreWise Summary Function given by Abhinav Sir
		       
		        public  LinkedHashMap<String, String> fnGetDailySummaryDetailsStoreWise(int DraftorNonSubmitted)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
			     {
			    	 ArrayList<Object> totalCategoryWiseResult= new ArrayList<>(11);
			    	 
			    	 //Getting Category Details Starts Here
			    	 
			    	 
			    	 //hmapStoreDetails= key=StoreId,val=StoreDetails
			    	 LinkedHashMap<String, String> hmapStoreWiseDailySummaryDetails= new LinkedHashMap<>();
				      
				      //hmapStoreDetails= key=StoreId,val=StoreDetails
			    	 LinkedHashMap<String, String> hmapStoreWiseDailySummaryDetailsWithGrandTotal= new LinkedHashMap<>();
				     String StoreStockValue="";
				     String StoreDiscountValue="";
				     String StoreOrderValueBeforeTax="";
				     String StoreTaxValue="";
				     String StoreOrderValueAfterTax="";
				    
						open();
						//or tblStoreProdcutPurchaseDetails.Stock>0
					   Cursor cursor = db.rawQuery("Select tblStoreProdcutPurchaseDetails.StoreID,tblStoreList.StoreName,Count(Distinct tblStoreProdcutPurchaseDetails.ProdID) As LinesPerBill,(Cast(tblStoreProdcutPurchaseDetails.ProductPrice As Real)*Sum(tblStoreProdcutPurchaseDetails.Stock)) As StockValue,Sum(Cast(tblStoreProdcutPurchaseDetails.DisVal As Real)) As DiscountValue,(Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real))-Sum(Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real))) As ValueBeforeTax,Sum(Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As TaxValue,Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)) As ValueAfterTax from tblStoreProdcutPurchaseDetails inner join tblStoreList on tblStoreProdcutPurchaseDetails.StoreID=tblStoreList.StoreID Where  (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+" Group By tblStoreProdcutPurchaseDetails.StoreID,tblStoreList.StoreName" , null);
					   try {
					    if (cursor.getCount() > 0) {
					     if (cursor.moveToFirst()) {
					      for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					    	  hmapStoreWiseDailySummaryDetails.put((String) cursor.getString(0), (String) cursor.getString(1) +"^"+(String) cursor.getString(2) +"^"+(String) cursor.getString(3) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(5) +"^"+(String) cursor.getString(6) +"^"+(String) cursor.getString(7));
					    	 
					    	  if(StoreStockValue.equals(""))
					    	  {
					    		  StoreStockValue=(String) cursor.getString(3);
					    	  }
					    	  else
					    	  {
					    		  StoreStockValue=""+(Double.parseDouble(StoreStockValue)+Double.parseDouble(cursor.getString(3)));
					    	  }
					    	  if(StoreDiscountValue.equals(""))
					    	  {
					    		  StoreDiscountValue=(String) cursor.getString(4);
					    	  }
					    	  else
					    	  {
					    		  StoreDiscountValue=""+(Double.parseDouble(StoreDiscountValue)+Double.parseDouble(cursor.getString(4)));
					    	  }
					    	  if(StoreOrderValueBeforeTax.equals(""))
					    	  {
					    		  StoreOrderValueBeforeTax=(String) cursor.getString(5);
					    	  }
					    	  else
					    	  {
					    		  StoreOrderValueBeforeTax=""+(Double.parseDouble(StoreOrderValueBeforeTax)+Double.parseDouble(cursor.getString(5)));
					    	  }
					    	  if(StoreTaxValue.equals(""))
					    	  {
					    		  StoreTaxValue=(String) cursor.getString(6);
					    	  }
					    	  else
					    	  {
					    		  StoreTaxValue=""+(Double.parseDouble(StoreTaxValue)+Double.parseDouble(cursor.getString(6)));
					    	  }
					    	  if(StoreOrderValueAfterTax.equals(""))
					    	  {
					    		  StoreOrderValueAfterTax=(String) cursor.getString(7);
					    	  }
					    	  else
					    	  {
					    		  StoreOrderValueAfterTax=""+(Double.parseDouble(StoreOrderValueAfterTax)+Double.parseDouble(cursor.getString(7)));
					    	  }
					    	  if(i==cursor.getCount()-1)
					    	  {
					    		  int cntLinesBillTotStoreWiseGrandTotal=fnCountToDisplayDailySummaryDetailsStoreWiseLines(DraftorNonSubmitted);
					    		  hmapStoreWiseDailySummaryDetailsWithGrandTotal.put("0", "TOTAL :" +"^"+cntLinesBillTotStoreWiseGrandTotal+"^"+StoreStockValue+"^"+StoreDiscountValue+"^"+StoreOrderValueBeforeTax+"^"+StoreTaxValue+"^"+StoreOrderValueAfterTax);
					    		  hmapStoreWiseDailySummaryDetailsWithGrandTotal.putAll(hmapStoreWiseDailySummaryDetails);  
					    	  }
					       cursor.moveToNext();
					      }
					     }
					     //totalCategoryWiseResult.add(1, hmapStoreDetails);
					     
					     
					    }
					    return hmapStoreWiseDailySummaryDetailsWithGrandTotal;

					   } finally {
					    cursor.close();
					    close();
					   }
					 //Getting Category Details Ends Here
					 
			     }
			       
		       public int fnCountToDisplayDailySummaryDetailsStoreWiseLines(int DraftorNonSubmitted)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
			     {
			    	 int CountToDisplayDailySummaryDetailsSKUWise=0;
			    	 //ArrayList<HashMap<String, String>> totalProductDetail=new ArrayList<HashMap<String, String>>(4);
			    	 
			    	 //Getting Category Details Starts Here
			    	
						//open();
					   Cursor cursor = db.rawQuery("Select Count(tblStoreProdcutPurchaseDetails.ProdID) from tblStoreProdcutPurchaseDetails Where  (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted , null);
					   try 
					   {
					    if (cursor.getCount() > 0)
					    {
					     if (cursor.moveToFirst()) {
					    	 CountToDisplayDailySummaryDetailsSKUWise=Integer.parseInt(cursor.getString(0));
					     }
					    }
					   return CountToDisplayDailySummaryDetailsSKUWise;
					   } finally {
					    cursor.close();
					    //close();
					   }
					 
			     }
			     
			     
			    public int fnCountToDisplayDailySummaryDetailsStoreSKUWise(int DraftorNonSubmitted)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
			     {
			    	 int CountToDisplayDailySummaryDetailsSKUWise=0;
			    	 //ArrayList<HashMap<String, String>> totalProductDetail=new ArrayList<HashMap<String, String>>(4);
			    	 
			    	 //Getting Category Details Starts Here
			    	
						open();
					   Cursor cursor = db.rawQuery("Select Count(tblStoreProdcutPurchaseDetails.StoreID) from tblStoreProdcutPurchaseDetails Where  (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted , null);
					   try {
					    if (cursor.getCount() > 0) {
					     if (cursor.moveToFirst()) {
					    	 CountToDisplayDailySummaryDetailsSKUWise=Integer.parseInt(cursor.getString(0));
					     }
					    }
					   return CountToDisplayDailySummaryDetailsSKUWise;
					   } finally {
					    cursor.close();
					    close();
					   }
					 
			     }
			      
			     
			     @SuppressWarnings("unchecked")
					public LinkedHashMap<String, String> fnGetDailySummaryDetailsStoreSKUWiseLevel(int DraftorNonSubmitted)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
				     {
				    	 
				    	 //Getting Category Details Starts Here
				    	 
			    	 LinkedHashMap<String, String> hmapSKUWiseDailySummaryReport= new LinkedHashMap<>();
				    	 
				    	 LinkedHashMap<String, String> hmapGrandTotalCategorySKUWiseDailySummaryReport= new LinkedHashMap<>();
				    	 
				    	 String CompleteResult[]=null;
				    	 
				    	 String strGrandTotalDiscValue="";
						 String strGrandTotalAmountBeforeTax="";
						 String strGrandTotalTaxValue="";
						 String strGrandTotalOrderValue="";
				    	
							open();
							// or tblStoreProdcutPurchaseDetails.Stock>0
						   Cursor cursor = db.rawQuery("Select tblStoreProdcutPurchaseDetails.StoreID,tblStoreList.StoreName,1 AS FlgRowType from  tblStoreProdcutPurchaseDetails inner join tblStoreList on  tblStoreProdcutPurchaseDetails.StoreID=tblStoreList.StoreID Where  (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+" Group By tblStoreProdcutPurchaseDetails.StoreID,tblStoreList.StoreName" , null);
						   try {
						    if (cursor.getCount() > 0) {
						    	
						     if (cursor.moveToFirst()) {
						      for (int i = 0; i <= (cursor.getCount() - 1); i++)
						      {
						    	  int StoreCatNodeId=fnGetStoreCatNodeId(cursor.getString(0));
						    	  ArrayList<Object> arrProductDailySummaryKUWiseReportWithCategory=fnGetDailySummaryDetailsStoreSKUWiseProductLevel(cursor.getString(0),DraftorNonSubmitted,StoreCatNodeId);
						    	  if(arrProductDailySummaryKUWiseReportWithCategory.size()>0)
						    	  {
						    		     String strStoreSKUDiscValue=(String) arrProductDailySummaryKUWiseReportWithCategory.get(0);
										 String strStoreSKUAmountBeforeTax=(String) arrProductDailySummaryKUWiseReportWithCategory.get(1);
										 String strStoreSKUTaxValue=(String) arrProductDailySummaryKUWiseReportWithCategory.get(2);
										 String strStoreSKUOrderValue=(String) arrProductDailySummaryKUWiseReportWithCategory.get(3);
										 
										 if(strGrandTotalDiscValue.equals(""))
								    	  {
											 strGrandTotalDiscValue=""+Double.parseDouble(strStoreSKUDiscValue);
								    	  }
								    	  else
								    	  {
								    		  strGrandTotalDiscValue=""+(Double.parseDouble(strGrandTotalDiscValue) + Double.parseDouble(strStoreSKUDiscValue));
								    	  }
										 if(strGrandTotalAmountBeforeTax.equals(""))
								    	  {
											 strGrandTotalAmountBeforeTax=""+Double.parseDouble(strStoreSKUAmountBeforeTax);
								    	  }
								    	  else
								    	  {
								    		  strGrandTotalAmountBeforeTax=""+(Double.parseDouble(strGrandTotalAmountBeforeTax) + Double.parseDouble(strStoreSKUAmountBeforeTax));
								    	  }
										 if(strGrandTotalTaxValue.equals(""))
								    	  {
											 strGrandTotalTaxValue=""+Double.parseDouble(strStoreSKUTaxValue);
								    	  }
								    	  else
								    	  {
								    		  strGrandTotalTaxValue=""+(Double.parseDouble(strGrandTotalTaxValue) + Double.parseDouble(strStoreSKUTaxValue));
								    	  }
										 if(strGrandTotalOrderValue.equals(""))
								    	  {
											 strGrandTotalOrderValue=""+Double.parseDouble(strStoreSKUOrderValue);
								    	  }
								    	  else
								    	  {
								    		  strGrandTotalOrderValue=""+(Double.parseDouble(strGrandTotalOrderValue) + Double.parseDouble(strStoreSKUOrderValue));
								    	  }
										 LinkedHashMap<String, String> hmapSkuLevelRows= new LinkedHashMap<>();
										 hmapSkuLevelRows=(LinkedHashMap<String, String>) arrProductDailySummaryKUWiseReportWithCategory.get(4);
										 hmapSKUWiseDailySummaryReport.put((String) cursor.getString(0), (String) cursor.getString(1) +"^"+"0"+"^"+"0"+"^"+"0"+"^"+"0"+"^"+"0"+"^"+strStoreSKUDiscValue+"^"+strStoreSKUAmountBeforeTax+"^"+strStoreSKUTaxValue+"^"+strStoreSKUOrderValue+"^"+(String) cursor.getString(2));
										 hmapSKUWiseDailySummaryReport.putAll(hmapSkuLevelRows);
										 if(i == cursor.getCount()-1)
								    	  {
											 hmapGrandTotalCategorySKUWiseDailySummaryReport.put("0", "GRAND TOTAL :"+"^"+"0"+"^"+"0"+"^"+"0"+"^"+"0"+"^"+"0"+"^"+strGrandTotalDiscValue+"^"+strGrandTotalAmountBeforeTax+"^"+strGrandTotalTaxValue+"^"+strGrandTotalOrderValue+"^0");
											 hmapGrandTotalCategorySKUWiseDailySummaryReport.putAll(hmapSKUWiseDailySummaryReport);
											
											 
								    	  }
										 
						    	  }
						    	  	 
						       cursor.moveToNext();
						      }
						     }
						     
						    }
						    
						    
						    
						    
						    return hmapGrandTotalCategorySKUWiseDailySummaryReport;

						   } finally {
						    cursor.close();
						    close();
						   }
						 //Getting Category Details Ends Here
				     }
				     	
			     
			     @SuppressWarnings("unchecked")
                 private ArrayList<Object> fnGetDailySummaryDetailsStoreSKUWiseProductLevel(String StoreID, int DraftorNonSubmitted, int StoreCatNodeId)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
			     {
			    	 ArrayList<Object> totalProductCategoryWiseResult= new ArrayList<>(4);
						 
			    	 //Cursor cursorSKUPrd = db.rawQuery("Select tblStoreProdcutPurchaseDetails.ProdID AS PID,tblProductList.ProductShortName As ProdShortName,tblProductList.ProductMRP As PMRP,tblStoreProdcutPurchaseDetails.ProductPrice As PSRate,tblStoreProdcutPurchaseDetails.Stock as Stock,tblStoreProdcutPurchaseDetails.OrderQty as OrderQty,tblStoreProdcutPurchaseDetails.FreeQty AS FreeQty,tblStoreProdcutPurchaseDetails.DisVal As DisVal,(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)-Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As AmtBeforeTax,tblStoreProdcutPurchaseDetails.TaxValue As TaxValue,tblStoreProdcutPurchaseDetails.OrderVal As OrderVal,2 AS FlgRowType  from tblStoreProdcutPurchaseDetails inner join tblProductList on tblStoreProdcutPurchaseDetails.ProdID=tblProductList.ProductID Where  (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.StoreID='"+StoreID+"' and  tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+" and tblStoreProdcutPurchaseDetails.StoreCatNodeId="+StoreCatNodeId+" and tblProductList.StoreCatNodeId="+StoreCatNodeId+"  Group By tblStoreProdcutPurchaseDetails.ProdID,tblProductList.ProductShortName,tblProductList.ProductMRP,tblProductList.StandardRate Order by PrdOrdr", null);
			    	 //Cursor cursorSKUPrd = db.rawQuery("Select tblStoreProdcutPurchaseDetails.ProdID AS PID,tblProductList.ProductShortName As ProdShortName,tblProductSegementMap.ProductMRP As PMRP,tblStoreProdcutPurchaseDetails.ProductPrice As PSRate,tblStoreProdcutPurchaseDetails.Stock as Stock,tblStoreProdcutPurchaseDetails.OrderQty as OrderQty,tblStoreProdcutPurchaseDetails.FreeQty AS FreeQty,tblStoreProdcutPurchaseDetails.DisVal As DisVal,(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)-Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As AmtBeforeTax,tblStoreProdcutPurchaseDetails.TaxValue As TaxValue,tblStoreProdcutPurchaseDetails.OrderVal As OrderVal,2 AS FlgRowType  from tblStoreProdcutPurchaseDetails inner join tblProductList on tblStoreProdcutPurchaseDetails.ProdID=tblProductList.ProductID inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID Where  (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.StoreID='"+StoreID+"' and  tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+" and tblStoreProdcutPurchaseDetails.StoreCatNodeId="+StoreCatNodeId+" and tblProductList.StoreCatNodeId="+StoreCatNodeId+" Group By tblStoreProdcutPurchaseDetails.ProdID,tblProductList.ProductShortName,tblProductSegementMap.ProductMRP,tblProductSegementMap.StandardRate Order by PrdOrdr", null);	
			    	 Cursor cursorSKUPrd = db.rawQuery("Select tblStoreProdcutPurchaseDetails.ProdID AS PID,tblProductList.ProductShortName As ProdShortName,((Sum(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)))/Sum(tblStoreProdcutPurchaseDetails.OrderQty)) As PMRP,tblStoreProdcutPurchaseDetails.ProductPrice As PSRate,tblStoreProdcutPurchaseDetails.Stock as Stock,tblStoreProdcutPurchaseDetails.OrderQty as OrderQty,tblStoreProdcutPurchaseDetails.FreeQty AS FreeQty,tblStoreProdcutPurchaseDetails.DisVal As DisVal,(Cast(tblStoreProdcutPurchaseDetails.OrderVal As Real)-Cast(tblStoreProdcutPurchaseDetails.TaxValue As Real)) As AmtBeforeTax,tblStoreProdcutPurchaseDetails.TaxValue As TaxValue,tblStoreProdcutPurchaseDetails.OrderVal As OrderVal,2 AS FlgRowType  from tblStoreProdcutPurchaseDetails inner join tblProductList on tblStoreProdcutPurchaseDetails.ProdID=tblProductList.ProductID Where  (tblStoreProdcutPurchaseDetails.OrderQty>0 or tblStoreProdcutPurchaseDetails.FreeQty>0) and tblStoreProdcutPurchaseDetails.StoreID='"+StoreID+"' and  tblStoreProdcutPurchaseDetails.Sstat="+DraftorNonSubmitted+"  Group By tblStoreProdcutPurchaseDetails.ProdID,tblProductList.ProductShortName Order by PrdOrdr", null);  
						   try {
							 //hmapCtgryDetails= key=CategoryId,val=CategoryDescr
							 LinkedHashMap<String, String> hmapPrdRowDetails= new LinkedHashMap<>();
							 String strCatDiscValue="";
							 String strCatAmountBeforeTax="";
							 String strCatTaxValue="";
							 String strCatOrderValue="";
						    if (cursorSKUPrd.getCount() > 0) {
						     if (cursorSKUPrd.moveToFirst()) {
						      for (int i = 0; i <= (cursorSKUPrd.getCount() - 1); i++) {
						    	  
						    	  
						    	  if(strCatDiscValue.equals(""))
						    	  {
						    		  strCatDiscValue=""+Double.parseDouble(cursorSKUPrd.getString(7));
						    	  }
						    	  else
						    	  {
						    		  strCatDiscValue=""+(Double.parseDouble(strCatDiscValue) + Double.parseDouble(cursorSKUPrd.getString(7)));
						    	  }
						    	  if(strCatAmountBeforeTax.equals(""))
						    	  {
						    		  strCatAmountBeforeTax=""+Double.parseDouble(cursorSKUPrd.getString(8));
						    	  }
						    	  else
						    	  {
						    		  strCatAmountBeforeTax=""+(Double.parseDouble(strCatAmountBeforeTax) + Double.parseDouble(cursorSKUPrd.getString(8)));
						    	  }
						    	  if(strCatTaxValue.equals(""))
						    	  {
						    		  strCatTaxValue=""+Double.parseDouble(cursorSKUPrd.getString(9));
						    	  }
						    	  else
						    	  {
						    		  strCatTaxValue=""+(Double.parseDouble(strCatTaxValue) + Double.parseDouble(cursorSKUPrd.getString(9)));
						    	  }
						    	  if(strCatOrderValue.equals(""))
						    	  {
						    		  strCatOrderValue=""+Double.parseDouble(cursorSKUPrd.getString(10));
						    	  }
						    	  else
						    	  {
						    		  strCatOrderValue=""+(Double.parseDouble(strCatOrderValue) + Double.parseDouble(cursorSKUPrd.getString(10)));
						    	  }
						    	  
						    	  hmapPrdRowDetails.put(StoreID +"_"+(String) cursorSKUPrd.getString(0),(String) cursorSKUPrd.getString(1) +"^"+(String) cursorSKUPrd.getString(2) +"^"+(String) cursorSKUPrd.getString(3) +"^"+(String) cursorSKUPrd.getString(4) +"^"+(String) cursorSKUPrd.getString(5) +"^"+(String) cursorSKUPrd.getString(6) +"^"+(String) cursorSKUPrd.getString(7) +"^"+(String) cursorSKUPrd.getString(8) +"^"+(String) cursorSKUPrd.getString(9) +"^"+(String) cursorSKUPrd.getString(10) +"^"+(String) cursorSKUPrd.getString(11));
						       cursorSKUPrd.moveToNext();
						      }
						     }
						     
						    
						     totalProductCategoryWiseResult.add(0, strCatDiscValue);
						     totalProductCategoryWiseResult.add(1, strCatAmountBeforeTax);
						     totalProductCategoryWiseResult.add(2, strCatTaxValue);
						     totalProductCategoryWiseResult.add(3, strCatOrderValue);
						     totalProductCategoryWiseResult.add(4, hmapPrdRowDetails);
						    }
						    
						    
						    return totalProductCategoryWiseResult;

						   } finally {
						    cursorSKUPrd.close();
						   // close();
						   }

						  }
			     
			    
			     public String[] getOrderedproductsOfBenSubBckt10(String storeId)
			     {
			    	 String[] productOrderedVal;
			    	 open();
			    	 Cursor cursor=db.rawQuery("Select ProductID  from tblStoreProductAppliedSchemesBenifitsRecords where StoreID = '"+storeId+"' and BenSubBucketType ="+10, null);
			    	
			    	 if(cursor.getCount()>0)
			    	 {
			    		 productOrderedVal=new String[cursor.getCount()];
			    		 if(cursor.moveToFirst())
			    		 {
			    			 for(int i=0;i<cursor.getCount();i++)
			    			 {
			    				 productOrderedVal[i]=cursor.getString(0);
			    				 cursor.moveToNext();
			    			 }
			    		 }
			    	 }
			    	 
			    	 else
			    	 {
			    		 productOrderedVal=new String[1];
			    		 productOrderedVal[0]="No Product";
			    	 }
			    	 close();
			    	 
			    	 return productOrderedVal;
			     }
			     
			     public int CheckUserDoneGetStoreOrNot()
			 	{
					Cursor cursorE2 = null;
					int chkI = 0;

			 		try
					{
						open();
						cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStoreList", null);

			 			if (cursorE2.moveToFirst())
			 			{
							if (Integer.parseInt(cursorE2.getString(0)) > 0)
			 				{
			 					chkI = 1;
			 				}
			 				else
							{
			 					chkI = 0;
			 				}
			 			}

			 		}
			 		catch(Exception ex)
                    {

                    }
			 		finally
					{
			 			if(cursorE2 != null)
						{
							cursorE2.close();
						}
						close();
			 		}
			 		return chkI;
			 	}
			 	
			     public void droptblUserAuthenticationMstrTBL() 
			 	{
			        db.execSQL("DROP TABLE IF EXISTS tblUserAuthenticationMstr");
					db.execSQL("DROP TABLE IF EXISTS tblBloodGroup");
					db.execSQL("DROP TABLE IF EXISTS tblEducationQuali");
			 		
			 	}
			 	
			 	public void createtblUserAuthenticationMstrTBL()
			 	{
			 		try
			 		  {
			            db.execSQL(TABLE_tblUserAuthenticationMstr_Definition);
						  db.execSQL(DATABASE_CREATE_TABLE_tblBloodGroup);
						  db.execSQL(DATABASE_CREATE_TABLE_tblEducationQuali);
			 		  }
			 		catch (Exception e)
			 		  {
			 			
			 		  }

			 	}
			 	/*public long savetblUserAuthenticationMstr(String flgUserAuthenticated,String PersonName,String FlgRegistered)
				{
					ContentValues initialValues = new ContentValues();
					initialValues.put("flgUserAuthenticated", flgUserAuthenticated.trim());
					initialValues.put("PersonName", PersonName.trim());
					initialValues.put("FlgRegistered", FlgRegistered.trim());

                    return db.insert(TABLE_tblUserAuthenticationMstr_Define, null, initialValues);
				}*/
                public long savetblUserAuthenticationMstr(String flgUserAuthenticated,String PersonName,
                                                          String FlgRegistered,String flgAppStatus,
                                                          String DisplayMessage,String flgValidApplication,
                                                          String MessageForInvalid,String flgPersonTodaysAtt,
                                                          int PersonNodeID,int PersonNodeType,
                                                          String ContactNo,String DOB,String SelfieName,
                                                          String SelfieNameURL,String SalesAreaName,String CoverageAreaNodeID,String CoverageAreaNodeType)
                {

                    ContentValues initialValues = new ContentValues();

                    initialValues.put("flgUserAuthenticated", flgUserAuthenticated.trim());
                    initialValues.put("PersonName", PersonName.trim());
                    initialValues.put("FlgRegistered", FlgRegistered.trim());
                    initialValues.put("flgAppStatus", flgAppStatus.trim());
                    initialValues.put("DisplayMessage", DisplayMessage.trim());
                    initialValues.put("flgValidApplication", flgValidApplication.trim());
                    initialValues.put("MessageForInvalid", MessageForInvalid.trim());
                    initialValues.put("flgPersonTodaysAtt", flgPersonTodaysAtt.trim());
                    initialValues.put("PersonNodeID", PersonNodeID);
                    initialValues.put("PersonNodeType", PersonNodeType);


                    initialValues.put("ContactNo", ContactNo.trim());
                    initialValues.put("DOB", DOB.trim());
                    initialValues.put("SelfieName", SelfieName.trim());
                    initialValues.put("SelfieNameURL", SelfieNameURL);
                    initialValues.put("SalesAreaName", SalesAreaName);
                    initialValues.put("CoverageAreaNodeID", CoverageAreaNodeID);
                    initialValues.put("CoverageAreaNodeType", CoverageAreaNodeType);

// text null,

                    return db.insert(TABLE_tblUserAuthenticationMstr_Define, null, initialValues);
                }
	public long savetblBloodGroup(String BloddGroups)
	{

		ContentValues initialValues = new ContentValues();

		initialValues.put("BloddGroups", BloddGroups.trim());

		// System.out.println("Data Insert in Table MAIN1User");

		return db.insert(TABLE_tblBloodGroup_Define, null, initialValues);
	}
	public long savetblUserRegistarationStatus(String Flag,String MsgToDisplay)
	{

		ContentValues initialValues = new ContentValues();

		initialValues.put("Flag", Flag.trim());
		initialValues.put("MsgToDisplay", MsgToDisplay.trim());

		// System.out.println("Data Insert in Table MAIN1User");

		return db.insert(TABLE_tblUserRegistarationStatus, null, initialValues);
	}


	public LinkedHashMap<String, String> fnGettblBloodGroup()
	{
		LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
		open();

		try {
			Cursor cursor = db.rawQuery("SELECT BloddGroups from tblBloodGroup   ", null);// Where PNodeID='"+TSIID+"'
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						hmapQuestionMstr.put((String) cursor.getString(0),(String) cursor.getString(0));
						//    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
						cursor.moveToNext();
					}
				}
			}

		}
		catch (Exception e) {
			System.out.println("Error fnGettblUOMMstr= "+e.toString());
		}
		finally
		{

			close();
			return hmapQuestionMstr;
		}
	}


    public String fnGetPersonNameAndFlgRegistered()
    {
        String PersonNameAndFlgRegistered="0";
        open();

        try {


            Cursor cursor = db.rawQuery("SELECT  PersonName,FlgRegistered,ContactNo,DOB,SelfieName,SelfieNameURL,SalesAreaName from tblUserAuthenticationMstr   ", null);// Where PNodeID='"+TSIID+"'
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        PersonNameAndFlgRegistered=(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString();

                        cursor.moveToNext();
                    }

                }
            }

        }
        catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= "+e.toString());
        }
        finally
        {

            close();
            return PersonNameAndFlgRegistered;
        }
    }
	public String fnGettblUserRegistarationStatus()
	{
		String PersonNameAndFlgRegistered="0";
		open();

		try {
			Cursor cursor = db.rawQuery("SELECT  Flag,  MsgToDisplay from tblUserRegistarationStatus   ", null);// Where PNodeID='"+TSIID+"'
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						String msg=(String) cursor.getString(1);
						if(msg.trim().equals("")){
							msg="0";
						}
						PersonNameAndFlgRegistered=(String) cursor.getString(0) +"^"+msg;

						//    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
						cursor.moveToNext();
					}

				}
			}

		}
		catch (Exception e) {
			System.out.println("Error fnGettblUOMMstr= "+e.toString());
		}
		finally
		{

			close();
			return PersonNameAndFlgRegistered;
		}
	}


	public long savetblEducationQuali(String Qualification)
	{

		ContentValues initialValues = new ContentValues();
		initialValues.put("Qualification", Qualification.trim());
		// System.out.println("Data Insert in Table MAIN1User");
		return db.insert(TABLE_tblEducationQuali, null, initialValues);
	}

	public long savetblDsrRegDetails(String IMEI,String ClickedDateTime,String FirstName,String LastName,String ContactNo,String DOB,String Sex,String MaritalStatus,String MarriedDate,String Qualification,String SelfieName,String SelfiePath,String EmailID,String BloodGroup,String SignName,String SignPath,int Sstat,String PhotoName,String PersonNodeId,String PersonNodeType)
	{

		ContentValues initialValues = new ContentValues();
		initialValues.put("IMEI", IMEI.trim());
		initialValues.put("ClickedDateTime", ClickedDateTime.trim());
		initialValues.put("FirstName", FirstName.trim());
		initialValues.put("LastName", LastName.trim());
		initialValues.put("ContactNo", ContactNo.trim());
		initialValues.put("DOB", DOB.trim());
		initialValues.put("Sex", Sex.trim());
		initialValues.put("MaritalStatus", MaritalStatus.trim());
		initialValues.put("MarriedDate", MarriedDate.trim());
		initialValues.put("Qualification", Qualification.trim());
		initialValues.put("SelfieName", SelfieName.trim());
		initialValues.put("SelfiePath", SelfiePath.trim());
		initialValues.put("EmailID", EmailID.trim());
		initialValues.put("BloodGroup", BloodGroup.trim());
		initialValues.put("SignName", SignName.trim());
		initialValues.put("SignPath", SignPath.trim());
		initialValues.put("Sstat", Sstat);
		initialValues.put("PhotoName", PhotoName.trim());
		initialValues.put("PersonNodeId", PersonNodeId.trim());
		initialValues.put("PersonNodeType", PersonNodeType.trim());

		return db.insert(TABLE_tblDsrRegDetails, null, initialValues);
	}
	public int fngetcounttblDsrRegDetails()
	{
		int flgCheck=0;
		open();

		try {
			Cursor cursor = db.rawQuery("SELECT Count(*) from tblSoRegDetails  ", null);
			//StoreID,StoreName,LatCode,LongCode,DateAdded
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					if(cursor.getInt(0)>0)
					{
						flgCheck=1;
					}
				}
			}

		}
		catch (Exception e) {
			System.out.println("Error fnGettblUOMMstr= "+e.toString());
		}
		finally
		{

			close();
			return flgCheck;
		}
	}
	public LinkedHashMap<String, String> fnGettblDsrRegDetails()
	{
		LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
		open();

		try {                                   //0             1                         2                      3                         4           5             6              7                         8                9                           10                    11                12                   13                 14                 15                        16           17                      18
			Cursor cursor = db.rawQuery("SELECT IFNULL(IMEI,0),IFNULL(ClickedDateTime,0),IFNULL(FirstName,0),IFNULL(LastName,0),IFNULL(ContactNo,0),IFNULL(DOB,0),IFNULL(Sex,0),IFNULL(MaritalStatus,0),IFNULL(MarriedDate,0),IFNULL(Qualification,0),IFNULL(SelfieName,0),IFNULL(SelfiePath,0),IFNULL(EmailID,0),IFNULL(BloodGroup,0),IFNULL(SignName,0),IFNULL(SignPath,0),IFNULL(PhotoName,0),IFNULL(PersonNodeId,0),IFNULL(PersonNodeType,0) from tblSoRegDetails   ", null);// Where PNodeID='"+TSIID+"'
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						hmapQuestionMstr.put("DSRDETAILS",(String) cursor.getString(0) +"^"+(String) cursor.getString(1) +"^"+(String) cursor.getString(2) +"^"+(String) cursor.getString(3) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(5) +"^"+(String) cursor.getString(6) +"^"+(String) cursor.getString(7) +"^"+(String) cursor.getString(8) +"^"+(String) cursor.getString(9) +"^"+(String) cursor.getString(10) +"^"+(String) cursor.getString(11) +"^"+(String) cursor.getString(12) +"^"+(String) cursor.getString(13) +"^"+(String) cursor.getString(14) +"^"+(String) cursor.getString(15) +"^"+(String) cursor.getString(16) +"^"+(String) cursor.getString(17) +"^"+(String) cursor.getString(18));
						//    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
						cursor.moveToNext();
					}
				}
			}

		}
		catch (Exception e) {
			System.out.println("Error fnGettblUOMMstr= "+e.toString());
		}
		finally
		{

			close();
			return hmapQuestionMstr;
		}
	}


	public LinkedHashMap<String, String> fnGettblEducationQuali()
	{
		LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
		open();

		try {
			Cursor cursor = db.rawQuery("SELECT Qualification from tblEducationQuali   ", null);// Where PNodeID='"+TSIID+"'
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						hmapQuestionMstr.put((String) cursor.getString(0),(String) cursor.getString(0));
						//    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
						cursor.moveToNext();
					}
				}
			}

		}
		catch (Exception e) {
			System.out.println("Error fnGettblUOMMstr= "+e.toString());
		}
		finally
		{

			close();
			return hmapQuestionMstr;
		}
	}
			 	public int FetchflgUserAuthenticated()
				{
					int SnamecolumnIndex1 = 0;
					int CatId=0;

					Cursor cursor = db.rawQuery("SELECT flgUserAuthenticated from tblUserAuthenticationMstr", null);
					try {
						
						if (cursor.moveToFirst())
						{
							
							for (int i = 0; i <= (cursor.getCount() - 1); i++) 
							{
								
								String abc =(String) cursor.getString(SnamecolumnIndex1);
								CatId=Integer.parseInt(abc);
								cursor.moveToNext();
							}

						}
						return CatId;
					} finally {
						cursor.close();
					}
					
				}
				
				
			 	public boolean isFreeProductIdExist(int freeProductId)
			     {
			      
			      
			      open();
			       Cursor cur=db.rawQuery("Select ProductID from tblStoreProductAppliedSchemesBenifitsRecords where freeProductId ="+freeProductId, null);
			      try
			      {
			       
			        
			        if(cur.getCount()>0)
			        {
			        return true;
			        }
			        else
			        {
			        return false;
			        } 
			      }
			      finally
			      {
			       cur.close();
			       close();
			       
			      }
			      
			       
			       
			     }
			 	public String getFreeProductIdAgainstFreeProductId(int freeProductId)
			     {
			      
			      String productIdAgainstFreeProductId=null;
			      open();
			       Cursor cur=db.rawQuery("Select ProductID from tblStoreProductAppliedSchemesBenifitsRecords where freeProductId ="+freeProductId, null);
			      try
			      {
			       
			        
			        if(cur.getCount()>0)
			        {
			         if(cur.moveToFirst())
			         {
			         productIdAgainstFreeProductId=cur.getString(0);
			         }
			        
			        }
			        else
			        {
			        productIdAgainstFreeProductId="";
			        } 
			      }
			    
			      finally
			      {
			       cur.close();
			       close();
			       
			      }
			      
			      return productIdAgainstFreeProductId;
			       
			     }
			 	
			 	public String[] fectStatusIfBeniftRowIdExistsInSchemeSlabBenefitsValueDetailWithoutMultiply(int BenifitRowID,int toMultiply,Double defaultValue,int BenSubBucketType)
				  {

					open();
				   Cursor cursor2 = db.rawQuery("SELECT BenValue FROM tblSchemeSlabBenefitsValueDetail where RowID="+BenifitRowID, null);
				   if(BenSubBucketType==2 || BenSubBucketType==6 || BenSubBucketType==8)
				   {
				   toMultiply=1;
				   }
				   //////////// System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
				   String[] chkI;
				   try {
				    if(cursor2.getCount()>0)
				    {
				     chkI=new String[cursor2.getCount()+1];
				    if (cursor2.moveToFirst()) {
				     for (int i = 0; i < cursor2.getCount(); i++)
				     {
				      if(i==0)
				      {
				       chkI[i]=String.valueOf(defaultValue);
				       
				      }
				      
				      chkI[i+1]=String.valueOf((Integer.parseInt(cursor2.getString(0))));
				      
				      cursor2.moveToNext();
				     }
				     
				    }
				    }
				    else
				    {
				     chkI=new String[1];
				     chkI[0]=String.valueOf(defaultValue);
				    }

				   } finally {
				    cursor2.close();
				    close();
				   }
				   //////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
				   return chkI;
				  }
			 	
			 	 public void deleteAlrtProduct(String storeId,String _productID)
			     {
			      open();
			      Cursor cur=db.rawQuery("Select ProductID from tblAlrtVal where StoreId ='"+storeId+"' and ProductID = '"+_productID+"'",null );
			      if(cur.getCount()>0)
			      {
			       db.delete(DATABASE_TABLE_Main214, "StoreID=? AND ProductID=? ",new String[] {storeId,_productID}); 
			      }
			     
			      close();
			     }
				
			 	public int checkStoreListTableCount() 
				{
					
					Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblStoreList ", null);

					try {
						
						int check=0;
						
						if (cursor.getCount() > 0)
						{
			               if (cursor.moveToFirst()) 
			               {
			            	   
			            	   check=cursor.getCount();
			                 /* for (int i = 0; i <= (cursor.getCount() - 1); i++) 
								{
									check=1;
									cursor.moveToNext();
								}*/
							}

						}
						return check;

					} finally {
						cursor.close();
					}

				} 
			 	 
			 	 
			 	public void deleteAlreadyStoreIdExist(String CustomStoreID)
			 	{

					db.execSQL("DELETE FROM tblStoreList WHERE StoreID ='"+CustomStoreID+"' ");
					db.execSQL("DELETE FROM tblNewStoreListEntriesNewFormat WHERE StoreID ='"+CustomStoreID+"' ");
					

				}
			 	
			 	public void deletetblStoreTypeMstr()
				{
					db.execSQL("DELETE FROM tblStoreTypeMstr"); 
			     }

			public void deletetblTradeChannelMstr()
				{
					db.execSQL("DELETE FROM tblTradeChannelMstr"); 
			    }
			
			
			public void deletetblNoVisitReasonMaster()
			{
				db.execSQL("DELETE FROM tblNoVisitReasonMaster"); 
		    }
		
			
			
			
			public void deletetblStoreProductClassificationTypeListMstr()
			{
				db.execSQL("DELETE FROM tblStoreProductClassificationTypeListMstr"); 
		    }
			
			
			public void updatetblAvailableVersionMstr(String ServerDate) 
			{
				
				
		 		db.execSQL("Update tblAvailableVersionMstr Set  ServerDate='"+ServerDate+"'");
				
			}
			
			public int checkRouteIDExistInStoreListTable() 
			{
		 		int check=0;
				Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblInvoiceButtonTransac WHERE Sstat=9", null);
				try {
					if (cursor.getCount() > 0)
					{
		               if (cursor.moveToFirst()) 
		               {
		            	   if(cursor.getInt(0)>0)
		            	   {
							check=1;
		            	   }
						}
					}
					return check;
				} finally {
					cursor.close();
				}

			}

    //saving functions of dynamic saving
    public long savetblQuestionMstr(String QuestID,String QuestCode,String QuestDesc,String QuestType,String AnsControlType,String AnsControlInputTypeID,String AnsControlInputTypeMaxLength,String AnsMustRequiredFlg,String QuestBundleFlg,String ApplicationTypeID,String Sequence,String AnsControlInputTypeMinLength,String answerHint,int flgQuestIDForOutChannel,int flgNewStore,int flgStoreValidation)
    {

        ContentValues initialValues = new ContentValues();

        initialValues.put("QuestCode", Integer.parseInt(QuestCode));
        initialValues.put("QuestID", Integer.parseInt(QuestID));

        initialValues.put("QuestDesc", QuestDesc.trim());
        initialValues.put("QuestType", Integer.parseInt(QuestType));
        initialValues.put("AnsControlType", Integer.parseInt(AnsControlType));
        initialValues.put("AnsControlInputTypeID", Integer.parseInt(AnsControlInputTypeID));
        initialValues.put("AnsControlInputTypeMaxLength", Integer.parseInt(AnsControlInputTypeMaxLength));
        initialValues.put("AnsMustRequiredFlg", Integer.parseInt(AnsMustRequiredFlg));
        initialValues.put("QuestBundleFlg", Integer.parseInt(QuestBundleFlg));
        initialValues.put("ApplicationTypeID", Integer.parseInt(ApplicationTypeID));
        initialValues.put("Sequence", Integer.parseInt(Sequence));//AnsControlInputTypeMinLength
        initialValues.put("AnsControlInputTypeMinLength", Integer.parseInt(AnsControlInputTypeMinLength));
        initialValues.put("AnsHint", answerHint.trim());
        initialValues.put("flgQuestIDForOutChannel", flgQuestIDForOutChannel);
        initialValues.put("flgNewStore", flgNewStore);
        initialValues.put("flgStoreValidation", flgStoreValidation);
        ////,flgNewStore,flgStoreValidation
        return db.insert(TABLE_QuestionMstr, null, initialValues);
    }
			
		/*	public long savetblQuestionMstr(String QuestID,String QuestCode,String QuestDesc,String QuestType,String AnsControlType,String AnsControlInputTypeID,String AnsControlInputTypeMaxLength,String AnsMustRequiredFlg,String QuestBundleFlg,String ApplicationTypeID,String Sequence,String AnsControlInputTypeMinLength,String answerHint,int flgQuestIDForOutChannel,String QuestDescHindi)
		     {
		     
		          ContentValues initialValues = new ContentValues();
		          
		          initialValues.put("QuestCode", Integer.parseInt(QuestCode)); 
		          initialValues.put("QuestID", Integer.parseInt(QuestID)); 
		          
		          initialValues.put("QuestDesc", QuestDesc.trim());
		          initialValues.put("QuestType", Integer.parseInt(QuestType));
		          initialValues.put("AnsControlType", Integer.parseInt(AnsControlType));
		          initialValues.put("AnsControlInputTypeID", Integer.parseInt(AnsControlInputTypeID));
		          initialValues.put("AnsControlInputTypeMaxLength", Integer.parseInt(AnsControlInputTypeMaxLength));
		          initialValues.put("AnsMustRequiredFlg", Integer.parseInt(AnsMustRequiredFlg));
		          initialValues.put("QuestBundleFlg", Integer.parseInt(QuestBundleFlg));
		          initialValues.put("ApplicationTypeID", Integer.parseInt(ApplicationTypeID));
		          initialValues.put("Sequence", Integer.parseInt(Sequence));//AnsControlInputTypeMinLength
		          initialValues.put("AnsControlInputTypeMinLength", Integer.parseInt(AnsControlInputTypeMinLength));
		          initialValues.put("AnsHint", answerHint.trim());
		          initialValues.put("flgQuestIDForOutChannel", flgQuestIDForOutChannel);

				 initialValues.put("QuestDescHindi", QuestDescHindi);

		       return db.insert(TABLE_QuestionMstr, null, initialValues);
		     }*/

			public long savetblOutletChannelBusinessSegmentMaster(int OutChannelID,String ChannelName,int BusinessSegmentID,String BusinessSegment)
		     {
		     
		          ContentValues initialValues = new ContentValues();
		          
		          initialValues.put("OutChannelID", OutChannelID); 
		          initialValues.put("ChannelName", ChannelName); 
		          
		          initialValues.put("BusinessSegmentID", BusinessSegmentID);
		          initialValues.put("BusinessSegment", BusinessSegment);
		          
		       return db.insert(TABLE_OutletChannelBusinessSegmentMaster, null, initialValues); 
		     }
			
		  	 public long savetblQuestionDependentMstr(String QuestionID,String OptionID,String DependentQuestionID)
		     {
		          
		          ContentValues initialValues = new ContentValues();
		     
		          initialValues.put("QuestionID", Integer.parseInt(QuestionID)); 
		          initialValues.put("OptionID",Integer.parseInt(OptionID));
		          initialValues.put("DependentQuestionID", Integer.parseInt(DependentQuestionID));  
		          
		          System.out.println("QuestionID2:"+QuestionID+"OptionID2:"+OptionID+"DependentQuestionID2:"+DependentQuestionID);
		          return db.insert(TABLE_QuestionDependentMstr, null, initialValues); 
		     }
		  	 
		  	 
		  	  public long savetblOptionMstr(String OptID,String QuestID,String OptionNo,String OptionDescr,String Sequence)
		      {

				  ContentValues initialValues = new ContentValues();

				  initialValues.put("OptID", OptID);
				  initialValues.put("QuestID", Integer.parseInt(QuestID));
				  initialValues.put("OptionNo", Integer.parseInt(OptionNo));


				  initialValues.put("OptionDescr", OptionDescr.trim());
				  initialValues.put("Sequence", Integer.parseInt(Sequence));



				  return db.insert(TABLE_OptionMstr, null, initialValues);
		      }
		  	  
		  	  
		  	  
		  	  

		  	 private StringBuilder fnQuestionIdOnBasisOfDependentQuestionIDdpndntId(String dpndntQuesId, String optionId)
		      {
		     
		       String value;
		       open();
		     //tblQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";
		       Cursor cursor = db.rawQuery("SELECT GrpID from tblQuestionDependentMstr where GrpDepQuestID = '"+dpndntQuesId +"' And OptionID = '"+optionId+"'", null);// Where PNodeID='"+TSIID+"'
		       StringBuilder arrbhi=new StringBuilder();
		       try {
		        if(cursor.getCount()>0)
		       {
		         if (cursor.moveToFirst())
		        {
		          for (int i = 0; i <= (cursor.getCount() - 1); i++) {
		          // hmapDpndntQuestionMstr.put((String) cursor.getString(3).toString()+"^"+(String) cursor.getString(1).toString(), (String) cursor.getString(2).toString());
		          if(i==0)
		          {
		           arrbhi.append(cursor.getString(0));
		          }
		          else
		          {
		           arrbhi.append("^").append(cursor.getString(0));
		          }
		          
		           cursor.moveToNext();
		          }
		        }
		       }
		      
		       return arrbhi;
		       } 
		       finally 
		       {
		       cursor.close();
		       close();
		      }
		      }
		  	 
		  	 

		  	
		  	public String[] fnQuestionIdDpndnt()
		      {
		     
		       String value;
		       open();
		     
		       Cursor cursor = db.rawQuery("SELECT QuestionID from tblQuestionDependentMstr", null);// Where PNodeID='"+TSIID+"'
		       String[] arrbhi=new String[cursor.getCount()];
		       try {
		        if(cursor.getCount()>0)
		       {
		         if (cursor.moveToFirst())
		        {
		          for (int i = 0; i <= (cursor.getCount() - 1); i++) {
		          // hmapDpndntQuestionMstr.put((String) cursor.getString(3).toString()+"^"+(String) cursor.getString(1).toString(), (String) cursor.getString(2).toString());
		           arrbhi[i]=(cursor.getString(0));
		          
		          
		          
		           cursor.moveToNext();
		          }
		        }
		       }
		      
		       return arrbhi;
		       } 
		       finally 
		       {
		       cursor.close();
		       close();
		      }
		      }
		  	


		  	public int fnGetAnsValFromOptionID(int optionID)
		  	{
		  		open();
		  		int AnsVal=0;
			       Cursor cursor = db.rawQuery("SELECT tblOptionMstr.OptionNo from tblOptionMstr Where tblOptionMstr.OptID='"+optionID+"'", null);
			       try {
				        if(cursor.getCount()>0)
				       {
				        	 if (cursor.moveToFirst())
						        {
				        		 	AnsVal=Integer.parseInt(cursor.getString(0));
						        }
			        }
			       return AnsVal;
		       } 
		       finally 
		       {
		       cursor.close();
		       close();
		      }
		  	}
		  	 
		  	 
		  	/*public long savetblQuestionMstr(String QuestID,String QuestCode,String QuestDesc,String QuestType,String AnsControlType,String AnsControlInputTypeID,String AnsControlInputTypeMaxLength,String AnsMustRequiredFlg,String QuestBundleFlg,String ApplicationTypeID,String Sequence,String AnsControlInputTypeMinLength,int flgQuestIDForOutChannel)
		    {
		    
		         ContentValues initialValues = new ContentValues();
		         
		         initialValues.put("QuestCode", Integer.parseInt(QuestCode)); 
		         initialValues.put("QuestID", Integer.parseInt(QuestID)); 
		         
		         initialValues.put("QuestDesc", QuestDesc.trim());
		         initialValues.put("QuestType", Integer.parseInt(QuestType));
		         initialValues.put("AnsControlType", Integer.parseInt(AnsControlType));
		         initialValues.put("AnsControlInputTypeID", Integer.parseInt(AnsControlInputTypeID));
		         initialValues.put("AnsControlInputTypeMaxLength", Integer.parseInt(AnsControlInputTypeMaxLength));
		         initialValues.put("AnsMustRequiredFlg", Integer.parseInt(AnsMustRequiredFlg));
		         initialValues.put("QuestBundleFlg", Integer.parseInt(QuestBundleFlg));
		         initialValues.put("ApplicationTypeID", Integer.parseInt(ApplicationTypeID));
		         initialValues.put("Sequence", Integer.parseInt(Sequence));//AnsControlInputTypeMinLength
		         initialValues.put("flgQuestIDForOutChannel", flgQuestIDForOutChannel);
		        // initialValues.put("AnsControlInputTypeMinLength", Integer.parseInt(AnsControlInputTypeMinLength));
		         
		         
		      return db.insert(TABLE_QuestionMstr, null, initialValues); 
		    }*/
		  	
		  
		  	
		  	
		  	
		  	
		  	
		  	public void saveOutletQuestAnsMstr(ArrayList<ArrayList<String>> outletQuestAnsVal)
		    {
		  		
		         open();
		       
		         String OutletID,QuestID,AnswerType,AnswerValue;
		         for(int i=0;i<outletQuestAnsVal.size();i++)
		         {
		        	 ArrayList<String> outletsDetailValue=outletQuestAnsVal.get(i);
		        	
		        		  OutletID=outletsDetailValue.get(0);
		        		  QuestID=outletsDetailValue.get(1);
		        		  AnswerType=outletsDetailValue.get(2);
		        		  AnswerValue=outletsDetailValue.get(3);
		        		 
		        		  Cursor cursor = db.rawQuery("SELECT OutletID FROM tblOutletQuestAnsMstr where OutletID='"+OutletID +"' and QuestID ='"+ QuestID +"'" , null);
		    	         ContentValues initialValues = new ContentValues();
		    	         System.out.println("SavingPartCompleted ="+ OutletID+":"+QuestID+":"+AnswerType+":"+AnswerValue);
		    	        
		    	         initialValues.put("AnswerType", Integer.parseInt(AnswerType));
		    	         
		    	         
		    	         initialValues.put("AnswerValue", AnswerValue.trim());
		    	         initialValues.put("Sstat", 1);
		    	        
		    	        
		    	         if(cursor.getCount()>0)
		    	         {
		    	        	 
		    	        		int affected = db.update("tblOutletQuestAnsMstr", initialValues, "OutletID=? AND QuestID=?",
		    	    					new String[] {OutletID.trim(), QuestID.trim()});
		    	         }
		    	         else
		    	         {
		    	        	 
		    	        	  initialValues.put("QuestID", Integer.parseInt(QuestID));
		    	        	 initialValues.put("OutletID", OutletID.trim());
		    	        	 
		    	        	 db.insert(TABLE_OutletQuestAnsMstr, null, initialValues); 
		    	         }
		    	        
		        	 
		         }
		        
		         close();
		        
		    }
		  	
			public void saveViewOutletQuestAnsMstr(ArrayList<ArrayList<String>> outletQuestAnsVal)
		    {
		  		
		         open();
		       
		         String OutletID,QuestID,AnswerType,AnswerValue;
		         for(int i=0;i<outletQuestAnsVal.size();i++)
		         {
		        	 ArrayList<String> outletsDetailValue=outletQuestAnsVal.get(i);
		        	
		        		  OutletID=outletsDetailValue.get(0);
		        		  QuestID=outletsDetailValue.get(1);
		        		  AnswerType=outletsDetailValue.get(2);
		        		  AnswerValue=outletsDetailValue.get(3);
		        		  Cursor cursor = db.rawQuery("SELECT OutletID FROM tblViewOutletQuestAnsMstr where OutletID='"+OutletID +"' and QuestID ='"+ QuestID +"'" , null);
		    	         ContentValues initialValues = new ContentValues();
		    	         System.out.println("SavingPartCompleted ="+ OutletID+":"+QuestID+":"+AnswerType+":"+AnswerValue);
		    	        
		    	       
		    	         initialValues.put("AnswerType", Integer.parseInt(AnswerType));
		    	         
		    	         
		    	         initialValues.put("AnswerValue", AnswerValue.trim());
		    	         
		    	         if(cursor.getCount()>0)
		    	         {
		    	        	 
		    	        		int affected = db.update("tblViewOutletQuestAnsMstr", initialValues, "OutletID=? AND QuestID=?",
		    	    					new String[] {OutletID.trim(), QuestID.trim()});
		    	         }
		    	         else
		    	         {
		    	        	  initialValues.put("QuestID", Integer.parseInt(QuestID));
		    	        	 initialValues.put("OutletID", OutletID.trim());
		    	        	 
		    	        	 db.insert(TABLE_ViewOutletQuestAnsMstr, null, initialValues); 
		    	         }
		    	        
		        	 
		         }
		        
		         close();
		        
		    }
			
			
			 
			
			public void saveViewOutletNameAndId(String outletId,String outletName)
		    {
		  		
		         open();
		       
		        
		         Cursor cursor = db.rawQuery("SELECT OutletID FROM tblViewOutletNameAndId where OutletID='"+outletId +"'" , null);
		    	         ContentValues initialValues = new ContentValues();
		    	        
		    	        
		    	       
		    	         initialValues.put("OutletName", outletName.trim());
		    	         
		    	         
		    	     if(cursor.getCount()>0)
		    	     {
		    	    	 int affected = db.update("tblViewOutletNameAndId", initialValues, "OutletID=?",
	    	    					new String[] {outletId.trim()});
		    	     }
		    	     else
		    	     {
		    	    	 initialValues.put("OutletID", outletId.trim());
		    	    	 db.insert(TABLE_ViewOutletNameAndId, null, initialValues); 
		    	     }
		    	         
		    	        
		        	 
		   
		        
		         close();
		        
		    }
			
			public LinkedHashMap<String, String> getAllNewAddedStoreName()
			{
				LinkedHashMap<String, String> lnkdHmapAllNewAddedStore= new LinkedHashMap<>();
							
				open();
				
				Cursor cur=db.rawQuery("Select * from tblViewOutletNameAndId", null);
						if(cur.getCount()>0)
						{
							if(cur.moveToFirst())
							{
								for(int i=0;i<cur.getCount();i++)
								{
									lnkdHmapAllNewAddedStore.put(cur.getString(0), cur.getString(1));
									cur.moveToNext();
								}
							}
						}
						close();
				return lnkdHmapAllNewAddedStore;
			}
			
			
			public LinkedHashMap<String, String> getAllQuesSavedForOutlet(String outletId)
			{
				LinkedHashMap<String, String> lnkdHmapAllQuesSavedForOutlet= new LinkedHashMap<>();
							
				open();
				
				Cursor cur=db.rawQuery("Select * from tblViewOutletQuestAnsMstr where OutletID = '"+outletId+"'", null);
						if(cur.getCount()>0)
						{
//OutletID ,QuestID ,AnswerType , AnswerValue );";
							if(cur.moveToFirst())
							{
								for(int i=0;i<cur.getCount();i++)
								{
									lnkdHmapAllQuesSavedForOutlet.put(cur.getString(1)+"^"+ cur.getString(2),cur.getString(3));
									cur.moveToNext();
								}
							}
						}
						close();
				return lnkdHmapAllQuesSavedForOutlet;
			}
			
		  	
		  	//
		  	
		  	
		  	public long savedataStoreList(String StoreID,String VisitDateTime,String ActualLatitude,String ActualLongitude,String LocProvider,String Accuracy,String BateryLeftStatus,String StoreName,int ISNewStore,
					 int Sstat)
			{
				
				ContentValues initialValues = new ContentValues();

				initialValues.put("OutletID", StoreID.trim());
				initialValues.put("VisitDateTime", VisitDateTime.trim());			
								
				initialValues.put("ActualLatitude", ActualLatitude);
				initialValues.put("ActualLongitude", ActualLongitude);			
				initialValues.put("LocProvider", LocProvider);
				initialValues.put("Accuracy", Accuracy);
				initialValues.put("BateryLeftStatus", BateryLeftStatus);			
				initialValues.put("StoreName", StoreName.trim());
				initialValues.put("ISNewStore", ISNewStore);	
				initialValues.put("Sstat", Sstat);	
				
				////System.out.println("inserting records in StoreList table..");

				return db.insert(DATABASE_CREATE_TABLE_tblOutletMstr, null, initialValues);
			}
		  	
		  
		  	
		  
		 	
			
			
			 public String[] getStoreIDTblSelectedStoreIDinChangeRouteCaseStoreMapping() {

					int SnamecolumnIndex1 = 0;

						Cursor cursor = db.rawQuery("SELECT DISTINCT(OutletID) FROM tblOutletPhotoDetail where Sstat=3", null);
					try {

						String StoreName[] = new String[cursor.getCount()];

						if (cursor.moveToFirst()) {

							for (int i = 0; i <= (cursor.getCount() - 1); i++) {

								StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
								System.out.println("STORE ID 4 Pic: "+ cursor.getString(SnamecolumnIndex1));

								cursor.moveToNext();
							}
						}
						return StoreName;
					} finally {
						cursor.close();
					}

				}
			 
			 public int getExistingPicNosStoreMapping(String OutId) {

					int ScodecolumnIndex = 0;

					Cursor cursor = db.rawQuery("SELECT Count(OutletID) FROM tblOutletPhotoDetail where OutletID='" + OutId + "'", null);
					try {
						int strProdStockQty = 0;
						if (cursor.moveToFirst()) {

							for (int i = 0; i <= (cursor.getCount() - 1); i++) {
								if (!cursor.isNull(ScodecolumnIndex)) {
									strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex));
									cursor.moveToNext();
								}

							}
						}
						return strProdStockQty;
					} finally {
						cursor.close();
					}
				}
			 
			 public String[] getImgsPath(String StoreID)
			 {

					int SnamecolumnIndex1 = 0;

					Cursor cursor = db.rawQuery("SELECT PhotoName FROM tblStoreMaterialPhotoDetail WHERE StoreID ='"+ StoreID + "'", null);
					try {

						String StoreName[] = new String[cursor.getCount()];
						
						if (cursor.moveToFirst()) {

							for (int i = 0; i <= (cursor.getCount() - 1); i++) {

								StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);

								cursor.moveToNext();
							}
						}
						return StoreName;
					} finally {
						cursor.close();
					}

				}
			 
			 
			/* public void updateRecordsSyncd() 
				{
				 try 
					{

	                    final ContentValues values = new ContentValues();
						values.put("Sstat", "4");
						int affected = db.update("tblOutletMstr", values, "Sstat=?",
								new String[] { "3" });
						int affected2 = db.update("tblOutletQuestAnsMstr", values, "Sstat=?",
								new String[] { "3" });
						int affected3 = db.update("tblOutletPhotoDetail", values, "Sstat=?",
								new String[] { "3" });
						
					} 
					catch (Exception ex) 
					{
						
					}

				}*/
			 
			 
			 public void updatexmlSyncdData() 
				{
				 try 
					{

	                 final ContentValues values = new ContentValues();
						values.put("Sstat", "4");
						int affected = db.update("tblOutletMstr", values, "Sstat=?",
								new String[] { "3" });
						int affected2 = db.update("tblOutletQuestAnsMstr", values, "Sstat=?",
								new String[] { "3" });
						
					} 
					catch (Exception ex) 
					{
						
					}

				}
			 
			 public void updatePhotoSyncdData() 
				{
				 try 
					{

	              final ContentValues values = new ContentValues();
						values.put("Sstat", "4");
						int affected3 = db.update("tblOutletPhotoDetail", values, "Sstat=?",
								new String[] { "3" });
						
					} 
					catch (Exception ex) 
					{
						
					}

				}
			 
			
		  	 
			 
			 
			 public void deletetblOutletPhotoDetailBasedOutletID(String OutletID) 
		     {
		      open();
		      
		    
		      db.execSQL("DELETE FROM tblOutletPhotoDetail WHERE OutletID ='"+ OutletID + "'");
		     
		   
		      
		      close(); 
		     }
		  	 
			 
			 
			/* private static final String DATABASE_CREATE_TABLE_tblOutletMstr = "create table tblOutletMstr" +
			 		" (OutletID text not null,VisitDateTime string not null,Sstat integer not null,ActualLatitude text null," +
			 		" ActualLongitude text null, ISNewStore int null, LocProvider text null, Accuracy text null," +
			 		" BateryLeftStatus text null,String StoreName);";
			 */
			 
				public long savetblOutletMstr(String OutletID,String VisitDateTime,String ActualLatitude,
						String ActualLongitude,String LocProvider,String Accuracy,String BateryLeftStatus,String StoreName,
						int ISNewStore,int Sstat)
			    {
			    
			         ContentValues initialValues = new ContentValues();
			         
			         initialValues.put("OutletID", OutletID); 
			         initialValues.put("VisitDateTime", VisitDateTime); 
			         
			         initialValues.put("ActualLatitude", ActualLatitude);
			         initialValues.put("ActualLongitude", ActualLongitude);
			         initialValues.put("LocProvider", LocProvider);
			         initialValues.put("Accuracy", Accuracy);
			         initialValues.put("BateryLeftStatus", BateryLeftStatus);
			         initialValues.put("StoreName", StoreName);
			         initialValues.put("ISNewStore", ISNewStore);
			         initialValues.put("Sstat", Sstat);
			       
			         
			      return db.insert(TABLE_OutletMstr, null, initialValues); 
			    }
				
				
				/*private static final String DATABASE_CREATE_TABLE_OutletPhotoDetail = "create table tblOutletPhotoDetail" +
						"(OutletID text null,ClickedDateTime text null,PhotoName text null,PhotoComment text null," +
						"PDAPhotoPath text null,Sstat integer null);";*/
				
					
				
				 public long insertPhotoDetail(String OutletID,String ClickedDateTime,String PhotoName,
						 String PhotoComment,String PDAPhotoPath,int Sstat)
					 {

		               open();
					   ContentValues initialValues = new ContentValues();
					  
					   initialValues.put("OutletID", OutletID.trim()); 
					   initialValues.put("ClickedDateTime", ClickedDateTime.trim());
					   initialValues.put("PhotoName", PhotoName.trim()); 
					   initialValues.put("PhotoComment", PhotoComment.trim()); 
					  
					   initialValues.put("PDAPhotoPath", PDAPhotoPath.trim());
					   initialValues.put("Sstat", Sstat);
					   
					  long inserted=db.insert(TABLE_StoreProductPhotoDetail, null, initialValues); 
					  close();
					   return inserted;
					 }
				 
				 
				 public String[] deletFromSDcCardPhotoValidationBasedSstat(String Sstat) {

					 String[] imageNameToBeDeleted = null;
					 open();
					
					 Cursor cursor = db.rawQuery("SELECT  PhotoName from tblStoreProductPhotoDetail where Sstat='"+Sstat+"'", null);
					 try{
							if(cursor.getCount()>0)
							{
								imageNameToBeDeleted=new String[cursor.getCount()];
								if(cursor.moveToFirst())
								{
									for(int i=0;i<cursor.getCount();i++)
									{
										imageNameToBeDeleted[i]=cursor.getString(0);
										cursor.moveToNext();
									}
								}
							}
							else
							{
								imageNameToBeDeleted=new String[1];
								imageNameToBeDeleted[0]="No Data";
							}
					 }finally
					 {
						 cursor.close();
						 close(); 
					 }

						
					//	Log.w(TAG, "affected records: " + affected);

						//Log.w(TAG, "UpdateStoreActualLatLongi added..");
					 return imageNameToBeDeleted;
					}
				 
				 
				 public String[] deletFromSDcCardPhotoValidationNewStore(String OutletID) {

					 String[] imageNameToBeDeleted = null;
					 open();
					
					 Cursor cursor = db.rawQuery("SELECT  PhotoName from tblOutletPhotoDetail where OutletID='"+OutletID+"'", null);
					 try{
							if(cursor.getCount()>0)
							{
								imageNameToBeDeleted=new String[cursor.getCount()];
								if(cursor.moveToFirst())
								{
									for(int i=0;i<cursor.getCount();i++)
									{
										imageNameToBeDeleted[i]=cursor.getString(0);
										cursor.moveToNext();
									}
								}
							}
							else
							{
								imageNameToBeDeleted=new String[1];
								imageNameToBeDeleted[0]="No Data";
							}
					 }finally
					 {
						 cursor.close();
						 close(); 
					 }

						
					//	Log.w(TAG, "affected records: " + affected);

						//Log.w(TAG, "UpdateStoreActualLatLongi added..");
					 return imageNameToBeDeleted;
					}

				 
				 /*private static final String DATABASE_CREATE_TABLE_tblOutletMstr = "create table tblOutletMstr " +
				 		"(OutletID text not null,VisitDateTime string not null,Sstat integer not null,ActualLatitude text null, " +
				 		"ActualLongitude text null, ISNewStore int null, LocProvider text null, Accuracy text null," +
				 		" BateryLeftStatus text null,String StoreName);";*/
				 
				 public long inserttblOutletMstr(String OutletID,String VisitStartTS,String ActualLatitude,
						 String ActualLongitude,String Accuracy,String LocProvider,String BateryLeftStatus,String StoreName,
						 String imei,int ISNewStore,int Sstat,int AppVersion)
					 {

		               open();
					   ContentValues initialValues = new ContentValues();
					  
					   initialValues.put("OutletID", OutletID.trim()); 
					   initialValues.put("VisitStartTS", VisitStartTS.trim());
					  
					   initialValues.put("ActualLatitude", ActualLatitude.trim()); 
					   initialValues.put("ActualLongitude", ActualLongitude.trim()); 
					  
					  
					   initialValues.put("Accuracy", Accuracy.trim());
					   initialValues.put("LocProvider", LocProvider.trim());
					   initialValues.put("BateryLeftStatus", BateryLeftStatus.trim());
					   initialValues.put("StoreName", StoreName.trim());
					   initialValues.put("imei", imei.trim());
					   
					   initialValues.put("ISNewStore", 1);
					   initialValues.put("Sstat", Sstat);
					   initialValues.put("AppVersion", AppVersion);
					   
					   System.out.println("Data insert in OutletMstr");
					   
					  long inserted=db.insert(TABLE_OutletMstr, null, initialValues); 
					  close();
					   return inserted;
					 }
				 
				 
				 public void UpdateStoreEndVisitNewStore(String OutletID, String VisitEndTS)
				 { open();
						final ContentValues values = new ContentValues();
						
						values.put("VisitEndTS", VisitEndTS);

						int affected = db.update("tblOutletMstr", values,"OutletID=? and VisitStartTS is not null",
								new String[] { OutletID });
						 close();
						
					}
				 
				 
				 // static final String DATABASE_CREATE_TABLE_tblOutletMstr = "create table tblOutletMstr (OutletID text not null,VisitDateTime text not null,ActualLatitude text null, ActualLongitude text null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreName text null,imei text null, ISNewStore int null,Sstat integer not null);";
					
				 
				 public int counttblContainNotSyncData(int Sstat) 
				 	{
				 		Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblOutletMstr WHERE Sstat ="+ Sstat, null);
				 		int chkI = 0;
				 		try {
				 			
				 			if (cursorE2.moveToFirst()) {

				 				if (cursorE2.getInt(0) > 0) {
				 					chkI = 1;
				 				} else {
				 					chkI = 0;
				 				}
				 			}

				 		} finally {
				 			cursorE2.close();
				 		}
				 		return chkI;
				 	}
				 
				 
				 public LinkedHashMap<String, String> fetch_Store_List()
					{
				  		
				  		open();
						LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
						
						
							Cursor	cursor = db.rawQuery("SELECT tblStoreList.StoreID, tblStoreList.StoreName, IFNULL(tblInvoice.InvoiceVal,0) FROM tblStoreList left outer join tblInvoice on tblStoreList.StoreID=tblInvoice.StoreID", null); //order by AutoIdOutlet Desc
						
						try 
						{
							if(cursor.getCount()>0)
							{
								if (cursor.moveToFirst()) 
								{
									
									for (int i = 0; i <= (cursor.getCount() - 1); i++)
									{
										//hmapCatgry.put(cursor.getString(0).toString(),cursor.getString(1).toString() + "( Order Value:-"+cursor.getString(2).toString()+")");
										hmapCatgry.put((i+1)+")  "+ cursor.getString(1) + "   [ Order Value:->"+ cursor.getString(2) +" ]", cursor.getString(0));
										
										cursor.moveToNext();
									}
								}
								
							}
							
							else
							{
								hmapCatgry.put("No Store", "0");
							}
							return hmapCatgry;
						}
						finally
						{
							cursor.close();
							close();
						}
					}
				 
					public long savetblMessageTextFileContainer(String FileName,int FileFlag) 
					{
						ContentValues initialValues = new ContentValues();
						
						initialValues.put("FileName", FileName);
						initialValues.put("FileFlag", FileFlag);
						
						System.out.println("inserting records in DATABASE_CREATE_TABLE_2..");

						return db.insert(DATABASE_TABLE_MAIN251, null, initialValues);
					}
					
					
					
					
					/*private static final String DATABASE_CREATE_TABLE_253 = "create table tblNoVisitStoreDetails " +
							"(IMEI text null,CurDate text null,ReasonId text null,ReasonDescr text null,flgHasVisit " +
							"integer null,Sstat integer null);";*/
					
					/* private static final String DATABASE_CREATE_TABLE_253 = "create table tblNoVisitStoreDetails(IMEI text null,CurDate text null," +
					 		"ReasonId text null,ReasonDescr text null,flgHasVisit integer null,Sstat integer null);";*/
						
					
					
					public long savetblNoVisitStoreDetails(String IMEI,String CurDate,String ReasonId,String ReasonDescr,int flgHasVisit,int Sstat) 
					{
						open();
						
						ContentValues initialValues = new ContentValues();
						
						initialValues.put("IMEI", IMEI);
						initialValues.put("CurDate", CurDate);
						initialValues.put("ReasonId", ReasonId);
						initialValues.put("ReasonDescr", ReasonDescr);
						initialValues.put("flgHasVisit", flgHasVisit);
						initialValues.put("Sstat", Sstat);
						

						 long inserted=db.insert(TABLE_tblNoVisitStoreDetails_Define, null, initialValues);
						  close();
						  return inserted;
					}
					
					public void deletetblNoVisitStoreDetails()
					{
						db.execSQL("DELETE FROM tblNoVisitStoreDetails"); 
				    }
					
					
					 public void updateCurDatetblNoVisitStoreDetails(String CurDate) 
						{
						 open();
						 try 
							{

			              final ContentValues values = new ContentValues();
								values.put("CurDate", CurDate);
								int affected3 = db.update("tblNoVisitStoreDetails", values, "CurDate=?",new String[] { "NA" });
								
							} 
							catch (Exception ex) 
							{
								
							}
						 finally
							{
								close();
							}

						}

	public void updateReason(String storeId,String productId,String reason)
	{
		//"create table tblStoreProductPhotoDetail (StoreID text null,ProductID text null,ClickedDateTime text null,PhotoName text null,ReasonForReturn text null,PhotoValidation text null,PDAPhotoPath text null,Sstat integer null,OrderIDPDA text null);";
		Cursor cur=db.rawQuery("Select ReasonForReturn from tblStoreProductPhotoDetail where StoreID='"+storeId+"' AND ProductID='"+productId+"'", null);
		if(cur.getCount()>0)
		{
			ContentValues values=new ContentValues();
			values.put("ReasonForReturn", reason);
			db.update(DATABASE_TABLE_Main212, values, "StoreID=? AND ProductID=?", new String[]{storeId,productId});
		}

	}
					
					 public void updateReasonIdAndDescrtblNoVisitStoreDetails(String ReasonId,String ReasonDescr) 
						{
						 open();
						 try 
							{

			              final ContentValues values = new ContentValues();
								values.put("ReasonId", ReasonId);
								values.put("ReasonDescr", ReasonDescr);
								int affected3 = db.update("tblNoVisitStoreDetails", values, "ReasonId=?",
										new String[] { "0" });
								
							} 
							catch (Exception ex) 
							{
								
							}
						 finally
							{
								close();
							}

						}
					 
					 public void updateSstattblNoVisitStoreDetails(int Sstat) 
						{
						 open();
						 try 
							{

			              final ContentValues values = new ContentValues();
								values.put("Sstat", Sstat);
								int affected32 = db.update("tblNoVisitStoreDetails", values, "Sstat=?",
										new String[] { "0" });
								
							} 
							catch (Exception ex) 
							{
								
							}
						 finally
							{
								close();
							}

						}
					 
					 public void updateSstattblNoVisitStoreDetailsAfterSync(int Sstat) 
						{
						 open();
						 try 
							{

			              final ContentValues values = new ContentValues();
								values.put("Sstat", Sstat);
								int affected32 = db.update("tblNoVisitStoreDetails", values, "Sstat=?",
										new String[] { "3" });
								
							} 
							catch (Exception ex) 
							{
								
							}
						 finally
							{
								close();
							}

						}
					 
					 
					 public int fetchflgHasVisitFromtblNoVisitStoreDetails(String Sstat) {

						int flag=0;
						 open();
						
						 Cursor cursor = db.rawQuery("SELECT  flgHasVisit from tblNoVisitStoreDetails where Sstat='"+Sstat+"' or Sstat='"+3+"'", null);
						 try{
								if(cursor.getCount()>0)
								{
									if(cursor.moveToFirst())
									{
										for(int i=0;i<cursor.getCount();i++)
										{
											flag=Integer.parseInt(cursor.getString(0));
											cursor.moveToNext();
										}
									}
								}
								
						 }finally
						 {
							 cursor.close();
							 close(); 
						 }
                 	 return flag;
						}
					 
					 public int countDataIntblNoVisitStoreDetails()  throws IOException
						{
						    int chkI = 0;
							open();
							
							Cursor cursorE2 = db.rawQuery("SELECT Count(*) from tblNoVisitStoreDetails where Sstat=3", null);
							
							try {
								if (cursorE2.moveToFirst()) {

									if (cursorE2.getInt(0) > 0) {
										chkI = 1;
									} else {
										chkI = 0;
									}
								}

							} finally {
								cursorE2.close();
								close();
							}
							return chkI;
						}
					 
					 
					 public String[] fnGetALLDataInfo() 
				     {
				            open();
				            Cursor cursorE2 = db.rawQuery("SELECT * FROM  tblNoVisitStoreDetails", null);
				      String AllProductInSlab[] = new String[cursorE2.getCount()];
				      
				      try {
				            if(cursorE2.getCount()>0)
				              {
				          if (cursorE2.moveToFirst())
				          {
				       
				           for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
				           {
				            AllProductInSlab[i] = (String) cursorE2.getString(0) +"^"+(String) cursorE2.getString(1) +"^"+(String) cursorE2.getString(2) +"^"+(String) cursorE2.getString(3) +"^"+(String) cursorE2.getString(4) +"^"+(String) cursorE2.getString(5);
				            cursorE2.moveToNext();
				           
				           }
				          }
				        }
				         return AllProductInSlab;
				      } finally {
				       cursorE2.close();
				       close();
				      }

				     }
					 
					 public int countDataIntblNoVisitReasonMaster()  throws IOException
						{
						    int chkI = 0;
							open();
							
							Cursor cursorE2 = db.rawQuery("SELECT Count(*) from tblNoVisitReasonMaster", null);
							
							try {
								if (cursorE2.moveToFirst()) {

									if (cursorE2.getInt(0) > 0) {
										chkI = 1;
									} else {
										chkI = 0;
									}
								}

							} finally {
								cursorE2.close();
								close();
							}
							return chkI;
						}
					 
					 
					 
					/* private static final String DATABASE_CREATE_TABLE_252 = "create table tblNoVisitReasonMaster " +
					 		"(ReasonId text null,ReasonDescr text null,FlgToShowTextBox integer null);";*/
					 
					/* public long savetblNoVisitReasonMaster(int AutoIdStore,String ReasonId,String ReasonDescr,int FlgToShowTextBox)
						{
											
											ContentValues initialValues = new ContentValues();
											initialValues.put("AutoIdStore", AutoIdStore); 
											initialValues.put("ReasonId", ReasonId); 
											initialValues.put("ReasonDescr", ReasonDescr.trim()); 
											initialValues.put("FlgToShowTextBox", FlgToShowTextBox); 
										
											//// System.out.println("Arjun data insert properly tblTradeChannelMstr ");
											return db.insert(TABLE_tblNoVisitReasonMaster_Define, null, initialValues);
						}*/

    public long savetblNoVisitReasonMaster(int AutoIdStore,String ReasonId,String ReasonDescr,
                                           int FlgToShowTextBox,int flgSOApplicable,int flgDSRApplicable,
                                           int flgNoVisitOption,int SeqNo,int flgDelayedReason)
    {

        ContentValues initialValues = new ContentValues();
        initialValues.put("AutoIdStore", AutoIdStore);
        initialValues.put("ReasonId", ReasonId);
        initialValues.put("ReasonDescr", ReasonDescr.trim());
        initialValues.put("FlgToShowTextBox", FlgToShowTextBox);

        initialValues.put("flgSOApplicable", flgSOApplicable);
        initialValues.put("flgDSRApplicable", flgDSRApplicable);
        initialValues.put("flgNoVisitOption", flgNoVisitOption);
        initialValues.put("SeqNo", SeqNo);
        initialValues.put("flgDelayedReason", flgDelayedReason);


        return db.insert(TABLE_tblNoVisitReasonMaster_Define, null, initialValues);
    }
						
					 public LinkedHashMap<String, String> fetch_Reason_List()
						{
							open();
							LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
							Cursor cursor = db.rawQuery("SELECT ReasonId,ReasonDescr FROM tblNoVisitReasonMaster",null);
							try 
							{
								if(cursor.getCount()>0)
								{
									if (cursor.moveToFirst()) 
									{
										hmapCatgry.put("Select Reason", "0");
										for (int i = 0; i <= (cursor.getCount() - 1); i++)
										{
											hmapCatgry.put(cursor.getString(1), cursor.getString(0));
											cursor.moveToNext();
										}
									}
									
								}
								
								else
								{
									hmapCatgry.put("No Reason", "0");
								}
								return hmapCatgry;
							}
							finally
							{
								cursor.close();
								close();
							}
						}

    public LinkedHashMap<String, String> fetch_Reason_Late()
    {
        open();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
        Cursor cursor = db.rawQuery("SELECT ReasonId,ReasonDescr FROM tblNoVisitReasonMaster where flgSOApplicable=1 and  flgDelayedReason=1",null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    hmapCatgry.put("Select Reason", "0");
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        hmapCatgry.put(cursor.getString(1), cursor.getString(0));
                        cursor.moveToNext();
                    }
                }

            }

            else
            {
                hmapCatgry.put("No Reason", "0");
            }
            return hmapCatgry;
        }
        finally
        {
            cursor.close();
            close();
        }
    }
					 
					 public int fetchFlgToShowTextBox(String ReasonDescr) {

						 int FlgToShowTextBox=0;
						 open();
						
						 Cursor cursor = db.rawQuery("SELECT  FlgToShowTextBox from tblNoVisitReasonMaster where ReasonDescr='"+ReasonDescr+"'", null);
						 try{
								if(cursor.getCount()>0)
								{
									
									if(cursor.moveToFirst())
									{
										for(int i=0;i<cursor.getCount();i++)
										{
											FlgToShowTextBox=Integer.parseInt(cursor.getString(0));
											cursor.moveToNext();
										}
									}
								}
								
						 }finally
						 {
							 cursor.close();
							 close(); 
						 }

						 return FlgToShowTextBox;
						}
					 
					 
					 public String fetchReasonIdBasedOnReasonDescr(String ReasonDescr) {

						 String ReasonId="0";
						 open();
						
						 Cursor cursor = db.rawQuery("SELECT  ReasonId from tblNoVisitReasonMaster where ReasonDescr='"+ReasonDescr+"'", null);
						 try{
								if(cursor.getCount()>0)
								{
									
									if(cursor.moveToFirst())
									{
										for(int i=0;i<cursor.getCount();i++)
										{
											ReasonId=cursor.getString(0);
											cursor.moveToNext();
										}
									}
								}
								
						 }finally
						 {
							 cursor.close();
							 close(); 
						 }

						 return ReasonId;
						}
					 
					 
					 public String fetchReasonDescr() {

						 String ReasonId="0";
						 open();
						
						 Cursor cursor = db.rawQuery("SELECT  ReasonDescr from tblNoVisitReasonMaster", null);
						 try{
								if(cursor.getCount()>0)
								{
									
									if(cursor.moveToFirst())
									{
										for(int i=0;i<cursor.getCount();i++)
										{
											ReasonId=cursor.getString(0);
											cursor.moveToNext();
										}
									}
								}
								
						 }finally
						 {
							 cursor.close();
							 close(); 
						 }

						 return ReasonId;
						}
					 
					 
					 public String[] fetchDateFromtblStorePOSLastVisitDateDetail(String StoreID) 
						{
							open();
							Cursor cursor = db
									.rawQuery("SELECT LastVisitDate FROM tblStorePOSLastVisitDateDetail WHERE StoreID ='"+ StoreID + "'", null);

							try {
								
								String CompleteResult[] = new String[cursor.getCount()];
								if (cursor.getCount() > 0) {

									if (cursor.moveToFirst()) {

										for (int i = 0; i <= (cursor.getCount() - 1); i++) {
											CompleteResult[i] = (String) cursor.getString(0);
											
											cursor.moveToNext();
										}
									}

								}
								return CompleteResult;

							} finally {
								cursor.close();
								close();
							}

						}
					 
					//  private static final String DATABASE_CREATE_TABLE_165 = "create table 
					 //tblStorePOSLastVisitDateDetail (StoreID text null,LastVisitDate text null);";
						 
						
					 public long savetblStorePOSLastVisitDateDetail(String StoreID, String LastVisitDate) 
						{
						
							ContentValues initialValues = new ContentValues();
							initialValues.put("StoreID", StoreID.trim());
							initialValues.put("LastVisitDate", LastVisitDate.trim());
							
							
							return db.insert(DATABASE_TABLE_Main165, null, initialValues);
							
						}
					 
					 
					/* private static final String DATABASE_CREATE_TABLE_166 = "create table " +
					 		"tblStorePOSLastVisitALLMaterialDetails (StoreID text null,POSMaterialID text null," +
					 		"POSMaterialDescr text null,CurrentStockQty text null,NewOrderQty text null," +
					 		"ReturnQty text null,DamageQty text null);";*/
						
					 
					 public long savetblStorePOSLastVisitALLMaterialDetails(String StoreID, String POSMaterialID,String POSMaterialDescr
							 ,String CurrentStockQty,String NewOrderQty,String ReturnQty,String DamageQty) 
						{
						
							ContentValues initialValues = new ContentValues();
							initialValues.put("StoreID", StoreID.trim());
							initialValues.put("POSMaterialID", POSMaterialID.trim());
							initialValues.put("POSMaterialDescr", POSMaterialDescr.trim());
							initialValues.put("CurrentStockQty", CurrentStockQty.trim());
							initialValues.put("NewOrderQty", NewOrderQty.trim());
							initialValues.put("ReturnQty", ReturnQty.trim());
							initialValues.put("DamageQty", DamageQty.trim());
							
							
							return db.insert(DATABASE_TABLE_Main166, null, initialValues);
							
						}
					 
					 public void Delete_tblLastVisitDetailsForPOS()
						{
							db.execSQL("DELETE FROM tblStorePOSLastVisitDateDetail");
							
							db.execSQL("DELETE FROM tblStorePOSLastVisitALLMaterialDetails");
							
							
						}
					 
					 
					 public int counttblStorePOSLastVisitDateDetail(String StoreID) 
						{
						 open();
							Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStorePOSLastVisitDateDetail WHERE StoreID ='"+ StoreID + "'", null);
							int chkI = 0;
							try {
								if (cursorE2.moveToFirst()) {

									if (cursorE2.getInt(0) > 0) {
										chkI = 1;
									} else {
										chkI = 0;
									}
								}

							} finally {
								cursorE2.close();
								close();
							}
							return chkI;
						}
					 
					 public int counttblStorePOSLastVisitALLMaterialDetails(String StoreID) 
						{
						 open();
							Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStorePOSLastVisitALLMaterialDetails WHERE StoreID ='"+ StoreID + "'", null);
							int chkI = 0;
							try {
								if (cursorE2.moveToFirst()) {

									if (cursorE2.getInt(0) > 0) {
										chkI = 1;
									} else {
										chkI = 0;
									}
								}

							} finally {
								cursorE2.close();
								close();
							}
							return chkI;
						}
					 
					 
					 
					/* private static final String DATABASE_CREATE_TABLE_166 = "create table " +
					 		"tblStorePOSLastVisitALLMaterialDetails (StoreID text null,POSMaterialID text null," +
					 		"POSMaterialDescr text null,CurrentStockQty text null,NewOrderQty text null," +
					 		"ReturnQty text null" +
					 		",DamageQty text null);";*/
					 
						public ArrayList<LinkedHashMap<String, String>> fetch_tblStorePOSLastVisitALLMaterialDetails(String StoreID) {
							open();
							ArrayList<LinkedHashMap<String, String>> totalProductDetail= new ArrayList<>();
							
							LinkedHashMap<String, String> hmapStoreIDPOSMaterialID= new LinkedHashMap<>();
							
							LinkedHashMap<String, String> hmapPOSMaterialIDPOSMaterialDescr= new LinkedHashMap<>();
							
							LinkedHashMap<String, String> hmapPOSMaterialIDCurrentStockQty= new LinkedHashMap<>();
							
							LinkedHashMap<String, String> hmapPOSMaterialIDNewOrderQty= new LinkedHashMap<>();
							
							LinkedHashMap<String, String> hmapPOSMaterialIDReturnQty= new LinkedHashMap<>();
							
							LinkedHashMap<String, String> hmapPOSMaterialIDDamageQty= new LinkedHashMap<>();
							
							   Cursor cursor = db.rawQuery("SELECT StoreID,POSMaterialID,POSMaterialDescr,CurrentStockQty,NewOrderQty,ReturnQty,DamageQty  FROM tblStorePOSLastVisitALLMaterialDetails WHERE StoreID ='"+ StoreID + "'", null);
							 try
							{
								if(cursor.getCount()>0)
								{
									if (cursor.moveToFirst()) {

										for (int i = 0; i < cursor.getCount(); i++) 
										{
											hmapStoreIDPOSMaterialID.put(cursor.getString(1), cursor.getString(0));
											hmapPOSMaterialIDPOSMaterialDescr.put(cursor.getString(1), cursor.getString(2));
											hmapPOSMaterialIDCurrentStockQty.put(cursor.getString(1), cursor.getString(3));
											hmapPOSMaterialIDNewOrderQty.put(cursor.getString(1), cursor.getString(4));
											hmapPOSMaterialIDReturnQty.put(cursor.getString(1), cursor.getString(5));
											hmapPOSMaterialIDDamageQty.put(cursor.getString(1), cursor.getString(6));
											
											cursor.moveToNext();
											
										}
										totalProductDetail.add(hmapStoreIDPOSMaterialID);
										totalProductDetail.add(hmapPOSMaterialIDPOSMaterialDescr);
										totalProductDetail.add(hmapPOSMaterialIDCurrentStockQty);
										totalProductDetail.add(hmapPOSMaterialIDNewOrderQty);
										totalProductDetail.add(hmapPOSMaterialIDReturnQty);
										totalProductDetail.add(hmapPOSMaterialIDDamageQty);
										
									}
								}
								
							
								return totalProductDetail;
							} finally {
								cursor.close();
								
								close();
							}
							
							
						}
						
						
					/*	private static final String DATABASE_CREATE_TABLE_13 = "create table tblStoreList (StoreID text not " +
								"null, StoreType string not null, StoreName string not null, StoreLatitude real not null," +
								" StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not " +
								"null, Sstat integer not null, ForDate string not null, ActualLatitude text null, " +
								"ActualLongitude text null, VisitStartTS text null, VisitEndTS text null,AutoIdStore int null," +
								" LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreClose integer null" +
								",StoreNextDay integer null,chainID integer null,ISNewStore int null,StoreRouteID int null);";
						*/
						
						public int checkAnyDataSubmitORNot(int Sstat) 
						{
							open();
							Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblStoreList WHERE Sstat ="+Sstat, null);

							try {
								
								int check=0;
								
								if (cursor.getCount() > 0)
								{
					               if (cursor.moveToFirst()) 
					               {
					            	   if (cursor.getInt(0) > 0) {
					            		   check = 1;
					   				} else {
					   					check = 0;
					   				}
											
										
									}

								}
								return check;

							} finally {
								cursor.close();
								close();
							}

						}
						
						
						/* private static final String DATABASE_CREATE_TABLE_163 = "create table tblStoreMaterialDetail " +
						 		"(RouteID text null,StoreID text null,MaterialID text null,ExistStock integer null," +
						 		"ReturntoDistributor integer null,FreshOrder integer null,DiscardDamage integer null," +
						 		"Sstat integer null);"; */
						
						public void deleteOldtblStoreMaterialDetail(String StoreID)
						{
							 open();
							 try
							 {
							db.execSQL("DELETE FROM tblStoreMaterialDetail WHERE StoreID ='" + StoreID + "'");
							 }
							 catch(Exception e)
							 {
								 
							 }
							finally
							{
								close();
							}

						}
						
						
						// New Sync way
						
						public String[] getAllStoreIDIntblStoreReturnPhotoDetail()
						{
					       
							int SnamecolumnIndex1 = 0;

							
							 Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tblStoreProductPhotoDetail where Sstat=5", null);
							//Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
							try
							{
					            String StoreName[] = new String[cursor.getCount()];

								if (cursor.moveToFirst())
								{
					               for (int i = 0; i <= (cursor.getCount() - 1); i++) 
									{
					                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
										cursor.moveToNext();
									}
								}
								
								return StoreName;
							}
							finally 
							{
								cursor.close();
							}

						}
						
						public int getExistingPicNosForReturn(String StoreID) 
						{

							int ScodecolumnIndex = 0;

							Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tblStoreProductPhotoDetail where StoreID='" + StoreID + "'", null);
							try {
								int strProdStockQty = 0;
								if (cursor.moveToFirst()) {

									for (int i = 0; i <= (cursor.getCount() - 1); i++) {
										if (!cursor.isNull(ScodecolumnIndex)) {
											strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex));
											cursor.moveToNext();
										}

									}
								}
								return strProdStockQty;
							} finally {
								cursor.close();
							}
						}
						
						 public String[] getImgsPathForReturn(String StoreID)
						 {

								int SnamecolumnIndex1 = 0;

								Cursor cursor = db.rawQuery("SELECT PhotoName FROM tblStoreProductPhotoDetail WHERE StoreID ='"+ StoreID + "'", null);
								try
								{

									String StoreName[] = new String[cursor.getCount()];
									
									if (cursor.moveToFirst())
									{

										for (int i = 0; i <= (cursor.getCount() - 1); i++)
										{

											StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
											cursor.moveToNext();
										}
									}
									return StoreName;
								} finally {
									cursor.close();
								}

							}
						 
						 public void updateImageRecordsSyncdForReturn(String PhotoName) 
							{
					          
								try 
								{
									open();
									System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
									final ContentValues values = new ContentValues();
									values.put("Sstat", 4);
									
									int affected3 = db.update("tblStoreProductPhotoDetail", values, "PhotoName=?",new String[] { PhotoName });
								} 
								catch (Exception ex) 
								{
									Log.e(TAG, ex.toString());
								}
								finally
								 {
									 close(); 
								 }


							}
						 
						 public void updateImageRecordsSyncd() 
							{
					          
								try 
								{
									

									final ContentValues values = new ContentValues();
									values.put("Sstat", "4");
								/*	int affected = db.update("tblUserLoginMstr", values, "Sstat=?",
											new String[] { "3" });*/
									int affected2 = db.update("tblStoreList", values, "Sstat=?",
											new String[] { "3" });
									int affected3 = db.update("tblOutletPhotoDetail", values, "Sstat=?",
											new String[] { "5" });
									int affected4 = db.update("tblStoreMaterialPhotoDetail", values, "Sstat=?",
											new String[] { "5" });
									int affected5 = db.update("tableImage", values, "Sstat=?",
											new String[] { "5" });
									
									
									
									
								} 
								catch (Exception ex) 
								{
									Log.e(TAG, ex.toString());
								}

							}
						 

							
						 public void deleteAllXmlDataTable(String Sstat) 
					      {
					       
					       open();
					       db.execSQL("DELETE FROM tblOutletQuestAnsMstr WHERE Sstat ="+ Sstat);
					       db.execSQL("DELETE FROM tblOutletQuestAnsTempMapping WHERE Sstat ="+ Sstat);
					       db.execSQL("DELETE FROM tblPDARetailerProductSaving WHERE Sstat ="+ Sstat);
					       db.execSQL("DELETE FROM tableImage WHERE Sstat ="+ Sstat);
					       
					      	close();      
					    
					       
					       
					      }
    public void UpdateStoreFlagSO(String sID, int flag2set)
    {

        try
        {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected = db.update("tblPreAddedStores", values, "StoreID=?",new String[] { sID });

            int affected1 = db.update("tblOutletQuestAnsMstr", values,"OutletID=?", new String[] { sID });


            int affected3 = db.update("tblNewStoreSalesQuotePaymentDetails", values,"StoreId=?", new String[] { sID });
            int affected5 = db.update("tblLatLongDetails", values,"StoreID=?", new String[] { sID });
            if(flag2set==3)
            {
                int affected4 = db.update("tblsameLocationForStoreRestartDone", values,"CrntStoreID=?", new String[] { sID });
            }



        }
        catch (Exception ex)
        {
            String ex1=ex.getMessage();
        }

    }

    public void fnDeleteUnNeededRecordsFromOtheTables(String StoreID)
    {

        try
        {

            open();



            db.execSQL("DELETE FROM tblStoreImageList WHERE  StoreID='"+StoreID+"'");
            db.execSQL("DELETE FROM tblStorePaymentStageMapping WHERE  StoreID='"+StoreID+"'");
            db.execSQL("DELETE FROM tblPreAddedStoresDataDetails WHERE  StoreIDDB='"+StoreID+"'");





            close();


        }
        catch (Exception ex)
        {

        }

    }


    public void savetbl_XMLfiles(String XmlFileName,String Sstat,String filetype)
					      {
					      open();
					           ContentValues initialValues = new ContentValues();
					           
					           
					           initialValues.put("XmlFileName", XmlFileName.trim());
					           initialValues.put("Sstat", Sstat.trim());
							  initialValues.put("filetype", filetype.trim());
					          
					           
					         db.insert(TABLE_XMLFILES, null, initialValues); 
					         close();
					      }
						 
						 public void UpdateStoreMaterialphotoFlag(String sID, int flag2set)
							{
						        try
								 {
						            final ContentValues values = new ContentValues();
									values.put("Sstat", flag2set);
									int affected1 = db.update("tblStoreMaterialPhotoDetail", values,"StoreID=?", new String[] { sID });
								 }
								catch (Exception ex)
								{
									Log.e(TAG, ex.toString());
								}

							}
						 public String[] getAllStoreIDIntblStoreMaterialPhotoDetail()
							{
						        
								int SnamecolumnIndex1 = 0;

								
								 Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tblStoreMaterialPhotoDetail where Sstat=5", null);
								//Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
								try
								{
						            String StoreName[] = new String[cursor.getCount()];

									if (cursor.moveToFirst())
									{
						               for (int i = 0; i <= (cursor.getCount() - 1); i++) 
										{
						                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
											cursor.moveToNext();
										}
									}
									
									return StoreName;
								}
								finally 
								{
									cursor.close();
								}

							}
						 
						 public void updateImageRecordsSyncdforPOSMaterial(String PhotoName) 
							{
					          
								try 
								{
									open();
									System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
									final ContentValues values = new ContentValues();
									values.put("Sstat", 4);
									
									int affected3 = db.update("tblStoreMaterialPhotoDetail", values, "PhotoName=?",new String[] { PhotoName });
								} 
								catch (Exception ex) 
								{
									Log.e(TAG, ex.toString());
								}
								finally
								 {
									 close(); 
								 }


							}

    public String getfiletype(String XmlFileName)
    {
        open();
        String filetype ="1";
        try {


            Cursor cursor2 = db.rawQuery("SELECT filetype FROM tbl_XMLfiles where XmlFileName='"+XmlFileName+"'",null);

            if(cursor2.getCount()>0)
            {
                if (cursor2.moveToFirst())
                {
                    for (int i = 0; i < cursor2.getCount(); i++)
                    {

                        filetype = cursor2.getString(0);
                        cursor2.moveToNext();
                    }
                }
            }

            return filetype;
        } finally {
            close();

        }
    }
						 
						 public String fnGetXMLFile(String Sstat,String filetype)
					       {
					        String optionList="";
					        open();
					       Cursor cursor = db.rawQuery("SELECT XmlFileName from tbl_XMLfiles Where Sstat='"+Sstat+"' and filetype='"+filetype+"'", null);// Where PNodeID='"+TSIID+"'

					        try {
					         if(cursor.getCount()>0)
					        {
					          if (cursor.moveToFirst())
					         {
					           for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					            if(optionList.equals(""))
					            {
					            optionList =(String) cursor.getString(0);
					            }
					            else
					            {
					             optionList =optionList+"^"+(String) cursor.getString(0);
					            }
					             cursor.moveToNext();
					           }
					         }
					        }
					        return optionList;
					        } 
					        finally 
					        {
					        	close();
					        cursor.close();
					        
					       }
					       }


    public String fnGetXMLFileAll(String Sstat)
    {
        String optionList="";
        open();
        Cursor cursor = db.rawQuery("SELECT XmlFileName from tbl_XMLfiles Where Sstat='"+Sstat+"'", null);// Where PNodeID='"+TSIID+"'

        try {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if(optionList.equals(""))
                        {
                            optionList =(String) cursor.getString(0);
                        }
                        else
                        {
                            optionList =optionList+"^"+(String) cursor.getString(0);
                        }
                        cursor.moveToNext();
                    }
                }
            }
            return optionList;
        }
        finally
        {
            close();
            cursor.close();

        }
    }
						 
						 public void upDateTblXmlFile(String XmlFileName) {
						  		open();
						  	     db.execSQL("UPDATE tbl_XMLfiles SET Sstat='4' WHERE XmlFileName='"+XmlFileName+"'");
						  	   close();

						  	  }
						 
						 public void deleteXmlTable(String Sstat) 
					      {
					  		open();
					       db.execSQL("DELETE FROM tbl_XMLfiles WHERE Sstat ="+ Sstat);
					       close();
					      }
						 
						 public LinkedHashMap<String, String> getFileredProductListMap(String _searchString,int BusinessSegmentId,String ctgryId)
					        {
					        	//tblProductList (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
					        	open();
					        	String searchString="";
								LinkedHashMap<String, String> hmapFilterProductList= new LinkedHashMap<>();
					        	try {
									if(_searchString.indexOf(":")!=-1)
									{
										String[] arrsearchString=_searchString.split(Pattern.quote(","));
										for(int i=0;i<arrsearchString.length;i++)
										{
											if(i==0)
											{
												searchString=" LOWER(SearchField) LIKE '%"+arrsearchString[i].trim().toLowerCase()+"%'";
											}
											else
											{
												searchString+=	" AND LOWER(SearchField) LIKE '%"+arrsearchString[i].trim().toLowerCase()+"%'";
											}
										}
									}

					        		if(_searchString.indexOf(",")!=-1)
					        		{
					        			String[] arrsearchString=_searchString.split(Pattern.quote(","));
					        			for(int i=0;i<arrsearchString.length;i++)
					        			{
					        				if(i==0)
					        				{
					        					searchString=" LOWER(SearchField) LIKE '%"+arrsearchString[i].trim().toLowerCase()+"%'";
					        				}
					        				else
					        				{
					        					searchString+=	" AND LOWER(SearchField) LIKE '%"+arrsearchString[i].trim().toLowerCase()+"%'";
					        				}
					        			}
					        		}

					        		else
					        		{
										if(ctgryId.equals("0") && TextUtils.isEmpty(_searchString))
										{
											_searchString="All";
											searchString=" LOWER(SearchField) LIKE '%"+_searchString.trim().toLowerCase()+"%'";
										}
										else
										{
											searchString=" LOWER(SearchField) LIKE '%"+_searchString.trim().toLowerCase()+"%'";
										}

					        		}
                                    Cursor cur=null;
					        		/*if(!TextUtils.isEmpty(ctgryId) && !ctgryId.equals("0"))
                                    {
                                         cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName from tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID where ("+searchString+") and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" AND tblProductList.CategoryID='"+ctgryId+"'order by PrdOrdr Asc", null);
                                    }
                                    else
                                    {

                                        cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName from tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID where ("+searchString+") and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" order by PrdOrdr Asc", null);
                                    }*/

                                    if(!TextUtils.isEmpty(ctgryId) && !ctgryId.equals("0"))
                                    {
                                        // cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName from tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID where ("+searchString+") and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" AND tblProductList.CategoryID='"+ctgryId+"'order by PrdOrdr Asc", null);
                                        // cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName from tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID inner join tblDistributorStock on tblProductList.ProductID=tblDistributorStock.PrdctId where ("+searchString+") and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" AND tblProductList.CategoryID='"+ctgryId+"'order by PrdOrdr Asc", null);
                                        cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName from tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID inner join tblDistributorStock on tblProductList.ProductID=tblDistributorStock.PrdctId and tblDistributorStock.StockQntty<>0 where ("+searchString+") and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" AND tblProductList.CategoryID='"+ctgryId+"'order by PrdOrdr Asc", null); }
                                    else
                                    {

                                        // cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName from tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID where ("+searchString+") and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" order by PrdOrdr Asc", null);
                                        // cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName from tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID inner join tblDistributorStock on tblProductList.ProductID=tblDistributorStock.PrdctId where ("+searchString+") and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" order by PrdOrdr Asc", null);
                                        cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName from tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID inner join tblDistributorStock on tblProductList.ProductID=tblDistributorStock.PrdctId and tblDistributorStock.StockQntty<>0 where ("+searchString+") and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" order by PrdOrdr Asc", null);
                                    }

					        	if(cur.getCount()>0)
					        	{
					        		if(cur.moveToFirst())
					        		{
					        			for(int i=0;i<cur.getCount();i++)
					        			{
					        				hmapFilterProductList.put(cur.getString(0), cur.getString(1));
					        				cur.moveToNext();
					        			}
					        		}
					        		
					        	}
					        	
					        	} catch (Exception e) {
									// TODO: handle exception
								}
					        	finally
					        	{
					        		close();
					        		return hmapFilterProductList;
					        	}
					        }
						 
						 
						 public LinkedHashMap<String, String> getFileredOrderReviewProductListMap(String StoreId)
					        {
					        	//tblProductList (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
					        	open();
					        	String searchString="";
								LinkedHashMap<String, String> hmapFilterProductList= new LinkedHashMap<>();
					        	try {
								
					        		
					        		
					        		
					        	Cursor cur=db.rawQuery("Select tblProductList.ProductID,tblProductList.ProductShortName from tblProductList inner join tblStoreProdcutPurchaseDetails on tblProductList.ProductID=tblStoreProdcutPurchaseDetails.ProdID  where tblStoreProdcutPurchaseDetails.StoreID='"+StoreId+"' order by tblProductList.PrdOrdr Asc", null);
					        	if(cur.getCount()>0)
					        	{
					        		if(cur.moveToFirst())
					        		{
					        			for(int i=0;i<cur.getCount();i++)
					        			{
					        				hmapFilterProductList.put(cur.getString(0), cur.getString(1));
					        				cur.moveToNext();
					        			}
					        		}
					        		
					        	}
					        	
					        	} catch (Exception e) {
					        		System.out.println(e.toString());
									// TODO: handle exception
								}
					        	finally
					        	{
					        		close();
					        		return hmapFilterProductList;
					        	}
					        }
						 	 
						 public LinkedHashMap<String, String> getUOMMstr()
					        {
					        	//tblProductList (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
					        	open();
					        	LinkedHashMap<String, String> hmapUOMMstr= new LinkedHashMap<>();
					        	try {	
					        	Cursor cur=db.rawQuery("Select UOMID,UOM from tblUOMMstr", null);
					        	hmapUOMMstr.put("0", "Select UOM");
					        	if(cur.getCount()>0)
					        	{
					        		StringBuilder sBuilder=new StringBuilder();
					        		if(cur.moveToFirst())
					        		{
					        			for(int i=0;i<cur.getCount();i++)
					        			{
					        				hmapUOMMstr.put(cur.getString(0), cur.getString(1));
					        				cur.moveToNext();
					        			}
					        		}
					        		
					        	}
					        	
					        	} catch (Exception e) {
									// TODO: handle exception
								}
					        	finally
					        	{
					        		close();
					        		return hmapUOMMstr;
					        	}
					        }
						 
						 
						 
						 public LinkedHashMap<String, String> getSalesQuotePrcsMstr()
					        {
					        	//tblProductList (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
					        	open();
					        	LinkedHashMap<String, String> hmapSalesQuoteMstr= new LinkedHashMap<>();
					        	try {	
					        	Cursor cur=db.rawQuery("Select SalesQuotePrcsId,SalesQuotePrcs from tblSalesQuotePrcsMstr", null);
					        	//hmapUOMMstr.put("0", "Select SalesQuote");
					        	if(cur.getCount()>0)
					        	{
					        		StringBuilder sBuilder=new StringBuilder();
					        		if(cur.moveToFirst())
					        		{
					        			for(int i=0;i<cur.getCount();i++)
					        			{
					        				hmapSalesQuoteMstr.put(cur.getString(0), cur.getString(1));
					        				cur.moveToNext();
					        			}
					        		}
					        		
					        	}
					        	
					        	} catch (Exception e) {
									// TODO: handle exception
								}
					        	finally
					        	{
					        		close();
					        		return hmapSalesQuoteMstr;
					        	}
					        }
						 
						 
						 public LinkedHashMap<String, String> fngetDistinctSalesQuotePersonMeetMstr(String StoreId)
					        {
					        	//tblProductList (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
					        	open();
					        	LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr= new LinkedHashMap<>();
					        	try {	
					        	Cursor cur=db.rawQuery("Select SalesQuoteId,SalesQuoteCode,SalesQuotePrcsId,SalesQuotePrcs,SalesQuoteDate from tblSalesQuotePersonMeetMstr WHERE StoreId='"+StoreId+"'", null);
					        	//hmapUOMMstr.put("0", "Select SalesQuote");
					        	if(cur.getCount()>0)
					        	{
					        		StringBuilder sBuilder=new StringBuilder();
					        		if(cur.moveToFirst())
					        		{
					        			for(int i=0;i<cur.getCount();i++)
					        			{
					        				hmapDistinctSalesQuotePersonMeetMstr.put(cur.getString(0), cur.getString(1)+"^"+cur.getString(2)+"^"+cur.getString(3)+"^"+cur.getString(4));
					        				cur.moveToNext();
					        			}
					        		}
					        		
					        	}
					        	
					        	} catch (Exception e) {
									// TODO: handle exception
								}
					        	finally
					        	{
					        		close();
					        		return hmapDistinctSalesQuotePersonMeetMstr;
					        	}
					        }
						 
						 
						 
						 private LinkedHashMap<String, String> fngetDistinctSalesQuotePersonMeetMstrForSstatUpdate(String StoreId)
					        {
					        	//tblProductList (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
					        //	open();
					        	LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr= new LinkedHashMap<>();
					        	try {	
					        	Cursor cur=db.rawQuery("Select SalesQuoteId,SalesQuoteCode,SalesQuotePrcsId,SalesQuotePrcs,SalesQuoteDate from tblSalesQuotePersonMeetMstr WHERE StoreId='"+StoreId+"'", null);
					        	//hmapUOMMstr.put("0", "Select SalesQuote");
					        	if(cur.getCount()>0)
					        	{
					        		StringBuilder sBuilder=new StringBuilder();
					        		if(cur.moveToFirst())
					        		{
					        			for(int i=0;i<cur.getCount();i++)
					        			{
					        				hmapDistinctSalesQuotePersonMeetMstr.put(cur.getString(0), cur.getString(1)+"^"+cur.getString(2)+"^"+cur.getString(3)+"^"+cur.getString(4));
					        				cur.moveToNext();
					        			}
					        		}
					        		
					        	}
					        	
					        	} catch (Exception e) {
									// TODO: handle exception
								}
					        	finally
					        	{
					        		//close();
					        		return hmapDistinctSalesQuotePersonMeetMstr;
					        	}
					        }
						 private int fncheckIfSalesQuotePersonMeetMstrExistsinTable(String SalesQuoteId)
							{
								open();
								int strReturnPDADateExistOrNot = 0;

								Cursor cursor2 = db.rawQuery("SELECT SalesQuoteId FROM  tblSalesQuotePersonMeetMstr where tblSalesQuotePersonMeetMstr.SalesQuoteId='"+SalesQuoteId+"'", null);
								try {
									if (cursor2.moveToFirst()) {

										for (int i = 0; i < cursor2.getCount(); i++) {
											strReturnPDADateExistOrNot = 1;
											cursor2.moveToNext();
											// cursor.close();
										}

									}

									return strReturnPDADateExistOrNot;
								} finally {
									cursor2.close();
									close();
								}
							}
						 private String[] fngetQutePersonMeetTabOneData(String SalesQuoteId)
							{
								open();
								String qry="select SalesQuoteType,SalesQuoteValidFrom,SalesQuoteValidTo,SalesQuoteDate from tblSalesQuotePersonMeetMstr where SalesQuoteId='"+SalesQuoteId+"'";
								Cursor cur = db.rawQuery(qry,null);
								String BasicData[]= new String[4];
								try {
								if(cur.moveToFirst())
								{
									//for(int i=0;i<cur.getCount();i++)
									for(int i=0;i<cur.getCount();i++)
									{
										BasicData[0]= (String) cur.getString(0);
										BasicData[1]= (String) cur.getString(1);
										BasicData[2]= (String) cur.getString(2);
										BasicData[3]= (String) cur.getString(3);
										cur.moveToNext();
										
									}
									
								
								}
								return BasicData;
								} finally {
									//cur.close();
									close();
								}
							}
						 
						 
						 
						 public LinkedHashMap<String, String> getFileredProductListQuotationMap(String _searchString,String SalesQuoteId,int BusinessSegmentId,String ManufacturerID)
						 {
							 int chkIfSalesQuotePersonMeetMstrExistsinTable=fncheckIfSalesQuotePersonMeetMstrExistsinTable(SalesQuoteId);
							 String SalesQuoteValidFrom="0";
							 String SalesQuoteValidTo="0";
							 String SalesQuoteType="0";
							 if(chkIfSalesQuotePersonMeetMstrExistsinTable==1)
							 {
								 //SalesQuoteType,SalesQuoteValidFrom,SalesQuoteValidTo,SalesQuoteDate
								 String[] arrValues=new String[4];
								 arrValues=fngetQutePersonMeetTabOneData(SalesQuoteId);
								 SalesQuoteType=arrValues[0];
								 SalesQuoteValidFrom=arrValues[1];
								 SalesQuoteValidTo=arrValues[2];
								 SalesQuoteType=arrValues[3];
							 }
							 open();
						     //int intcheckIfgetFileredProductListQuotationMapExistsinTable=fncheckIfgetFileredProductListQuotationMapExistsinTable(SalesQuoteId);
						     String searchString="";
						     LinkedHashMap<String, String> hmapFilterProductQuotationList= new LinkedHashMap<>();
						       try {
							      if(_searchString.indexOf(",")!=-1)
							      {
							    	  String[] arrsearchString=_searchString.split(Pattern.quote(","));
									for(int i=0;i<arrsearchString.length;i++)
									    {
											if(i==0)
										   {
										     searchString=" LOWER(SearchField) LIKE '%"+arrsearchString[i].trim().toLowerCase()+"%'";
										   }
										   else
										   {
											   searchString+=" AND LOWER(SearchField) LIKE '%"+arrsearchString[i].trim().toLowerCase()+"%'";
										   }
									     }
							       }
							       else
							       {
							    	   searchString=" LOWER(SearchField) LIKE '%"+_searchString.trim().toLowerCase()+"%'";
							       }
							      					Cursor cur=null;
																				      					
							      					//cur=db.rawQuery("Select ProductID,ProductShortName,StandardRate,StandardRateBeforeTax,0 AS RateOffer,0 AS InclusiveTax,'"+SalesQuoteValidFrom+"' AS ValidFrom,'"+SalesQuoteValidTo+"' As ValidTo,0 AS MinDlvryQty,0 AS UOMID,0 AS Remarks,'0.00' AS LastTranscRate,tblProductList.VatTax from tblProductList where ("+searchString+") order by PrdOrdr Asc", null);
							      					if(ManufacturerID.equals("0") || ManufacturerID.equals(""))
							      					{
							      					cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,0 AS RateOffer,0 AS InclusiveTax,'"+SalesQuoteValidFrom+"' AS ValidFrom,'"+SalesQuoteValidTo+"' As ValidTo,0 AS MinDlvryQty,0 AS UOMID,0 AS Remarks,'0.00' AS LastTranscRate,tblProductSegementMap.VatTax from tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID where ("+searchString+") and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" order by PrdOrdr Asc", null);
							      					}
							      					else
							      					{
							      						
							      						cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,0 AS RateOffer,0 AS InclusiveTax,'"+SalesQuoteValidFrom+"' AS ValidFrom,'"+SalesQuoteValidTo+"' As ValidTo,0 AS MinDlvryQty,0 AS UOMID,0 AS Remarks,'0.00' AS LastTranscRate,tblProductSegementMap.VatTax from tblProductList inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID where ("+searchString+") and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" and tblProductList.ManufacturerID="+Integer.parseInt(ManufacturerID)+" order by PrdOrdr Asc", null);
							      					}
													if(cur.getCount()>0)
													{
														StringBuilder sBuilder=new StringBuilder();
														if(cur.moveToFirst())
														{
															for(int i=0;i<cur.getCount();i++)
															{
																hmapFilterProductQuotationList.put(cur.getString(0), cur.getString(1)+"^"+cur.getString(2)+"^"+cur.getString(3)+"^"+cur.getString(4)+"^"+cur.getString(5)+"^"+cur.getString(6)+"^"+cur.getString(7)+"^"+cur.getString(8)+"^"+cur.getString(9)+"^"+cur.getString(10)+"^"+cur.getString(11)+"^"+cur.getString(12));
																cur.moveToNext();
															}
														}
													}
						       } catch (Exception e)
						       {
							   System.out.println("SSS"+e);
							  // TODO: handle exception
						       }
						       finally
						       {
						    	   close();
						    	   int intcheckIfgetFileredProductListQuotationMapExistsinTable=fncheckIfgetFileredProductListQuotationMapExistsinTable(SalesQuoteId);
						    	   if(intcheckIfgetFileredProductListQuotationMapExistsinTable==1)
						    	   {
						    		   getFileredProductListPreFiledListQuotationMap(hmapFilterProductQuotationList,SalesQuoteId,BusinessSegmentId);  
						    	   }
						    	   return hmapFilterProductQuotationList;
						       }
						 }
						 
						 private void getFileredProductListPreFiledListQuotationMap(LinkedHashMap<String, String> hmapFilterProductQuotationList, String SalesQuoteId, int BusinessSegmentId)
						 { 
							 open();
						       try {
						    	   Cursor cur=null;
									//cur=db.rawQuery("Select ProductID,ProductShortName,tblSalesQuoteProductsMstr.StandardRate ,tblSalesQuoteProductsMstr.StandardRateBeforeTax,tblSalesQuoteProductsMstr.RateOffer,tblSalesQuoteProductsMstr.InclusiveTax,tblSalesQuoteProductsMstr.ValidFrom AS ValidFrom,tblSalesQuoteProductsMstr.ValidTo As ValidTo,tblSalesQuoteProductsMstr.MinDlvryQty,tblSalesQuoteProductsMstr.UOMID,tblSalesQuoteProductsMstr.Remarks,tblSalesQuoteProductsMstr.LastTranscRate,tblProductList.VatTax from tblProductList inner join tblSalesQuoteProductsMstr on tblProductList.ProductID=tblSalesQuoteProductsMstr.PrdId where tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"' order by tblProductList.PrdOrdr Asc", null);
						    	   cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName,tblSalesQuoteProductsMstr.StandardRate,tblSalesQuoteProductsMstr.StandardRateBeforeTax,tblSalesQuoteProductsMstr.RateOffer,tblSalesQuoteProductsMstr.InclusiveTax,tblSalesQuoteProductsMstr.ValidFrom AS ValidFrom,tblSalesQuoteProductsMstr.ValidTo As ValidTo,tblSalesQuoteProductsMstr.MinDlvryQty,tblSalesQuoteProductsMstr.UOMID,tblSalesQuoteProductsMstr.Remarks,tblSalesQuoteProductsMstr.LastTranscRate,tblProductSegementMap.VatTax from tblProductList inner join tblSalesQuoteProductsMstr on tblProductList.ProductID=tblSalesQuoteProductsMstr.PrdId inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID where tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"' and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" order by tblProductList.PrdOrdr Asc", null);			
						    	   if(cur.getCount()>0)
													{
														if(cur.moveToFirst())
														{
															for(int i=0;i<cur.getCount();i++)
															{
																hmapFilterProductQuotationList.put(cur.getString(0), cur.getString(1)+"^"+cur.getString(2)+"^"+cur.getString(3)+"^"+cur.getString(4)+"^"+cur.getString(5)+"^"+cur.getString(6)+"^"+cur.getString(7)+"^"+cur.getString(8)+"^"+cur.getString(9)+"^"+cur.getString(10)+"^"+cur.getString(11)+"^"+cur.getString(12));
																cur.moveToNext();
															}
														}
													}
						       } catch (Exception e)
						       {
							   System.out.println("SSS"+e);
							  // TODO: handle exception
						       }
						       finally
						       {
						    	   
							   close();
							  
						       }
						 }
						 
						 private int fncheckIfgetFileredProductListQuotationMapExistsinTable(String SalesQuoteId)
							{
								open();
								int strReturnPDADateExistOrNot = 0;
								//tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"'
								Cursor cursor2 = db.rawQuery("SELECT * FROM  tblSalesQuoteProductsMstr where tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"'", null);
								try {
									if (cursor2.moveToFirst()) {

										for (int i = 0; i < cursor2.getCount(); i++) {
											strReturnPDADateExistOrNot = 1;
											cursor2.moveToNext();
											// cursor.close();
										}

									}

									return strReturnPDADateExistOrNot;
								} finally {
									//cursor2.close();
									close();
								}
							}
						 
						
						  public LinkedHashMap<String, String> getDefaultProductListQuotationMap(String SalesQuoteId,int BusinessSegmentId)
						  {
                           String searchString="";
                           LinkedHashMap<String, String> hmapDefaultProductQuotationList= new LinkedHashMap<>();
                           try {
                        	   open();
                        	   //Cursor cur=db.rawQuery("Select ProductID,ProductShortName,IFNULL(tblSalesQuoteProductsMstr.StandardRate,0),IFNULL(tblSalesQuoteProductsMstr.StandardRateBeforeTax,0),IFNULL(tblSalesQuoteProductsMstr.RateOffer,0),IFNULL(tblSalesQuoteProductsMstr.InclusiveTax,0),IFNULL(tblSalesQuoteProductsMstr.ValidFrom,0),IFNULL(tblSalesQuoteProductsMstr.ValidTo,0),IFNULL(tblSalesQuoteProductsMstr.MinDlvryQty,0),IFNULL(tblSalesQuoteProductsMstr.UOMID,0),IFNULL(tblSalesQuoteProductsMstr.Remarks,''),IFNULL(tblSalesQuoteProductsMstr.LastTranscRate,'0.00'),VatTax from tblProductList Inner Join tblSalesQuoteProductsMstr On tblProductList.ProductID=tblSalesQuoteProductsMstr.PrdId Where tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"' order by PrdOrdr Asc", null);
                        	   Cursor cur=db.rawQuery("Select tblProductList.ProductID,ProductShortName,IFNULL(tblSalesQuoteProductsMstr.StandardRate,0),IFNULL(tblSalesQuoteProductsMstr.StandardRateBeforeTax,0),IFNULL(tblSalesQuoteProductsMstr.RateOffer,0),IFNULL(tblSalesQuoteProductsMstr.InclusiveTax,0),IFNULL(tblSalesQuoteProductsMstr.ValidFrom,0),IFNULL(tblSalesQuoteProductsMstr.ValidTo,0),IFNULL(tblSalesQuoteProductsMstr.MinDlvryQty,0),IFNULL(tblSalesQuoteProductsMstr.UOMID,0),IFNULL(tblSalesQuoteProductsMstr.Remarks,''),IFNULL(tblSalesQuoteProductsMstr.LastTranscRate,'0.00'),tblProductSegementMap.VatTax from tblProductList Inner Join tblSalesQuoteProductsMstr On tblProductList.ProductID=tblSalesQuoteProductsMstr.PrdId inner join tblProductSegementMap on tblProductList.ProductID=tblProductSegementMap.ProductID Where tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"' and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+" order by PrdOrdr Asc", null);
                           if(cur.getCount()>0)
                           {
                        	   StringBuilder sBuilder=new StringBuilder();

                                  if(cur.moveToFirst())

                                  {

                                        for(int i=0;i<cur.getCount();i++)

                                        {

                                               hmapDefaultProductQuotationList.put(cur.getString(0), cur.getString(1)+"^"+cur.getString(2)+"^"+cur.getString(3)+"^"+cur.getString(4)+"^"+cur.getString(5)+"^"+cur.getString(6)+"^"+cur.getString(7)+"^"+cur.getString(8)+"^"+cur.getString(9)+"^"+cur.getString(10)+"^"+cur.getString(11)+"^"+cur.getString(12));

                                               cur.moveToNext();

                                        }

                                  }

                                 

                           }

                          

                           } catch (Exception e) {

                                         // TODO: handle exception

                                  }

                           finally

                           {

                                  close();

                                  return hmapDefaultProductQuotationList;

                           }

                     }
					
						 public String fnGettPrcIDBasedOnQuotationId(String SalesQuoteId)
						 {
							 open();
								Cursor cursor = db.rawQuery("SELECT SalesQuotePrcsId from tblSalesQuotePersonMeetMstr where SalesQuoteId='"+SalesQuoteId +"'", null);
								String flag="0";
								try {
									if(cursor.getCount()>0){
										if (cursor.moveToFirst()){
											flag= cursor.getString(0);
										}

									}
									return flag;
								}

								finally
								{
									cursor.close();
									close();
								}
						 }
						 
						  public LinkedHashMap<String, String> getQuotationPersionMeetDetails(String SalesQuoteId)

					         {

					               //tblProductList (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";

					              

					               String searchString="";

					                      LinkedHashMap<String, String> hmapQuotationPersionMeetDetails= new LinkedHashMap<>();

					               try {
					            	   open();

					                     

					              // Cursor cur=db.rawQuery("Select StoreName As Customer,ContactPerson,ContactPersonPhone,ContactPersonEmail,SalesQuoteType,IFNULL(SalesQuoteValidFrom,0),IFNULL(SalesQuoteValidTo,0),IFNULL(ExpectedBusinessValue,0),IFNULL(PaymentTerms,0),IFNULL(PaymentTermsType,0),SalesQuoteDate from tblProductList Inner Join tblSalesQuoteProductsMstr On tblProductList.ProductID=tblSalesQuoteProductsMstr.PrdId Where tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"' order by PrdOrdr Asc", null);
					            	   
					            	   Cursor cur=db.rawQuery("Select StoreName As Customer,ContactPerson,ContactPersonPhone,ContactPersonEmail,SalesQuoteType,IFNULL(SalesQuoteValidFrom,0),IFNULL(SalesQuoteValidTo,0),IFNULL(ExpectedBusinessValue,0),IFNULL(CreditLimit,0),IFNULL(CreditDays,0),SalesQuoteDate,SalesQuotePrcsId ,SalesQuotePrcs,PaymentModeId,IFNULL(PymtStageId,0),IFNULL(ManufacturerID,0),IFNULL(ManufacturerName,0) from tblSalesQuotePersonMeetMstr Where tblSalesQuotePersonMeetMstr.SalesQuoteId='"+SalesQuoteId+"'", null);

					               if(cur.getCount()>0)

					               {

					                      StringBuilder sBuilder=new StringBuilder();

					                      if(cur.moveToFirst())

					                      {

					                            for(int i=0;i<cur.getCount();i++)

					                            {

					                                   hmapQuotationPersionMeetDetails.put(SalesQuoteId, cur.getString(0)+"^"+cur.getString(1)+"^"+cur.getString(2)+"^"+cur.getString(3)+"^"+cur.getString(4)+"^"+cur.getString(5)+"^"+cur.getString(6)+"^"+cur.getString(7)+"^"+cur.getString(8)+"^"+cur.getString(9)+"^"+cur.getString(10)+"^"+cur.getString(11)+"^"+cur.getString(12)+"^"+cur.getString(13)+"^"+cur.getString(14)+"^"+cur.getString(15)+"^"+cur.getString(16));

					                                   cur.moveToNext();

					                            }

					                      }

					                     

					               }

					              

					               } catch (Exception e) {

					                             // TODO: handle exception

					                      }

					               finally

					               {

					                      close();

					                      return hmapQuotationPersionMeetDetails;

					               }

					         }
			
						  
							public void UpdateQuotePrcsAgainstQuotationId(String SalesQuoteId,String SalesQuotePrcsId,String SalesQuotePrcs)
							{
								
								try
								 {
									final ContentValues values = new ContentValues();
									values.put("SalesQuotePrcsId", SalesQuotePrcsId);
									values.put("SalesQuotePrcs", SalesQuotePrcs);
						            int affected = db.update("tblSalesQuotePersonMeetMstr", values, "SalesQuoteId=? ",new String[] { SalesQuoteId });
								 }
								catch (Exception ex)
								{
									Log.e(TAG, ex.toString());
								}
								finally
								{
									
								}
							}
							
							/*public long savetblPDAQuestGrpMappingMstr(String GrpQuestID,String QuestID,String GrpID,String GrpNodeID,String GrpDesc,String SectionNo,String GrpCopyID,String QuestCopyID,String sequence)
							{
								ContentValues initialValues = new ContentValues();
								initialValues.put("GrpQuestID", Integer.parseInt(GrpQuestID));
								initialValues.put("QuestID", Integer.parseInt(QuestID)); 
								initialValues.put("GrpID", Integer.parseInt(GrpID));
								initialValues.put("GrpNodeID", Integer.parseInt(GrpNodeID));
								initialValues.put("GrpDesc", GrpDesc.trim());
								initialValues.put("SectionNo", Integer.parseInt(SectionNo));
								initialValues.put("GrpCopyID", Integer.parseInt(GrpCopyID));
								initialValues.put("QuestCopyID", Integer.parseInt(QuestCopyID));
								initialValues.put("Sequence", Integer.parseInt(sequence));
								long inserted= db.insert(TABLE_QuestGrpMappingMstr, null, initialValues);
								System.out.println("TABLE_QuestGrpMappingMstr ="+inserted);
								return inserted;
							}*/

    public long savetblPDAQuestGrpMappingMstr(String GrpQuestID,String QuestID,String GrpID,String GrpNodeID,String GrpDesc,String SectionNo,String GrpCopyID,String QuestCopyID,String sequence,int flgNewStore,int flgStoreValidation) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("GrpQuestID", Integer.parseInt(GrpQuestID));
        initialValues.put("QuestID", Integer.parseInt(QuestID));
        initialValues.put("GrpID", Integer.parseInt(GrpID));
        initialValues.put("GrpNodeID", Integer.parseInt(GrpNodeID));
        initialValues.put("GrpDesc", GrpDesc.trim());
        initialValues.put("SectionNo", Integer.parseInt(SectionNo));
        initialValues.put("GrpCopyID", Integer.parseInt(GrpCopyID));
        initialValues.put("QuestCopyID", Integer.parseInt(QuestCopyID));
        initialValues.put("Sequence", Integer.parseInt(sequence));
        initialValues.put("flgNewStore", flgNewStore);
        initialValues.put("flgStoreValidation", flgStoreValidation);
        //,flgNewStore,flgStoreValidation
        return db.insert(TABLE_QuestGrpMappingMstr, null, initialValues);
    }
							
							
							public LinkedHashMap<String, String> fnGetDistinctSenction()
							{
								String searchString="";
								LinkedHashMap<String, String> hmapDistinctDiffrentSection= new LinkedHashMap<>();
					               try {
					            	   open();
					            	   Cursor cur=db.rawQuery("Select Distinct SectionNo from tblPDAQuestGrpMappingMstr", null);
					            	   if(cur.getCount()>0)
					            	   {
					            		  StringBuilder sBuilder=new StringBuilder();
					                      if(cur.moveToFirst())
					                      {
					                    	  for(int i=0;i<cur.getCount();i++)
					                            {
					                    		  hmapDistinctDiffrentSection.put(cur.getString(0),"Section_"+ cur.getString(0).trim());
					                                   cur.moveToNext();
					                            }
					                      }
					               }
					               } catch (Exception e) {
					            	   // TODO: handle exception

					                      }
					               finally
					               {
					            	   close();
					                    return hmapDistinctDiffrentSection;
					               }
					            }
							
							public LinkedHashMap<String, String> fnGetDistinctGroupsinSection(int SectionNo)
							{
								String searchString="";
								LinkedHashMap<String, String> hmapDistinctGroupsinSection= new LinkedHashMap<>();
					               try {
					            	   open();
					            	   Cursor cur=db.rawQuery("Select GrpID,GrpNodeID,GrpDesc from tblPDAQuestGrpMappingMstr Where SectionNo='"+SectionNo+"'", null);
					            	   if(cur.getCount()>0)
					            	   {
					            		  StringBuilder sBuilder=new StringBuilder();
					                      if(cur.moveToFirst())
					                      {
					                    	  for(int i=0;i<cur.getCount();i++)
					                            {
					                    		  hmapDistinctGroupsinSection.put(cur.getString(2), cur.getString(0).trim()+"_"+ cur.getString(1).trim());
					                              cur.moveToNext();
					                            }
					                      }
					               }
					               } catch (Exception e) {
					            	   // TODO: handle exception

					                      }
					               finally
					               {
					            	   close();
					                    return hmapDistinctGroupsinSection;
					               }
					            }
							
							//Add New Store Section wise Code starts Here
							public long savetblQuestionDependentMstr(String QuestionID,String OptionID,String DependentQuestionID,String GrpID,String GrpDepQuestID)
						      {

								  ContentValues initialValues = new ContentValues();

								  initialValues.put("QuestionID", Integer.parseInt(QuestionID));
								  initialValues.put("OptionID", OptionID);
								  initialValues.put("DependentQuestionID", Integer.parseInt(DependentQuestionID));
								  initialValues.put("GrpID", Integer.parseInt(GrpID));
								  initialValues.put("GrpDepQuestID", Integer.parseInt(GrpDepQuestID));

								  System.out.println("QuestionID2:" + QuestionID + "OptionID2:" + OptionID + "DependentQuestionID2:" + DependentQuestionID);
								  return db.insert(TABLE_QuestionDependentMstr, null, initialValues);
						      }



    public LinkedHashMap<String, ArrayList<String>> fnGetGroupIDMapWithQuestionID()
    {
        LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr= new LinkedHashMap<>();
        ArrayList<String> listKeyQuesVal= new ArrayList<>();
        open();
        //tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
        //tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
        Cursor cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.GrpID from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr where tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  Order By tblPDAQuestGrpMappingMstr.GrpID ASC  ", null);// Where PNodeID='"+TSIID+"'

        try
        {
            if(cursor.getCount()>0)
            {
                String sectionNo="0",preVisousSectionNum="0";
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        sectionNo= cursor.getString(3);
                        if(i==0)
                        {
                            preVisousSectionNum= sectionNo;
                            listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
                        }
                        else if(preVisousSectionNum.equals(sectionNo))
                        {
                            listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
                        }
                        else
                        {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                            listKeyQuesVal= new ArrayList<>();
                            preVisousSectionNum=sectionNo;
                            listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));

                        }
                        if(i==(cursor.getCount()-1))
                        {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                        }

                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        }
        finally
        {
            cursor.close();
            close();
        }
    }
							


	public LinkedHashMap<String, String> fnGetGroupIDWithGroupDescr()
	{
		{
			open();
			LinkedHashMap<String, String> hmapGroupIDWithGroupDescr= new LinkedHashMap<>();
			//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";

			Cursor cur=db.rawQuery("Select Distinct GrpID,GrpDesc from tblPDAQuestGrpMappingMstr", null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{
					for(int i=0;i<cur.getCount();i++)
					{
						hmapGroupIDWithGroupDescr.put(cur.getString(0), cur.getString(1));
						cur.moveToNext();
					}

				}
			}
			close();
			return hmapGroupIDWithGroupDescr;
		}
	}


						private int getsectionCount()
						{
							int sectionCount=0;


							try {

//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
								Cursor cur=db.rawQuery("Select SectionCount from tblQuestIDForOutChannel", null);
								if(cur.getCount()>0)
								{
									if(cur.moveToFirst())
									{

										sectionCount=cur.getInt(0);
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
							}
							finally
							{

								return sectionCount;
							}
						}
						  	public LinkedHashMap<String,ArrayList<String>> fnGetSectionIDMapWithGroupID()
							{
								LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr= new LinkedHashMap<>();
								ArrayList<String> listKeyQuesVal= new ArrayList<>();

								open();
								int sectionCount=getsectionCount();
								//    int sectionCount=0;
								//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
								//tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
								Cursor cursor;
								if(sectionCount!=0)
								{
									cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr where SectionNo<="+sectionCount+" order by SectionNo", null);// Where PNodeID='"+TSIID+"'
								}
								else
								{
									cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr order by SectionNo", null);// Where PNodeID='"+TSIID+"'
								}


								try
								{
									if(cursor.getCount()>0)
									{
										String sectionNo="0",preVisousSectionNum="0";
										if (cursor.moveToFirst())
										{
											for (int i = 0; i <= (cursor.getCount() - 1); i++)
											{
												sectionNo= cursor.getString(1);
												if(i==0)
												{
													preVisousSectionNum= sectionNo;
													listKeyQuesVal.add(cursor.getString(0));
												}
												else if(preVisousSectionNum.equals(sectionNo))
												{
													listKeyQuesVal.add(cursor.getString(0));
												}
												else
												{
													hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
													listKeyQuesVal= new ArrayList<>();
													preVisousSectionNum=sectionNo;
													listKeyQuesVal.add(cursor.getString(0));

												}
												if(i==cursor.getCount() - 1)
												{
													hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
												}


												cursor.moveToNext();
											}
										}
									}
									return hmapQuestionMstr;
								}
								finally
								{
									cursor.close();
									close();
								}
							}






						
						public LinkedHashMap<String, String> fnGetOptionId_OptionValue()
					      {
					       LinkedHashMap<String, String> hmapOptionId_OptionValue= new LinkedHashMap<>();
					       open();
					       
					       Cursor cursor = db.rawQuery("SELECT QuestID,OptID,OptionNo from tblOptionMstr Order By Sequence ASC ", null);// Where PNodeID='"+TSIID+"'
					
					       try 
					       {
					        if(cursor.getCount()>0)
					       {
					         if (cursor.moveToFirst())
					        {
					          for (int i = 0; i <= (cursor.getCount() - 1); i++)
					          {
					        	  hmapOptionId_OptionValue.put((String) cursor.getString(0) +"_"+(String) cursor.getString(1), (String) cursor.getString(2));
					              cursor.moveToNext();
					          }
					        }
					       }
					       return hmapOptionId_OptionValue;
					       } 
					       finally 
					       {
					       cursor.close();
					       close();
					      }
					      }
						public int getSectionCount()
						{
							int sectionNo=0;

							try
							{


								Cursor cursor = db.rawQuery("Select SectionCount from tblQuestIDForOutChannel", null);

								if (cursor.getCount() > 0)  //Return the number of rows in the cursor
								{
									if (cursor.moveToFirst())  // move the cursor to the first row .
									{                          // This method will return false  if cursor is empty
									    sectionNo = cursor.getInt(0);
										cursor.moveToNext();    // move the cursor to the next row
									}
								}
							}
							catch(Exception e)
							{

							}
							finally
							{
								return sectionNo;
							}


						}

	/*public LinkedHashMap<String, String> fnGetQuestionMstr(SharedPreferences sPref)
	{

		if(sPref.getString("Language", "").equals("en"))
		{

		}
		else if(sPref.getString("Language", "").equals("hi"))
		{

		}
		else
		{

		}
		LinkedHashMap<String, String> hmapQuestionMstr=new LinkedHashMap<String, String>();
		open();
		int sectionCount=getsectionCount();




		Cursor cursor;


*//*

		if(sPref.getString("Language", "").equals("en"))
		{
			if(sectionCount!=0)
			{
				cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr On tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  where tblPDAQuestGrpMappingMstr.SectionNo<="+sectionCount+" Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
			else
			{
				cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr On tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
		}
		else if(sPref.getString("Language", "").equals("hi"))
		{
			if(sectionCount!=0)
			{
				cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDescHindi,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr On tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  where tblPDAQuestGrpMappingMstr.SectionNo<="+sectionCount+" Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
			else
			{
				cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDescHindi,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr On tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
		}
		else
		{
			if(sectionCount!=0)
			{
				cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr On tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  where tblPDAQuestGrpMappingMstr.SectionNo<="+sectionCount+" Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
			else
			{
				cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr On tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
		}
*//*

		if(sectionCount!=0)
		{
			cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr On tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  where tblPDAQuestGrpMappingMstr.SectionNo<="+sectionCount+" Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
		}
		else
		{
			cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr On tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
		}


		try
		{
		//	String aa="उत्पाद का $ नाम है";
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						System.out.println("Varun Quest Id = "+(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(13).toString()+"~"+ (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(13).toString()+"^"+(String) cursor.getString(14).toString());
					//	hmapQuestionMstr.put((String) cursor.getString(0).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(13).toString(), (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()+"^"+(String) cursor.getString(11).toString()+"^"+(String) cursor.getString(12).toString()+"^"+(String) cursor.getString(13).toString());
						hmapQuestionMstr.put((String) cursor.getString(0).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(13).toString(), (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()+"^"+(String) cursor.getString(11).toString()+"^"+(String) cursor.getString(12).toString()+"^"+(String) cursor.getString(13).toString());
																																																																			//use=aa in place of (String) cursor.getString(2).toString()
						cursor.moveToNext();
					}
				}
			}
			return hmapQuestionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}
	}*/







							

					private void fnDeletesaveOutletQuestAnsMstrSctionWise(String OutletID, int sectionID)
			        {
			         db.execSQL("DELETE FROM tblOutletQuestAnsMstr WHERE OutletID ='"+ OutletID + "'");// and sectionID="+sectionID
			        }


							//Add New Store Section wise Code Ends Here
			          
			          
			          public void fnInsertTBLReturnRsn(String stockStatusId,String stockStatus)
			          {
			           //tblReturnReason(StockStatusId text not null,StockStatus text not null);";
			           ContentValues content=new ContentValues();
			           content.put("StockStatusId", stockStatusId);
			           content.put("StockStatus", stockStatus);
			           db.insertOrThrow(TABLE_RETURN_REASON, null, content);
			          }
			          public LinkedHashMap<String, String> getReasonReturn()
			             {
			              ////tblReturnReason(StockStatusId text not null,StockStatus text not null);";
			              LinkedHashMap<String, String> hmapRtrnRsn= new LinkedHashMap<>();
			              open();
			              try {
			       
			      
			              Cursor cur=db.rawQuery("Select * from tblReturnReason", null);
			              if(cur.getCount()>0)
			              {
			               if(cur.moveToFirst())
			               {
			                for(int i=0;i<cur.getCount();i++)
			                {
			                 hmapRtrnRsn.put(cur.getString(1), cur.getString(0));
			                 cur.moveToNext();
			                }
			               }
			              }
			              } catch (Exception e) {
			        System.out.println(" Print e ="+e.toString());
			       }
			              finally
			              {
			               close();
			               return hmapRtrnRsn;
			              }
			             }
			             
			             public LinkedHashMap<String, String> getSavedRemark(String StoreID,String OrderPDAID)
			             {
//			              /  //tblStoreReturnDetail (RouteID text null,StoreID text null,ReturnProductID text null, ProdReturnQty text null, ProdReturnReason text null, ProdReturnReasonIndex text null,ReturnDate text null,Sstat integer null,OrderIDPDA text null);";
			              LinkedHashMap<String, String> hmapRtrnRsn= new LinkedHashMap<>();
			              open();
			              try {
			       
			      
			              Cursor cur=db.rawQuery("Select * from tblStoreReturnDetail where StoreID='"+StoreID+"' and OrderIDPDA='"+OrderPDAID+"'", null);
			              if(cur.getCount()>0)
			              {
			               if(cur.moveToFirst())
			               {
			                for(int i=0;i<cur.getCount();i++)
			                {
			                 hmapRtrnRsn.put(cur.getString(2), cur.getString(4));
			                 cur.moveToNext();
			                }
			               }
			              }
			              } catch (Exception e) {
			        System.out.println(" Print e ="+e.toString());
			       }
			              finally
			              {
			               close();
			               return hmapRtrnRsn;
			              }
			             }
			             
			             
			             public void updateflgFromWhereSubmitStatusAgainstStore(String sID, int flag2set)
			             {
			             	try
			             	 {

			             		final ContentValues values = new ContentValues();
			             		values.put("flgFromWhereSubmitStatus", flag2set);
			             		int affected = db.update("tblStoreList", values, "StoreID=? AND flgFromWhereSubmitStatus=?",new String[] { sID,""+0 });
			             	 }
			             	catch (Exception ex)
			             	{
			             		Log.e(TAG, ex.toString());
			             	}
			             }
			             
			             
			             

			        	 

			        	
			        	
			        	public int checkCountIntblNewStoreSalesQuotePaymentDetails(String  StoreId) 
			        		{
			        			open();
			        			Cursor cursor =null;
			        			int check=0;
			        			try {
			        				
			        				//tblNewStoreSalesQuotePaymentDetails (StoreId text null,PymtStageId text null,Sstat text null);";
			        				cursor= db.rawQuery("SELECT Count(*) FROM tblNewStoreSalesQuotePaymentDetails WHERE  StoreId ='"+ StoreId + "'", null);
			        				if (cursor.getCount() > 0)
			        				{
			        	               if (cursor.moveToFirst()) 
			        	               {
			        	                  for (int i = 0; i <= (cursor.getCount() - 1); i++) 
			        						{
			        							check=1;
			        							cursor.moveToNext();
			        						}
			        					}

			        				}
			        				

			        			} catch (Exception e) {
									System.out.println("shivam query = "+e.toString());
								}
			        			finally {
			        				cursor.close();
			        				close();
			        			}
			        			return check;
			        		}
			        		
			        		
			        		
			        		
			        		

			        		
			        		

			        		
			        		//Code For Order Payment and Bill Starts Here
			        		
			        		
			        		

 public long saveSOAPdataStoreListAddressMap(String StoreID,int OutAddTypeID,String Address,String AddressDet,int OutAddID)
 {
      
      ContentValues initialValues = new ContentValues();
      
      initialValues.put("StoreID", StoreID.trim());
      initialValues.put("OutAddTypeID", OutAddTypeID);
      initialValues.put("Address", Address.trim());
      initialValues.put("AddressDet", AddressDet.trim());
      initialValues.put("OutAddID", OutAddID);
      
      return db.insert(DATABASE_TABLE_StoreAddressMapDetailsMstr, null, initialValues); 
 }
 
 public ArrayList<LinkedHashMap<String, String>> fngetStoreBillToAddressAndDiliverToAddress(String StoreID)
 {
	 
	 ArrayList<LinkedHashMap<String, String>> totalProductDetail= new ArrayList<>(3);
  LinkedHashMap<String, String> hmapStoreBillTogAddresse= new LinkedHashMap<>();
  LinkedHashMap<String, String> hmapStoreShippToAddress= new LinkedHashMap<>();
  LinkedHashMap<String, String> hmapStoreAddress= new LinkedHashMap<>();
  open();
  Cursor cur=db.rawQuery("Select OutAddTypeID,Address,AddressDet,OutAddID from tblStoreAddressMapDetailsMstr where StoreID='"+StoreID+"'",null);
  if(cur.getCount()>0)
  {
   if(cur.moveToFirst())
   {
    for(int i=0;i<cur.getCount();i++)
    {
    	if(Integer.parseInt(cur.getString(0))==1)
    	{
    		hmapStoreBillTogAddresse.put(cur.getString(1), cur.getString(3)) ;
    	}
    	if(Integer.parseInt(cur.getString(0))==2)
    	{
    		hmapStoreShippToAddress.put(cur.getString(1), cur.getString(3)) ;
    	}
    	hmapStoreAddress.put(cur.getString(3), cur.getString(2));
    	
     cur.moveToNext();
    }
   }
  }
  close();
  
  totalProductDetail.add(0,hmapStoreBillTogAddresse);
  totalProductDetail.add(1,hmapStoreShippToAddress);
  totalProductDetail.add(2,hmapStoreAddress);
  
  return totalProductDetail;
 }
     
 
 public long fnsaveStoreSalesOrderPaymentDetails(String StoreId,String OrderID,String PaymentStageId,String Sstat)
 {
      
      ContentValues initialValues = new ContentValues();
      
      
      initialValues.put("StoreId", StoreId.trim());
     initialValues.put("OrderID", OrderID.trim());
      initialValues.put("PymtStageId", PaymentStageId.trim());
      initialValues.put("Sstat", Sstat);
      
      return db.insert(DATABASE_TABLE_StoreSalesOrderPaymentDetails, null, initialValues); 
 }
 
 
 public void fndeleteStoreSalesOrderPaymentDetails(String StoreID,String OrderID)
{
	
	db.execSQL("DELETE FROM tblStoreSalesOrderPaymentDetails WHERE StoreId ='" + StoreID +"' and OrderID='"+OrderID+"'");
}
 
 public void fndeleteStoreAddressMapDetailsMstr()
{
	
	db.execSQL("DELETE FROM tblStoreAddressMapDetailsMstr");
}
//tblStoreAddressMapDetailsMstr

public int checkCountIntblStoreSalesOrderPaymentDetails(String  StoreId,String OrderID) 
	{
		open();
		Cursor cursor =null;
		int check=0;
		try {
			
			
			cursor= db.rawQuery("SELECT * FROM tblStoreSalesOrderPaymentDetails WHERE  StoreId ='"+ StoreId + "' and OrderID='"+OrderID+"'", null);
			if (cursor.getCount() > 0)
			{
               if (cursor.moveToFirst()) 
               {
                  for (int i = 0; i <= (cursor.getCount() - 1); i++) 
					{
						check=1;
						cursor.moveToNext();
					}
				}

			}
			

		} catch (Exception e) {
			System.out.println("shivam query = "+e.toString());
		}
		finally {
			cursor.close();
			close();
		}
		return check;
	}
	
	
	
	
	
	public String fngettblStoreSalesOrderPaymentDetails(String StoreID,String OrderID)

				         {

				             

				               String searchString="";

				                      

				               try {
				            	   open();

				                Cursor cur=db.rawQuery("Select IFNULL(PymtStageId,0) from tblStoreSalesOrderPaymentDetails Where StoreId ='"+ StoreID + "' and OrderID='"+OrderID+"'", null);

				               if(cur.getCount()>0)

				               {

				                      StringBuilder sBuilder=new StringBuilder();

				                      if(cur.moveToFirst())

				                      {
				                    	  for(int i=0;i<cur.getCount();i++)
				                            {
				                            	searchString= cur.getString(0);
				                                   cur.moveToNext();
				                            }
				                      }
				               }
				               } catch (Exception e) {
				                             // TODO: handle exception
				                      }
				               finally
				               {
				            	   close();
				                   return searchString;
				               }
				         }
	
	
	
	
	
	public int checkPaymentStageintStoreMstrTabel(String  StoreId) 
	{
		open();
		Cursor cursor =null;
		int check=0;
		try {
			
			cursor= db.rawQuery("SELECT * FROM tblStoreList WHERE  StoreID ='"+ StoreId + "'", null);
			if (cursor.getCount() > 0)
			{
               if (cursor.moveToFirst()) 
               {
                  for (int i = 0; i <= (cursor.getCount() - 1); i++) 
					{
						check=1;
						cursor.moveToNext();
					}
				}

			}
			

		} catch (Exception e) {
			System.out.println("shivam query = "+e.toString());
		}
		finally {
			cursor.close();
			close();
		}
		return check;
	}
		
		
	public int checkStoreOrderBillAddressDetails(String  StoreId,String OrderID) 
	{
		open();
		Cursor cursor =null;
		int check=0;
		try {
			
			cursor= db.rawQuery("SELECT * FROM tblStoreOrderBillAddressDetails WHERE  StoreID ='"+ StoreId + "' and OrderID='"+OrderID+"'", null);
			if (cursor.getCount() > 0)
			{
               if (cursor.moveToFirst()) 
               {
                  for (int i = 0; i <= (cursor.getCount() - 1); i++) 
					{
						check=1;
						cursor.moveToNext();
					}
				}

			}
			

		} catch (Exception e) {
			System.out.println("shivam query = "+e.toString());
		}
		finally {
			cursor.close();
			close();
		}
		return check;
	}	
	
	
	 public void fndeleteStoreOrderBillAddressDetails(String StoreID,String OrderID)
	 {
	 	open();
	 	db.execSQL("DELETE FROM tblStoreOrderBillAddressDetails WHERE StoreId ='" + StoreID +"' and OrderID='"+OrderID+"'");
	 	close();
	 }
	  	
	 public long fnsaveStoreOrderBillAddressDetails(String StoreId,String OrderID,String BillToAddress,String ShipToAddress,String Sstat)
	 {
	      
	      ContentValues initialValues = new ContentValues();
	      
	      
	      initialValues.put("StoreID", StoreId.trim());
	     initialValues.put("OrderID", OrderID.trim());
	     initialValues.put("BillToAddress", BillToAddress.trim());
	     initialValues.put("ShipToAddress", ShipToAddress.trim());
	    /* initialValues.put("OrderID", OrderID.toString().trim());
	      initialValues.put("OutAddTypeID",OutAddTypeID );
	      initialValues.put("OutAddID", OutAddID);
	      initialValues.put("DeliveryPreferTime", DeliveryPreferTime);
	      initialValues.put("DeliveryNotPreferTime", DeliveryNotPreferTime);*/
	      initialValues.put("Sstat", Sstat);
	      
	      return db.insert("tblStoreOrderBillAddressDetails", null, initialValues); 
	 }      		
	 
	 
	 public int checkIfCurrentStoreIsNewInOrderBill(String StoreID)
		{

			int ScodecolumnIndex = 0;
			int ISNewStore=0;
			open();
			Cursor cursor = db.rawQuery("SELECT ISNewStore FROM tblStoreList where StoreID='"+StoreID+"'", null);
			try 
			{
				String StoreName[] = new String[cursor.getCount()];
				
				if (cursor.moveToFirst()) 
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++) 
					{
						ISNewStore = Integer.parseInt(cursor.getString(ScodecolumnIndex));
						cursor.moveToNext();
					}
				}
				return ISNewStore;
			} 
			finally
			{
				cursor.close();
				close();
			}
		}
	 public String fetchBillAddress(String OutletID)
	 {
		 open();
			Cursor cursor =null;
			String CompleteBillAddress="";
			try {
				
				cursor= db.rawQuery("SELECT QuestID,AnswerType,AnswerValue,QuestionGroupID FROM tblOutletQuestAnsMstr WHERE  OutletID ='"+ OutletID + "' and QuestionGroupID in (1,3,4) ", null);
				if (cursor.getCount() > 0)
				{
	               if (cursor.moveToFirst()) 
	               {
	                  for (int i = 0; i <= (cursor.getCount() - 1); i++) 
						{
	                	  String DDlStringCity="";
	                	  if(Integer.parseInt(cursor.getString(1))==8)
	                	  {
	                		  DDlStringCity=fnGetCityName(cursor.getString(0).trim(), cursor.getString(2).trim());
	                	  }
	                	  if(Integer.parseInt(cursor.getString(3))==1 || Integer.parseInt(cursor.getString(3))==4)
	                	  {
	                		  if(CompleteBillAddress.equals(""))
	                		  {
	                		  CompleteBillAddress= cursor.getString(2).trim();
	                		  }
	                		  else
	                		  {
	                			  CompleteBillAddress= CompleteBillAddress+", "+ cursor.getString(2).trim();
	                		  }
	                	  }
	                	  else if(Integer.parseInt(cursor.getString(3))==3)
	                	  {
	                		  if(CompleteBillAddress.equals(""))
	                		  {
	                		  CompleteBillAddress=DDlStringCity;
	                		  }
	                		  else
	                		  {
	                			  CompleteBillAddress= CompleteBillAddress+", "+DDlStringCity;
	                		  }
	                	  }
	                	  
							cursor.moveToNext();
						}
					}

				}
				

			} catch (Exception e) {
				System.out.println("shivam query = "+e.toString());
			}
			finally {
				cursor.close();
				close();
			}
			return CompleteBillAddress;
	 }

	 private String fnGetCityName(String QuestID, String AnsValue)
	 {
		 
			Cursor cursor =null;
			String DDlStringCity="";
			try {
				
				cursor= db.rawQuery("SELECT OptionDescr FROM tblOptionMstr WHERE  QuestID ='"+ QuestID + "' and OptID='"+AnsValue+"'", null);
				if (cursor.getCount() > 0)
				{
	               if (cursor.moveToFirst()) 
	               {
	                  for (int i = 0; i <= (cursor.getCount() - 1); i++) 
						{
	                	  DDlStringCity= cursor.getString(0).trim();
	                	 
							cursor.moveToNext();
						}
					}

				}
				

			} catch (Exception e) {
				System.out.println("shivam query = "+e.toString());
			}
			finally {
				cursor.close();
				
			}
			return DDlStringCity;
	 }
	 public String fetchDeliverAddress(String OutletID)
	 {
		 open();
			Cursor cursor =null;
			String CompleteDileveryAddress="";
			try {
				
				cursor= db.rawQuery("SELECT QuestID,AnswerType,AnswerValue,QuestionGroupID FROM tblOutletQuestAnsMstr WHERE  OutletID ='"+ OutletID + "' and QuestionGroupID in (5,7,8) ", null);
				if (cursor.getCount() > 0)
				{
	               if (cursor.moveToFirst()) 
	               {
	                  for (int i = 0; i <= (cursor.getCount() - 1); i++) 
						{
	                	  String DDlStringCity="";
	                	  if(Integer.parseInt(cursor.getString(1))==8)
	                	  {
	                		  DDlStringCity=fnGetCityName(cursor.getString(0).trim(), cursor.getString(2).trim());
	                	  }
	                	  if(Integer.parseInt(cursor.getString(3))==5 || Integer.parseInt(cursor.getString(3))==8)
	                	  {
	                		  if(CompleteDileveryAddress.equals(""))
	                		  {
	                			  CompleteDileveryAddress= cursor.getString(2).trim();
	                		  }
	                		  else
	                		  {
	                			  CompleteDileveryAddress= CompleteDileveryAddress+", "+ cursor.getString(2).trim();
	                		  }
	                	  }
	                	  else if(Integer.parseInt(cursor.getString(3))==7)
	                	  {
	                		  if(CompleteDileveryAddress.equals(""))
	                		  {
	                			  CompleteDileveryAddress=DDlStringCity;
	                		  }
	                		  else
	                		  {
	                			  CompleteDileveryAddress= CompleteDileveryAddress+", "+DDlStringCity;
	                		  }
	                	  }
	                	  
							cursor.moveToNext();
						}
					}

				}
				

			} catch (Exception e) {
				System.out.println("shivam query = "+e.toString());
			}
			finally {
				cursor.close();
				close();
			}
			return CompleteDileveryAddress;
	 }
	 
	 public String fnGetPreFilledStoreOrderBillAddressDetails(String StoreId,String OrderID)
     {
      ////tblReturnReason(StockStatusId text not null,StockStatus text not null);";
      String strPreFilledStoreOrderBillAddressDetails="";
      open();
      try {
      Cursor cur=db.rawQuery("Select BillToAddress,ShipToAddress from tblStoreOrderBillAddressDetails Where StoreID='"+StoreId+"' and OrderID='"+OrderID+"'", null);
      if(cur.getCount()>0)
      {
       if(cur.moveToFirst())
       {
        for(int i=0;i<cur.getCount();i++)
        {
        	strPreFilledStoreOrderBillAddressDetails= cur.getString(0)+"$"+cur.getString(1);
         cur.moveToNext();
        }
       }
      }
      } catch (Exception e) {
System.out.println(" Print e ="+e.toString());
}
      finally
      {
       close();
       return strPreFilledStoreOrderBillAddressDetails;
      }
     }
	 
	 public void fndeleteStoreSalesOrderPaymentDetailsOnStoreIDBasis(String StoreID)
	 {
	 	open();
	 	db.execSQL("DELETE FROM tblStoreSalesOrderPaymentDetails WHERE StoreId ='" + StoreID +"'");
	 	close();
	 }
	 
	 public void fndeleteStoreOrderBillAddressDetailsOnStoreIDBasis(String StoreID)
	 {
	 	open();
	 	db.execSQL("DELETE FROM tblStoreOrderBillAddressDetails WHERE StoreId ='" + StoreID +"'");
	 	close();
	 }
	 
	 public String fnGetDefaultStoreOrderPAymentDetails(String  StoreId) 
		{
			open();
			Cursor cursor =null;
			String PaymentStageFROM="";
			try {
				
				cursor= db.rawQuery("SELECT PaymentStage FROM tblStoreList WHERE  StoreID ='"+ StoreId + "'", null);
				if (cursor.getCount() > 0)
				{
	               if (cursor.moveToFirst()) 
	               {
	                  for (int i = 0; i <= (cursor.getCount() - 1); i++) 
						{
	                	  PaymentStageFROM= cursor.getString(0);
							cursor.moveToNext();
						}
					}

				}
				

			} catch (Exception e) {
				System.out.println("shivam query = "+e.toString());
			}
			finally {
				cursor.close();
				close();
			}
			return PaymentStageFROM;
		}	
	 
	// "create table tblMinDeliverQntty (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
	 	public LinkedHashMap<String, Integer> getMinDlvryQntty(String storeId)
	 	{
	 		LinkedHashMap<String, Integer> hmapMinDlvrQty= new LinkedHashMap<>();
	 		open();
	 		try {
				
			
	 		Cursor cur=db.rawQuery("Select PrdId,MinDlvrQty from tblMinDeliverQntty where StoreID='"+storeId+"'",null);
	 		if(cur.getCount()>0)
	 		{
	 			if(cur.moveToFirst())
	 			{
	 				for(int i=0;i<cur.getCount();i++)
	 				{
	 					hmapMinDlvrQty.put(cur.getString(0), cur.getInt(1));
	 					cur.moveToNext();
	 				}
	 			}
	 		}
	 		
	 		} catch (Exception e) {
				
			}finally
			{
				close();
				return hmapMinDlvrQty;
			}
	 	}
	 	
	 	
	 // "create table tblMinDeliverQntty (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
	 	 	public LinkedHashMap<String, String> getMinDlvryQnttyQPBT(String storeId)
	 	 	{
	 	 		LinkedHashMap<String, String> hmapMinDlvrQtyQPBT= new LinkedHashMap<>();
	 	 		open();
	 	 		try {
	 				
	 			
	 	 		Cursor cur=db.rawQuery("Select PrdId,QPBT from tblMinDeliverQntty where StoreID='"+storeId+"'",null);
	 	 		if(cur.getCount()>0)
	 	 		{
	 	 			if(cur.moveToFirst())
	 	 			{
	 	 				for(int i=0;i<cur.getCount();i++)
	 	 				{
	 	 					hmapMinDlvrQtyQPBT.put(cur.getString(0), cur.getString(1));
	 	 					cur.moveToNext();
	 	 				}
	 	 			}
	 	 		}
	 	 		
	 	 		} catch (Exception e) {
	 				
	 			}finally
	 			{
	 				close();
	 				return hmapMinDlvrQtyQPBT;
	 			}
	 	 	}
	 	 	
	 	 	public LinkedHashMap<String, String> getMinDlvryQnttyQPAT(String storeId)
	 	 	{
	 	 		LinkedHashMap<String, String> hmapMinDlvrQtyQPAT= new LinkedHashMap<>();
	 	 		open();
	 	 		try {
	 				
	 			
	 	 		Cursor cur=db.rawQuery("Select PrdId,QPAT from tblMinDeliverQntty where StoreID='"+storeId+"'",null);
	 	 		if(cur.getCount()>0)
	 	 		{
	 	 			if(cur.moveToFirst())
	 	 			{
	 	 				for(int i=0;i<cur.getCount();i++)
	 	 				{
	 	 					hmapMinDlvrQtyQPAT.put(cur.getString(0), cur.getString(1));
	 	 					cur.moveToNext();
	 	 				}
	 	 			}
	 	 		}
	 	 		
	 	 		} catch (Exception e) {
	 				
	 			}finally
	 			{
	 				close();
	 				return hmapMinDlvrQtyQPAT;
	 			}
	 	 	}
	 	 	 // "create table tblMinDeliverQntty (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
	 	 	public LinkedHashMap<String, String> getMinDlvryQnttyQPTaxAmount(String storeId)
	 	 	{
	 	 		LinkedHashMap<String, String> hmapMinDlvrQtyQPTaxAmount= new LinkedHashMap<>();
	 	 		open();
	 	 		try {
	 				
	 			
	 	 			Cursor cur=db.rawQuery("Select PrdId,QPTaxAmount from tblMinDeliverQntty where StoreID='"+storeId+"'",null);
	 	 		if(cur.getCount()>0)
	 	 		{
	 	 			if(cur.moveToFirst())
	 	 			{
	 	 				for(int i=0;i<cur.getCount();i++)
	 	 				{
	 	 					hmapMinDlvrQtyQPTaxAmount.put(cur.getString(0), cur.getString(1));
	 	 					cur.moveToNext();
	 	 				}
	 	 			}
	 	 		}
	 	 		
	 	 		} catch (Exception e) {
	 				
	 			}finally
	 			{
	 				close();
	 				return hmapMinDlvrQtyQPTaxAmount;
	 			}
	 	 	}

	 	 	 public int fnchkIfStoreFasQuote(String  StoreId) 
	 		{
	 			open();
	 			Cursor cursor =null;
	 			int check=0;
	 			try {
	 				
	 				cursor= db.rawQuery("SELECT flgHasQuote FROM tblStoreList WHERE  StoreID ='"+ StoreId + "'", null);
	 				if (cursor.getCount() > 0)
	 				{
	 	               if (cursor.moveToFirst()) 
	 	               {
	 	            	   if(Integer.parseInt(cursor.getString(0))==1)
	 	            	   {
	 	            		   check=1;
	 	            	   }
	 					}

	 				}
	 				

	 			} catch (Exception e) {
	 				System.out.println("shivam query = "+e.toString());
	 			}
	 			finally {
	 				cursor.close();
	 				close();
	 			}
	 			return check;
	 		}	
	 	 
	 	 	public void fnDeletefromtblSchemeStoreMappingAgainstStore(String StoreID)
	 		{
	 	 		open();
	 			db.execSQL("DELETE  FROM tblSchemeStoreMapping WHERE  StoreID='"+ StoreID + "'");
	 			close();
	 		}
	 	 	
	 	 	
	 	 	 public int fnchkIfStoreAllowQuotation(String  StoreId) 
	 			{
	 				open();
	 				Cursor cursor =null;
	 				int check=0;
	 				try {
	 					
	 					cursor= db.rawQuery("SELECT flgAllowQuotation FROM tblStoreList WHERE  StoreID ='"+ StoreId + "'", null);
	 					if (cursor.getCount() > 0)
	 					{
	 		               if (cursor.moveToFirst()) 
	 		               {
	 		            	   if(Integer.parseInt(cursor.getString(0))==1)
	 		            	   {
	 		            		   check=1;
	 		            	   }
	 						}

	 					}
	 					

	 				} catch (Exception e) {
	 					System.out.println("shivam query = "+e.toString());
	 				}
	 				finally {
	 					cursor.close();
	 					close();
	 				}
	 				return check;
	 			}	
	 	 	 
	 	 	 
	 	 	public void UpdateStoreFlagQoutation(String sID, int flag2set)
	 		{

	 			try
	 			 {

	 				final ContentValues values = new ContentValues();
	 				values.put("Sstat", flag2set);
	 				int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { sID });
	 				int affected26 = db.update("tblRateDistribution", values, "StoreId=?",new String[] { sID });
	 				
	 				int affected4 = db.update("tblNewStoreListEntries", values,"StoreID=?", new String[] { sID });
	 				int affected9 = db.update("tblNewStoreEntries", values,"StoreID=?", new String[] { sID });
	 				int affected10 = db.update("tblTemp", values,"StoreID=?", new String[] { sID });
	 				
	 				int affected17 = db.update("tblSalesQuotePersonMeetMstr", values,"StoreId=?", new String[] { sID });
	 				int affected21 = db.update("tblOutletQuestAnsMstr", values,"OutletID=?", new String[] { sID });
	 				
	 				int affected23 = db.update("tblNewStoreSalesQuotePaymentDetails", values,"StoreId=?", new String[] { sID });
	 				
	 				LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr= fngetDistinctSalesQuotePersonMeetMstrForSstatUpdate(sID);
	 				
	 				
	 				Iterator it11new = hmapDistinctSalesQuotePersonMeetMstr.entrySet().iterator();
	 	   			
	 			    while (it11new.hasNext()) {
	 			        Map.Entry pair = (Map.Entry)it11new.next();
	 			        if(hmapDistinctSalesQuotePersonMeetMstr.containsKey(pair.getKey().toString())){
	 			        	//crntPID	=pair.getKey().toString();
	 			        	int affected18 = db.update("tblSalesQuoteProductsMstr", values,"SalesQuoteId=?", new String[] { pair.getKey().toString() });
	 			        }
	 		      
	 		    }
	 				
	 				Log.w(TAG, "affected records: " + affected);

	 				Log.w(TAG, "Record(s) Updated..");

	 			 }
	 			catch (Exception ex)
	 			{
	 				Log.e(TAG, ex.toString());
	 			}

	 		}
	 	 	
	 	 	
	 	 	public void updateStoreQuoteSubmitFlgInStoreMstr(String StoreID,int flgSubmitFromQuotation)
	 	 	 {
	 	 		open();
	 	 			 
	 	 				final ContentValues values = new ContentValues();
	 	 				values.put("flgSubmitFromQuotation", flgSubmitFromQuotation);
	 	 				int affected = db.update("tblStoreList", values, "StoreID=?",
	 	 						new String[] { StoreID });
	 	 				
	 	 		close();	
	 	 			}
	 	 	
	 	 	
	 	 	 public int fnchkIfStoreHasInvoiceEntry(String  StoreId) 
	 			{
	 				
	 				Cursor cursor =null;
	 				int check=0;
	 				try {
	 					
	 					cursor= db.rawQuery("SELECT * FROM tblInvoice WHERE  StoreID ='"+ StoreId + "'", null);
	 					if (cursor.getCount() > 0)
	 					{
	 		               if (cursor.moveToFirst()) 
	 		               {
	 		            	   if(Integer.parseInt(cursor.getString(0))==1)
	 		            	   {
	 		            		   check=1;
	 		            	   }
	 						}

	 					}
	 					

	 				} catch (Exception e) {
	 					System.out.println("shivam query = "+e.toString());
	 				}
	 				finally {
	 					cursor.close();
	 					
	 				}
	 				return check;
	 			}	
	 	 	 
	 	 	public void updateStoreQuoteSubmitFlgInStoreMstrInChangeRouteCase(String StoreID,int flgSubmitFromQuotation)
	 	 	 {	
				final ContentValues values = new ContentValues();
				values.put("flgSubmitFromQuotation", flgSubmitFromQuotation);
				int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { StoreID });
	 	 	}
	 	 	
	 	 	
	 	 	public String[] FetchStoreStatusflgSubmitFromQuotation()
	 		{
	 			int ScodecolumnIndex = 0;
	 			Cursor cursor = db.rawQuery("SELECT flgSubmitFromQuotation FROM tblStoreList ORDER BY DistanceNear", null);
	 			try 
	 			{
	 				String StoreName[] = new String[cursor.getCount()];
	 				if (cursor.moveToFirst()) 
	 				{
	 					for (int i = 0; i <= (cursor.getCount() - 1); i++) 
	 					{
	 						StoreName[i] = cursor.getString(ScodecolumnIndex);
	 						cursor.moveToNext();
	 					}
	 				}
	 				return StoreName;
	 			} 
	 			finally
	 			{
	 				cursor.close();
	 			}
	 		}
	 	 	
	 	 	
	 	 	
	 	 	 public LinkedHashMap<String, String> fnGetListQuoteISOfUnmappedWithProducts(String StoreID)
			 {
				 open();
					Cursor cursor = db.rawQuery("Select Distinct tblSalesQuotePersonMeetMstr.SalesQuoteId from tblSalesQuotePersonMeetMstr Where tblSalesQuotePersonMeetMstr.SalesQuoteId not in(Select tblSalesQuoteProductsMstr.SalesQuoteId from tblSalesQuoteProductsMstr) and StoreId='"+StoreID+"'", null);
					LinkedHashMap<String, String> hmapList= new LinkedHashMap<>();
					try {
						if(cursor.getCount()>0){
							if (cursor.moveToFirst()){
								hmapList.put(cursor.getString(0),StoreID);
							}

						}
						return hmapList;
					}

					finally
					{
						//cursor.close();
						close();
					}
			 }
public void fndeleteQuoteISOfUnmappedWithProducts(String SalesQuoteId)
{
	open();
	db.execSQL("DELETE FROM tblSalesQuoteProductsMstr WHERE SalesQuoteId='"+SalesQuoteId+"'");
	db.execSQL("DELETE FROM tblSalesQuotePersonMeetMstr WHERE SalesQuoteId='"+SalesQuoteId+"'");
	db.execSQL("DELETE FROM tblRateDistribution WHERE SalesQuoteId='"+SalesQuoteId+"'");
	close();
}

public int fnGetBusinessSegmentIDAgainstStoreType(int OutChannelID)
{

	int ScodecolumnIndex = 0;
	int BusinessSegmentID=0;
	open();
	Cursor cursor = db.rawQuery("SELECT BusinessSegmentID FROM tblOutletChannelBusinessSegmentMaster where OutChannelID="+OutChannelID, null);
	try 
	{
		
		
		if (cursor.moveToFirst()) 
		{

			for (int i = 0; i <= (cursor.getCount() - 1); i++) 
			{
				BusinessSegmentID = Integer.parseInt(cursor.getString(ScodecolumnIndex));
				cursor.moveToNext();
			}
		}
		return BusinessSegmentID;
	} 
	finally
	{
		cursor.close();
		close();
	}
}
public int fnGetAnsValID(int optionId)
{
//tblOptionMstr(OptID int null,QuestID int null,OptionNo int null,OptionDescr text null,Sequence int null );";
	int ScodecolumnIndex = 0;
	int ansValId=0;
	open();
	Cursor cursor = db.rawQuery("SELECT OptionNo FROM tblOptionMstr where OptID="+optionId, null);
	try 
	{
		
		
		if (cursor.moveToFirst()) 
		{

			for (int i = 0; i <= (cursor.getCount() - 1); i++) 
			{
				ansValId = Integer.parseInt(cursor.getString(ScodecolumnIndex));
				cursor.moveToNext();
			}
		}
		return ansValId;
	} 
	finally
	{
		cursor.close();
		close();
	}
}


	/*public String fnGetQuestIDForOutChannelFromQuestionMstr()
	{//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null,GrpCopyID int null,QuestCopyID int null);";

		int ScodecolumnIndex = 0;
		int ansCntrlTypeIndex = 1;
		int grpQuestIdIndex = 2;
		String QuestID="0";
		open();
		Cursor cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID FROM tblQuestionMstr inner join tblPDAQuestGrpMappingMstr ON tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID where tblQuestionMstr.flgQuestIDForOutChannel=1", null);
		try
		{


			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					QuestID = cursor.getString(ScodecolumnIndex)+"^"+cursor.getString(ansCntrlTypeIndex)+"^"+cursor.getString(grpQuestIdIndex);
					cursor.moveToNext();
				}
			}
			return QuestID;
		}
		finally
		{
			cursor.close();
			close();
		}
	}*/
public long saveTblSalesQuoteSponsorMstr(String SalesQuoteSponsorID,String SponsorDescr,String Ordr)
{
     
     ContentValues initialValues = new ContentValues();
     
     initialValues.put("SalesQuoteSponsorID", SalesQuoteSponsorID.trim());
     initialValues.put("SponsorDescr", SponsorDescr.trim());
     initialValues.put("Ordr", Ordr.trim());
     
     return db.insert(TABLE_tblSalesQuoteSponsorMstr, null, initialValues); 
}
public long saveTblManufacturerMstrMain(String ManufacturerID,String ManufacturerName,String NodeType)
{
   
   ContentValues initialValues = new ContentValues();
   
   initialValues.put("ManufacturerID", ManufacturerID.trim());
   initialValues.put("ManufacturerName", ManufacturerName.trim());
   initialValues.put("NodeType", NodeType.trim());
   
   return db.insert(TABLE_tblManufacturerMstrMain, null, initialValues); 
}
public long saveTblRateDistribution(String SalesQuoteId,String StoreId,String SalesQuoteSponsorID,String ManufacturerID,String Percentage,String SponsorDescr,String ManufacturerName,String Sstat)
{
   
   ContentValues initialValues = new ContentValues();
   
   initialValues.put("SalesQuoteId", SalesQuoteId.trim());
   initialValues.put("StoreId", StoreId.trim());
   initialValues.put("SalesQuoteSponsorID", SalesQuoteSponsorID.trim());
   initialValues.put("ManufacturerID", ManufacturerID.trim());
   initialValues.put("Percentage", Percentage.trim());
   initialValues.put("SponsorDescr", SponsorDescr.trim());
   initialValues.put("ManufacturerName", ManufacturerName.trim());
   initialValues.put("Sstat", Sstat.trim());
   
   return db.insert(TABLE_tblRateDistribution, null, initialValues); 
}

public LinkedHashMap<String, String> fnGettblManufacturerMstrMain()
{
 LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
 open();
// Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'

// (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
 // close();
 try {
  Cursor cursor = db.rawQuery("SELECT ManufacturerID,ManufacturerName,NodeType from tblManufacturerMstrMain   ", null);// Where PNodeID='"+TSIID+"'
  if(cursor.getCount()>0)
 {
   if (cursor.moveToFirst())
  {
    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
     hmapQuestionMstr.put((String) cursor.getString(1),(String) cursor.getString(0) +"^"+(String) cursor.getString(2));
 //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
     cursor.moveToNext();
    }
  }
 }

 }
 catch (Exception e) {
System.out.println("Error fnGettblUOMMstr= "+e.toString());
}
 finally 
 {

 close();
 return hmapQuestionMstr;
}
}

public LinkedHashMap<String, ArrayList<String>> fnGettblRateDistribution(String SalesQuoteId,String StoreId)
{
 LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr= new LinkedHashMap<>();
 
 open();

 try {
  Cursor cursor = db.rawQuery("SELECT SalesQuoteSponsorID,ManufacturerID,Percentage,SponsorDescr,ManufacturerName from tblRateDistribution   where SalesQuoteId='"+SalesQuoteId+"' and StoreId='"+StoreId+"'", null);// Where PNodeID='"+TSIID+"'
  if(cursor.getCount()>0)
 {
   if (cursor.moveToFirst())
  {
    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
    	ArrayList<String> abc= new ArrayList<>();
    	abc.add((String) cursor.getString(0));
    	abc.add((String) cursor.getString(1));
    	abc.add((String) cursor.getString(2));
    	abc.add((String) cursor.getString(3));
    	abc.add((String) cursor.getString(4));
    	   hmapQuestionMstr.put(abc.get(0),abc);
     cursor.moveToNext();
    }
  }
   
 }

 }
 catch (Exception e) {
System.out.println("Error fnGettblUOMMstr= "+e.toString());
}
 finally 
 {

 close();
 return hmapQuestionMstr;
}
}


public LinkedHashMap<String, String> fnGettblSalesQuoteSponsorMstr()
{
 LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
 open();
// Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'

// (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
 // close();
 try {
  Cursor cursor = db.rawQuery("SELECT SalesQuoteSponsorID,SponsorDescr,Ordr from tblSalesQuoteSponsorMstr   ", null);// Where PNodeID='"+TSIID+"'
  if(cursor.getCount()>0)
 {
   if (cursor.moveToFirst())
  {
    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
     hmapQuestionMstr.put((String) cursor.getString(1),(String) cursor.getString(0) +"^"+(String) cursor.getString(2));
 //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
     cursor.moveToNext();
    }
  }
 }

 }
 catch (Exception e) {
System.out.println("Error fnGettblUOMMstr= "+e.toString());
}
 finally 
 {

 close();
 return hmapQuestionMstr;
}
}


public LinkedHashMap<String, String> fnProductManufractureIDList()
{
 LinkedHashMap<String, String> hmapProductManufractureIDList= new LinkedHashMap<>();
 open();

 try {
  Cursor cursor = db.rawQuery("SELECT ProductID,ManufacturerID from tblProductList", null);
  if(cursor.getCount()>0)
 {
   if (cursor.moveToFirst())
  {
    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
    	hmapProductManufractureIDList.put((String) cursor.getString(0),(String) cursor.getString(1));
     cursor.moveToNext();
    }
  }
 }

 }
 catch (Exception e) {
System.out.println("Error fnProductManufractureIDList= "+e.toString());
}
 finally 
 {

 close();
 return hmapProductManufractureIDList;
}
}

public ArrayList<String> fectProductIDMappedInSchSlbSubBukRowIdTemp(int schSlbSubRowID) 
{
	open();
 Cursor cursor = db.rawQuery("SELECT ProductID FROM tblSchemeSlabBucketProductMapping WHERE RowID ="+ schSlbSubRowID , null);
 try {
	   ArrayList<String> CompleteResult = new ArrayList<>();
  if (cursor.getCount() > 0) {
   if (cursor.moveToFirst()) {
    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
     CompleteResult.add(cursor.getString(0));
     cursor.moveToNext();
    }
   }
  }
  return CompleteResult;

 } finally {
  cursor.close();
  close();
 }

}

public String fnGetBenifitAssignedValue(String StoreID,int ProductIdOnClicked,int schId)
{
	//tblStoreProductAppliedSchemesBenifitsRecords (StoreID text not null,ProductID int not null,schId int not null,schSlabId integer not null,schSlbBuckId integer not null,schSlabSubBucketValue real not null,schSubBucketValType integer not null,schSlabSubBucketType int not null,BenifitRowID integer not null,BenSubBucketType int null,FreeProductID int null,BenifitSubBucketValue real null,BenifitMaxValue real null,BenifitAssignedValue real null,BenifitAssignedValueType int null,BenifitDiscountApplied int null,BenifitCouponCode text null,Sstat integer not null,Per real null,UOM real null,WhatFinallyApplied int null,schSlbRowId int null,SchTypeId int null,DiscountPercentage real null,OrderIDPDA text null);";
 open();
 Cursor cursor = db.rawQuery("SELECT FreeProductID,BenifitAssignedValue,BenSubBucketType FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and  schId="+schId+" and BenSubBucketType in(1,5,2,6,3,7) and ProductID="+ProductIdOnClicked, null);
 String chkI = "";
 try {
  if(cursor.getCount()>0)
  { 
   
   if (cursor.moveToFirst()) {
    
     for (int i = 0; i <= (cursor.getCount() - 1); i++) 
     {
      if(cursor.getString(0)!=null && cursor.getString(1)!=null && cursor.getString(2)!=null)
       {
       chkI = cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2);
      }
      cursor.moveToNext();
     }
   }
  }

 } finally {
  cursor.close();
  close();
 }
 return chkI;
}

public ArrayList<String> fnGetProductsSchIdSlabRowList(String StoreID,int RowID,String pdaOrderID) 
{//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
       open();//schId
// Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
       Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID +"  and StoreID='"+StoreID+"' and OrderIDPDA='"+pdaOrderID+"'", null);
 ArrayList<String> AllProductInSlab = new ArrayList<>();
 
 try {
       if(cursorE2.getCount()>0)
         {
     if (cursorE2.moveToFirst())
     {
  
      for (int i = 0; i <= (cursorE2.getCount() - 1); i++) 
      {
       AllProductInSlab.add(cursorE2.getString(0));
       cursorE2.moveToNext();
       //cursor.moveToNext();
      }
     }
   }
    return AllProductInSlab;
 } finally {
  cursorE2.close();
  close();
 }

}

public void updateManufacturerIDAndName(String SalesQuoteId,String ManufacturerID, String ManufacturerName) 
	{
	
		try 
		{
	        open();
			
			final ContentValues values = new ContentValues();
			values.put("ManufacturerID", ManufacturerID);
			values.put("ManufacturerName", ManufacturerName);
			
			int affected = db.update("tblSalesQuotePersonMeetMstr", values, "SalesQuoteId=?",new String[] {SalesQuoteId});
	
		} 
		catch (Exception ex) 
		{
			Log.e(TAG, ex.toString());
		}
		finally
		{
			close();
		}
	
	}

public String getManufacturerIDAndManufacturerNameDetails(String SalesQuoteId)
{
           String searchString="0^0";
          // LinkedHashMap<String, String> hmapQuotationPersionMeetDetails=new LinkedHashMap<String, String>();

      try 
      {
   	   open();
      Cursor cur=db.rawQuery("Select ManufacturerID,ManufacturerName from tblSalesQuotePersonMeetMstr Where tblSalesQuotePersonMeetMstr.SalesQuoteId='"+SalesQuoteId+"'", null);

      if(cur.getCount()>0)

      {

             StringBuilder sBuilder=new StringBuilder();

             if(cur.moveToFirst())

             {

                   for(int i=0;i<cur.getCount();i++)

                   {

                	   searchString=cur.getString(0)+"^"+cur.getString(1);

                          cur.moveToNext();

                   }

             }

            

      }

     

      } catch (Exception e) {

                    // TODO: handle exception

             }

      finally

      {

             close();

             return searchString;

      }

}

public int checkMessageIDExistOrNotForNotification(int MsgServerID) 
{
	Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblNotificationMstr WHERE MsgServerID ="+ MsgServerID, null);
	int chkI = 0;
	try {
		if (cursorE2.moveToFirst())
		{

			if (cursorE2.getInt(0) > 0) 
			{
				chkI = 1;
			} 
			else
			{
				chkI = 0;
			}
		}

	} finally {
		cursorE2.close();
	}
	return chkI;
}

public void Delete_tblNotificationMstr()
{
	db.execSQL("DELETE FROM tblNotificationMstr");
	
	
}

public ArrayList<String> getGstDataByStore(String StoreID) 
{
	ArrayList<String> PrevAccuracy= new ArrayList<>();
	open();
	try 
	{
		Cursor cursor2 = db.rawQuery("Select flgGSTCapture,flgGSTCompliance,GSTNumber from tblStoreList where StoreID ='"+ StoreID + "'", null);
		  if(cursor2.getCount()>0)
		   {
			   if (cursor2.moveToFirst()) 
			    {
				   for (int i = 0; i < cursor2.getCount(); i++)
					{
					   PrevAccuracy.add(cursor2.getString(0).trim());
					   PrevAccuracy.add(cursor2.getString(1).trim());
					   PrevAccuracy.add(cursor2.getString(2).trim());
					  // PrevAccuracy =cursor2.getString(0).toString().trim()+"^"+cursor2.getString(1).toString().trim()+"^"+cursor2.getString(2).toString().trim();
					       cursor2.moveToNext();
						}
						
					}
				}  
	} 
	catch(Exception e)
	{}
	finally
	{
		close();
	}
	return PrevAccuracy;
}

public int fnGetflgServerRecordFromOutletMstr(String StoreID)
{
 int flgServerRecord = 0;
 
 try 
 {
  open();
 //Cursor cursor = db.rawQuery("SELECT flgGSTRecordFromServer FROM tblStoreList where StoreID='" + StoreID + "' and Sstat=3", null);
  Cursor cursor = db.rawQuery("SELECT flgGSTRecordFromServer FROM tblStoreList where StoreID='" + StoreID + "'", null);
      
  if (cursor.moveToFirst())
  {

   for (int i = 0; i <= (cursor.getCount() - 1); i++)
   {
    if (!cursor.isNull(0))
    {
     flgServerRecord = Integer.parseInt(cursor.getString(0));
     cursor.moveToNext();
    }

   }
  }
  return flgServerRecord;
 } finally 
 {
  close();
 }
}

public void UpdateStoreInfoGST(String StoreID,String flgGSTCapture,String flgGSTCompliance,String GSTNumber)
{
	try
	{
	open();
	final ContentValues values = new ContentValues();
	values.put("flgGSTCapture", flgGSTCapture);
	values.put("flgGSTCompliance", flgGSTCompliance);
	values.put("GSTNumber", GSTNumber);
	
	
	int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { StoreID });
	}
	catch(Exception e)
	{
		
	}
	finally
	{
	close();
	}
	
}

public String fnGetGstOptionIDComplianceWhileAddingNewStore(String flgGSTCompliance)
{
 String flgGSTComplianceResult = "0";
 
 try 
 {
  open();
  Cursor cursor = db.rawQuery("SELECT OptionNo FROM tblOptionMstr where OptID='" + flgGSTCompliance+"'", null);
      
  if (cursor.moveToFirst())
  {

   for (int i = 0; i <= (cursor.getCount() - 1); i++)
   {
    if (!cursor.isNull(0))
    {
  	  flgGSTComplianceResult = cursor.getString(0);
     cursor.moveToNext();
    }

   }
  }
  return flgGSTComplianceResult;
 } finally 
 {
  close();
 }
}

public int countNumberOFNotificationtblNotificationMstr()  throws IOException
{
	int chkI = 0;
	Cursor cursorE2 = db.rawQuery("SELECT Count(*) FROM tblNotificationMstr where Noti_NewOld=1 and Noti_ReadStatus=1", null);
	
	try {
		if (cursorE2.moveToFirst()) 
		{

			if (cursorE2.getInt(0) > 0) 
			{
				chkI = 1;
			} else 
			{
				chkI = 0;
			}
		}

	} finally {
		cursorE2.close();
	}
	return chkI;
}
	//private static final String DATABASE_CREATE_TABLE_OPTIONMstr = "create table tblOptionMstr" +
			//"(OptID int null,QuestID int null,OptionNo int null,OptionDescr text null,Sequence int null );";

public  LinkedHashMap<String,String> fngetAllOptionForQuestionID(int QuestID)
{
	open();
    LinkedHashMap<String,String> hashMapOption= new LinkedHashMap<>();

	try {
		Cursor cursor = db.rawQuery("Select OptID,OptionDescr,Sequence from tblOptionMstr where QuestID=" + QuestID + "and Sequence Order by acs", null);

		if (cursor.getCount() > 0) {
			if (cursor.moveToFirst()) {
				for (int i = 0; i < cursor.getCount() - 1; i++) {
					hashMapOption.put(cursor.getString(0), cursor.getString(1));
				}
			}
		}
	}
	catch(Exception e)
	{

	}
	finally
	{
		close();
		return hashMapOption;
	}



}


   // New Added Store Fun Start


	public String[] getAllOptValueDpndntQuest()
	{
		String[] allQuestValesDpndnt=null;
		open();
		try {

			//tblQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null)
			Cursor cur=db.rawQuery("Select Distinct GrpID from tblQuestionDependentMstr", null);
			if(cur.getCount()>0)
			{
				allQuestValesDpndnt=new String[cur.getCount()];
				if(cur.moveToFirst())
				{
					for(int i=0;i<cur.getCount();i++)
					{
						allQuestValesDpndnt[i]=String.valueOf(cur.getInt(0));
						cur.moveToNext();
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return allQuestValesDpndnt;
		}

	}
	public String[] fnGetDependentParentQuesIdr()
	{


		open();
//tblQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";
		Cursor cursor = db.rawQuery("SELECT DISTINCT GrpDepQuestID from tblQuestionDependentMstr", null);// Where PNodeID='"+TSIID+"'
		String []arrbhi=new String[cursor.getCount()];
		try {
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						// hmapDpndntQuestionMstr.put((String) cursor.getString(3).toString()+"^"+(String) cursor.getString(1).toString(), (String) cursor.getString(2).toString());
						arrbhi[i]=(String) cursor.getString(0);
						cursor.moveToNext();
					}
				}
			}

			return arrbhi;
		}
		finally
		{
			cursor.close();
			close();
		}
	}

	public LinkedHashMap<String, String> fnGetQuestionID_AnsCntrlType()
	{
		LinkedHashMap<String, String> hmapQuestionId_AnsCntrlTyper= new LinkedHashMap<>();
		open();
		int lastIndex=0;
		//tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
		Cursor cursor = db.rawQuery("SELECT QuestID,AnsControlType from tblQuestionMstr", null);

		try {
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						hmapQuestionId_AnsCntrlTyper.put(cursor.getString(0).trim(),(String) cursor.getString(1).trim());
						//    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
						cursor.moveToNext();
					}

				}
			}
			return hmapQuestionId_AnsCntrlTyper;
		}
		finally
		{
			cursor.close();
			close();
		}
	}

	public LinkedHashMap<String, ArrayList<String>> getAllQuestIdDpndnt()
	{// //tblQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";
		LinkedHashMap<String, ArrayList<String>> hmapQuestDependVisible= new LinkedHashMap<>();
		ArrayList<String> listQestDpndnt= new ArrayList<>();

		try {


			open();

			Cursor cur=db.rawQuery("Select GrpID,GrpDepQuestID from tblQuestionDependentMstr Order By GrpDepQuestID", null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{
					String questId,dpndntQuestId,prvsdpndntQuestId = null;
					for(int i=0;i<cur.getCount();i++)
					{
						questId=String.valueOf(cur.getInt(0));
						dpndntQuestId =String.valueOf(cur.getInt(1));
						if(i==0)
						{
							listQestDpndnt.add(questId);
							prvsdpndntQuestId=dpndntQuestId;
						}
						else
						{
							if( prvsdpndntQuestId==dpndntQuestId)
							{
								listQestDpndnt.add(questId);
							}
							else
							{
								hmapQuestDependVisible.put(prvsdpndntQuestId, listQestDpndnt);
								listQestDpndnt= new ArrayList<>();

								listQestDpndnt.add(questId);
								prvsdpndntQuestId=dpndntQuestId;
							}


						}
						if(i==cur.getCount()-1)
						{
							hmapQuestDependVisible.put(prvsdpndntQuestId, listQestDpndnt);
						}
						cur.moveToNext();
					}
				}
			}
		} catch (Exception e) {
			System.out.println("ErrorDatabase getAllQuestIdWhoseValuesDpndnt ="+ e.toString());
		} finally
		{
			close();
			return hmapQuestDependVisible;
		}
	}
	public LinkedHashMap<String, String> getAllQstGrpIdAgainstGrp()
	{
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		open();
		LinkedHashMap<String, String> hmapData= new LinkedHashMap<>();
		Cursor cur=db.rawQuery("Select GrpID,GrpQuestID from tblPDAQuestGrpMappingMstr", null);
		if(cur.getCount()>0)
		{
			if(cur.moveToFirst())
			{
				for(int i=0;i<cur.getCount();i++)
				{
					hmapData.put(cur.getString(1), cur.getString(0));
					cur.moveToNext();
				}
			}
		}
		close();
		return hmapData;
	}
	public LinkedHashMap<String, String> getQuestGrpIdLnkWdQstId()
	{
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		open();
		LinkedHashMap<String, String> hmapData= new LinkedHashMap<>();
		Cursor cur=db.rawQuery("Select QuestID,GrpQuestID from tblPDAQuestGrpMappingMstr", null);
		if(cur.getCount()>0)
		{
			if(cur.moveToFirst())
			{
				for(int i=0;i<cur.getCount();i++)
				{
					hmapData.put(cur.getString(1), cur.getString(0));
					cur.moveToNext();
				}
			}
		}
		close();
		return hmapData;
	}

	public String getChannelGroupIdOptId()
	{
		String grpQstIdOptIdForChannel="0-0-0";


		try {

//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
			Cursor cur=db.rawQuery("Select OptID from tblQuestIDForOutChannel", null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{

					grpQstIdOptIdForChannel=cur.getString(0);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{

			return grpQstIdOptIdForChannel;
		}
	}
	/*public LinkedHashMap<String, String> getQuestAnswer(String tempId)
	{
		open();
		LinkedHashMap<String, String> hmapRtrvQuestAns=new LinkedHashMap<String, String>();
		try {
			String channelOptId=getChannelGroupIdOptId();
			String channelkey =getChannelGroupIdKey();
			if(!channelOptId.equals("0-0-0") && !TextUtils.isEmpty(channelkey))
			{
				hmapRtrvQuestAns.put(channelkey,channelOptId);
			}

			//  hmapRtrvQuestAns.put("1^6^1","0-1-80");
			//tblOutletQuestAnsMstr (OutletID text not null,QuestID text not null,AnswerType text null, AnswerValue text null,QuestionGroupID integer null,sectionID integer null,Sstat integer not null);";
			Cursor cursor=db.rawQuery("Select * from tblOutletQuestAnsMstr where OutletID='"+tempId+"'", null);

			if(cursor.getCount()>0)
			{
				if(cursor.moveToFirst())
				{
					for(int i=0;i<cursor.getCount();i++)
					{

						hmapRtrvQuestAns.put(cursor.getString(1)+"^"+cursor.getString(2)+"^"+cursor.getString(4), cursor.getString(3));
						cursor.moveToNext();
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return hmapRtrvQuestAns;
		}
	}*/
/*	public LinkedHashMap<String, String> fnGetQuestionIdFlgPrvValue(String TempID)
	{
	LinkedHashMap<String, String> hmapQuestionflgPrvValue=new LinkedHashMap<String, String>();
	open();

	int lastIndex=0;
	Cursor cursor;
	cursor = db.rawQuery("SELECT QstId,AnsControlTypeID,flgPrvVal,GrpQuestID from tblPreAddedStoresDataDetails Where tblPreAddedStoresDataDetails.StoreIDDB='"+ TempID +"'", null);


	try {
		if(cursor.getCount()>0)
		{
			if (cursor.moveToFirst())
			{
				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					hmapQuestionflgPrvValue.put((String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(3).toString(), (String) cursor.getString(2).toString());

					cursor.moveToNext();
				}

			}
		}
		return hmapQuestionflgPrvValue;
	}
	finally
	{
		cursor.close();
		close();
	}
}*/

	public LinkedHashMap<String, String> getPDAUserPreviousQuestionAnswerMasterServer(String tempId)
	{
		open();
		LinkedHashMap<String, String> hmapPreviousVisitServerQuestionSavedAns= new LinkedHashMap<>();
		try {
//tblPreAddedStoresDataDetails (StoreIDDB text null,GrpQuestID text null,QstId text null,AnsControlTypeID text null,AnsTextVal text null,flgPrvVal text null);";
			//tblPDAUserPreviousQuestionAnswerMaster(NodeID text null, NodeType text null,QstID text null,AnsControlTypeID text null,Answers text null,temID text null,flgPrvValue text null);";
			Cursor cursor=db.rawQuery("Select * from tblPreAddedStoresDataDetails where StoreIDDB='"+tempId+"'", null);

			if(cursor.getCount()>0)
			{
				if(cursor.moveToFirst())
				{
					for(int i=0;i<cursor.getCount();i++)
					{
						hmapPreviousVisitServerQuestionSavedAns.put(cursor.getString(2)+"^"+cursor.getString(3)+"^"+cursor.getString(1), cursor.getString(4));
						cursor.moveToNext();
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return hmapPreviousVisitServerQuestionSavedAns;
		}
	}
	public LinkedHashMap<String, String> getGroupIdCopyAsAbove()
	{
		LinkedHashMap<String, String> hmapGroupIdCopyAsAbove= new LinkedHashMap<>();
		open();
		Cursor cur=db.rawQuery("Select DISTINCT GrpID,GrpCopyID from tblPDAQuestGrpMappingMstr where GrpCopyID<>0",null);
		if(cur.getCount()>0)
		{
			if(cur.moveToFirst())
			{
				for(int i=0;i<cur.getCount();i++)
				{
					hmapGroupIdCopyAsAbove.put(cur.getString(0), cur.getString(1)) ;
					cur.moveToNext();
				}
			}
		}
		close();
		return hmapGroupIdCopyAsAbove;
	}
	public String getChannelGroupId()
	{
		String grpQstIdForChannel="";

		open();
		try {

//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
			Cursor cur=db.rawQuery("Select GrpQstId,QuestID from tblQuestIDForOutChannel", null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{
					grpQstIdForChannel=cur.getString(0);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return grpQstIdForChannel;
		}
	}
	public String getNameQstGrpId_QstId()
	{
		String grpQstId_qstIdForName="";

		open();
		try {


			Cursor cur=db.rawQuery("Select * from tblQuestIDForName", null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{
					grpQstId_qstIdForName=cur.getString(0)+"^"+cur.getString(1);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return grpQstId_qstIdForName;
		}
	}

	public  LinkedHashMap<String, String> getDepOptMstr()
	{


		LinkedHashMap<String, String> hmapgetOptDepMstr= new LinkedHashMap<>();

		open();
		try {


			Cursor cur=db.rawQuery("Select GrpQuestID,GrpDepQuestID from tblPDAQuestOptionDependentMstr", null);
			if(cur.getCount()>0)
			{
				String grpDepQstId,grpQstd;
				if(cur.moveToFirst())
					for(int i=0;i<cur.getCount();i++)
					{
						grpQstd=cur.getString(0);
						grpDepQstId=cur.getString(1);
						hmapgetOptDepMstr.put(grpQstd, grpDepQstId);
						cur.moveToNext();


					}

			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return hmapgetOptDepMstr;
		}
	}

	public ArrayList<String> getImagePath(String StoreID)
	{
		open();
		ArrayList<String> listImagePath= new ArrayList<>();
		try {

			//tableImage(tempId text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,ImageClicktime text null,Sstat integer null);";
			//imagButtonTag+"~"+tempId+"~"+uriSavedImage.toString()+"~"+clkdTime+"~"+"2";
			Cursor cursor=db.rawQuery("Select QstIdAnsCntrlTyp,StoreID,imagePath,ImageClicktime,Sstat from tableImage where StoreID='"+StoreID+"'", null);

			if(cursor.getCount()>0)
			{
				if(cursor.moveToFirst())
				{
					for(int i=0;i<cursor.getCount();i++)
					{
						listImagePath.add(cursor.getString(0)+"~"+cursor.getString(1)+"~"+cursor.getString(2)+"~"+cursor.getString(3)+"~"+cursor.getString(4));
						cursor.moveToNext();
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return listImagePath;
		}
	}

	private String getChannelGroupIdKey()
	{
		String keyForChannel="";


		try {
//tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,
//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
			Cursor cur=db.rawQuery("Select tblQuestIDForOutChannel.GrpQstId,tblQuestIDForOutChannel.QuestID,tblQuestionMstr.AnsControlType from tblQuestIDForOutChannel inner join tblQuestionMstr On tblQuestIDForOutChannel.QuestID=tblQuestionMstr.QuestID", null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{
					keyForChannel=cur.getString(1)+"^"+cur.getString(2)+"^"+cur.getString(0);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{

			return keyForChannel;
		}
	}
	/*public void fnsaveOutletQuestAnsMstrSectionWise(LinkedHashMap<String, String> hmapQuesAnsVal,int CurrentsectionID,String CurrentOutletID)
	{

		open();
		fnDeletesaveOutletQuestAnsMstrSctionWise(CurrentOutletID,CurrentsectionID);
		String channelOptId=getChannelGroupIdOptId();
		String channelkey =getChannelGroupIdKey();
		if(!channelOptId.equals("0-0-0"))
		{
			hmapQuesAnsVal.put(channelkey,channelOptId);
		}
		// hmapQuesAnsVal.put("1^6^1","0-1-80");
		String OutletID="0",QuestID = "0",AnswerType,AnswerValue = "";
		int sectionID = 0;
		int QuestionGroupID=0;

		for(Map.Entry<String, String> entry:hmapQuesAnsVal.entrySet())
		{
			String questId=entry.getKey().split(Pattern.quote("^"))[0].toString();
			AnswerType=entry.getKey().split(Pattern.quote("^"))[1].toString();
			QuestionGroupID=Integer.valueOf(entry.getKey().split(Pattern.quote("^"))[2].toString());
			AnswerValue=entry.getValue();

			ContentValues content=new ContentValues();

			content.put("AnswerType", Integer.parseInt(AnswerType));
			content.put("AnswerValue", AnswerValue.trim());

			content.put("Sstat", 1);

			content.put("sectionID", CurrentsectionID);
			content.put("QuestionGroupID", QuestionGroupID);

			Cursor cursor = db.rawQuery("SELECT OutletID FROM tblOutletQuestAnsMstr where OutletID='"+CurrentOutletID.toString().trim() +"' and QuestID ='"+ questId +"'" , null);

			//db.insert(TABLE_OutletQuestAnsMstr, null, content);
			if(cursor.getCount()>0)
			{

				int affected = db.update("tblOutletQuestAnsMstr", content, "OutletID=? AND QuestID=?",
						new String[] {CurrentOutletID.toString().trim(),questId.toString().trim()});
			}
			else
			{

				content.put("QuestID", questId);
				content.put("OutletID", CurrentOutletID.toString().trim());


				db.insert(TABLE_OutletQuestAnsMstr, null, content);
			}

		}


		close();

	}*/


	/*public String fngettblNewStoreSalesQuotePaymentDetails(String StoreID)

	{



		String searchString="";



		try {
			open();

			Cursor cur=db.rawQuery("Select IFNULL(PymtStageId,0) from tblNewStoreSalesQuotePaymentDetails Where StoreId ='"+ StoreID + "'", null);

			if(cur.getCount()>0)

			{

				StringBuilder sBuilder=new StringBuilder();

				if(cur.moveToFirst())

				{

					for(int i=0;i<cur.getCount();i++)

					{

						searchString= cur.getString(0);

						cur.moveToNext();

					}

				}



			}



		} catch (Exception e) {

			// TODO: handle exception

		}

		finally

		{

			close();

			return searchString;

		}

	}*/
	public LinkedHashMap<String, String> fnGettblSalesQuotePaymentModeMstrAllValues()
	{
		LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
		open();
		Cursor cursor= db.rawQuery("SELECT PymtModeId,PymtMode from tblSalesQuotePaymentModeMstr", null);// Where PNodeID='"+TSIID+"'
		//(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
		// close();
		try {
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						hmapQuestionMstr.put((String) cursor.getString(0),(String) cursor.getString(1));
						//    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
						cursor.moveToNext();
					}
				}
			}
			return hmapQuestionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}
	}
	public LinkedHashMap<String, String> fnGettblSalesQuotePaymentModeMstr(String PaymentStageID)
	{


		String strPaymentModeID="";
		LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
		open();
		strPaymentModeID=fngetPaymentModeIDsBasedOnStageID(PaymentStageID);

		String searchString="0";

		if(strPaymentModeID.indexOf(",")!=-1)
		{
			String[] arrsearchString=strPaymentModeID.split(Pattern.quote(","));
			for(int i=0;i<arrsearchString.length;i++)
			{
				if(i==0)
				{
					searchString="'"+arrsearchString[i].trim().toLowerCase()+"'";
				}
				else
				{
					searchString+= ",'"+arrsearchString[i].trim().toLowerCase()+"'";
				}
			}
		}
		else
		{
			searchString="'"+strPaymentModeID.trim().toLowerCase()+"'";
		}

		// Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
		Cursor cursor=null;
//tblSalesQuotePaymentModeMstr (PymtModeId text null,PymtMode text null);";
		//   cursor= db.rawQuery("SELECT PymtModeId,PymtMode from tblSalesQuotePaymentModeMstr Where  PymtModeId in ("+searchString+")  ", null);// Where PNodeID='"+TSIID+"'

		if(PaymentStageID.equals("1"))
		{
			cursor= db.rawQuery("SELECT PymtModeId,PymtMode from tblSalesQuotePaymentModeMstr limit 3  ", null);// Where PNodeID='"+TSIID+"'
		}
		if(PaymentStageID.equals("2"))
		{
			cursor= db.rawQuery("SELECT PymtModeId,PymtMode from tblSalesQuotePaymentModeMstr limit 4  ", null);// Where PNodeID='"+TSIID+"'
		}
		if(PaymentStageID.equals("3"))
		{
			cursor= db.rawQuery("SELECT PymtModeId,PymtMode from tblSalesQuotePaymentModeMstr limit 5  ", null);// Where PNodeID='"+TSIID+"'
		}
		if(PaymentStageID.equals("1")||PaymentStageID.equals("2")||PaymentStageID.equals("3"))
		{
			try {
				if(cursor.getCount()>0)
				{
					if (cursor.moveToFirst())
					{
						for (int i = 0; i <= (cursor.getCount() - 1); i++) {
							hmapQuestionMstr.put((String) cursor.getString(0),(String) cursor.getString(1));
							//    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
							cursor.moveToNext();
						}
					}
				}

			}
			finally
			{
				cursor.close();
				close();
			}
		}
		return hmapQuestionMstr;

	}

	public ArrayList<String> fnGetOptionMstr(int questionId)
	{
		//  LinkedHashMap<String, String> hmapOptionMstr=new LinkedHashMap<String, String>();
		ArrayList<String> listOptionMstr = new ArrayList<>();
		// ArrayList<String> al1 = new ArrayList<String>();
		String idd="0";

		open();
		Cursor cursor = db.rawQuery("SELECT  tblQuestionMstr.AnsControlType ,tblOptionMstr.OptID,tblOptionMstr.QuestID,tblOptionMstr.OptionDescr,tblOptionMstr.Sequence from tblOptionMstr inner join tblQuestionMstr on tblOptionMstr.QuestID =tblQuestionMstr.QuestID  Where tblOptionMstr.QuestID='"+questionId+"' Order By tblOptionMstr.Sequence ASC ", null);// Where PNodeID='"+TSIID+"'
		// close();
		try {
			if(cursor.getCount()>0)

			{
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++) {

						listOptionMstr.add(i,(String) cursor.getString(1) +"^"+(String) cursor.getString(3));
						cursor.moveToNext();
					}
					//  hmapOptionMstr.put(idd, al1);
				}
			}
			return listOptionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}
	}

	public String[] getQuestIdGroupIdCopyAsAbove(int GrpCopyID,int groupId)
	{
		String[] questGroupIdCopyAsAbove = null;
		open();
		Cursor cur=db.rawQuery("Select QuestCopyID from tblPDAQuestGrpMappingMstr where GrpID="+groupId+" AND GrpCopyID="+GrpCopyID,null);
		if(cur.getCount()>0)
		{
			questGroupIdCopyAsAbove=new String[cur.getCount()];
			if(cur.moveToFirst())
			{
				for(int i=0;i<cur.getCount();i++)
				{
					questGroupIdCopyAsAbove[i]= cur.getString(0);
					cur.moveToNext();
				}
			}
		}
		close();
		return questGroupIdCopyAsAbove;
	}

	public String[] fnGetGroupIdQuestionMstr(String questGroupID,int section)
	{
		String[] questonWdSameGroupId=new String[2];
		open();
		int lastIndex=0;
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		Cursor cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType, tblPDAQuestGrpMappingMstr.GrpQuestID from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr on tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID where tblQuestionMstr.QuestBundleGroupId = '"+questGroupID+"' AND tblPDAQuestGrpMappingMstr.SectionNo="+section, null);
		try {
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						questonWdSameGroupId[i]=(String) cursor.getString(0) +"^"+(String) cursor.getString(1) +"^"+(String) cursor.getString(2);

						cursor.moveToNext();
					}

				}
			}
			return questonWdSameGroupId;
		}
		finally
		{
			cursor.close();
			close();
		}
	}

	public ArrayList<String> getDepOtnVal(String depAnsValid,int grpId,int grpQstDepId)
	{
		////  private static final String DATABASE_CREATE_TABLE_QUESTION_OPTION_VAL_DEPENDENTMstr = "create table tblPDAQuestOptionValuesDependentMstr(DepQstId int null,DepAnswValId int null,QstId int null,AnswValId text null,OptDescr text null,Sequence int null,GrpQuestID int null,GrpDepQuestID int null);";
		open();

		ArrayList<String> listOptId_OptName= new ArrayList<>();
		try {


			Cursor cur=db.rawQuery("Select AnswValId,OptDescr from tblPDAQuestOptionValuesDependentMstr where GrpQuestID="+grpId+" AND GrpDepQuestID="+grpQstDepId+" AND DepAnswValId='"+depAnsValid+"'", null);

			if(cur.getCount()>0)
			{
				String optId_optDescr;
				if(cur.moveToFirst())
				{
					for(int i=0;i<cur.getCount();i++)
					{
						optId_optDescr=cur.getString(0)+"^"+cur.getString(1);
						listOptId_OptName.add(optId_optDescr);
						cur.moveToNext();
					}

				}


			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return listOptId_OptName;
		}

	}

	public void deleteImageData(String imageValidName,String storeId)
	{
		//tableImage(tempId text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,Sstat integer null);";
		open();
		Cursor cur=db.rawQuery("Select imageName from tableImage where StoreID='"+storeId+"' AND imageName='"+imageValidName+"'", null);
		if(cur.getCount()>0)
		{
			db.delete(TABLE_IMAGE, "StoreID=? AND imageName=?", new String[]{storeId,imageValidName});
		}
		close();
	}

	public void insertImageInfo(String tempId,LinkedHashMap<String, String> hmapAllValues)
	{
		//tableImage(tempId text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,Sstat integer null);";
		open();
		Cursor cur=db.rawQuery("Select imageName from tableImage where StoreID='"+tempId+"'", null);
		if(cur.getCount()>0)
		{
			db.delete(TABLE_IMAGE, "StoreID=?", new String[]{tempId});
		}
		String StoreID = null, qstIdAndCntrlTyp = null, _imageName = null, imagePath = null,clkdTime;
		int sStat = 0;
		for(Map.Entry<String, String> hmaEntry:hmapAllValues.entrySet())
		{
			StoreID= hmaEntry.getValue().split(Pattern.quote("~"))[1];
			qstIdAndCntrlTyp= hmaEntry.getValue().split(Pattern.quote("~"))[0];
			_imageName=hmaEntry.getKey();
			imagePath= hmaEntry.getValue().split(Pattern.quote("~"))[2];
			clkdTime= hmaEntry.getValue().split(Pattern.quote("~"))[3];
			sStat=Integer.valueOf(hmaEntry.getValue().split(Pattern.quote("~"))[4]);


			// tableImage(tempId
			ContentValues content=new ContentValues();
			content.put("StoreID", StoreID);
			content.put("QstIdAnsCntrlTyp", qstIdAndCntrlTyp);

			content.put("imageName", _imageName);
			content.put("imagePath", imagePath);
			content.put("ImageClicktime", clkdTime);
			content.put("Sstat", sStat);

			db.insert(TABLE_IMAGE, null, content);


		}

		close();
	}



	public void UpdateStoreReturnphotoFlag(String sID, int flag2set)
	{
		try
		{
			final ContentValues values = new ContentValues();
			values.put("Sstat", flag2set);
			int affected16 = db.update("tblStoreProductPhotoDetail", values,"StoreID=?", new String[] { sID });
		}
		catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}
	}
	public void UpdateNewAddedStorephotoFlag(String sID, int flag2set)
	{
		try
		{
			final ContentValues values = new ContentValues();
			values.put("Sstat", flag2set);
			int affected16 = db.update("tableImage", values,"StoreID=?", new String[] { sID });
		}
		catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}
	}
    public void UpdateCollectionTableFlag(String sID, int flag2set)
    {
        try
        {
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected16 = db.update("tableImage", values,"StoreID=?", new String[] { sID });
        }
        catch (Exception ex)
        {
            Log.e(TAG, ex.toString());
        }
    }

	/*public void UpdateStoreReturnphotoFlag(String StoreID, String StoreName,int flgReMap)
	{
		try
		{
			//
			final ContentValues values = new ContentValues();
			values.put("StoreName", StoreName);
			values.put("flgReMap", flgReMap);



			int affected16 = db.update("tblPreAddedStores", values,"StoreID=?", new String[] { StoreID });
		}
		catch (Exception ex) {

		}
	}*/

	public void fnDeletesaveNewOutletFromOutletMstr(String OutletID)
	{
		open();
		db.execSQL("DELETE FROM tblPreAddedStores WHERE StoreID ='"+ OutletID + "'");// and sectionID="+sectionID
		close();
	}

	public void deletetblStoreCountDetails()
	{
		db.execSQL("DELETE FROM tblStoreCountDetails");

	}


	public int checkCountIntblNewStoreMainTable(String  StoreId)
	{
		open();
		Cursor cursor =null;
		int check=0;
		try {

			cursor= db.rawQuery("SELECT Count(*) FROM tblOutletQuestAnsMstr WHERE  OutletID ='"+ StoreId + "'", null);
			if (cursor.getCount() > 0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						check=1;
						cursor.moveToNext();
					}
				}

			}


		} catch (Exception e) {
			System.out.println("shivam query = "+e.toString());
		}
		finally {
			cursor.close();
			close();
		}
		return check;
	}

	public void fndeleteNewStoreSalesQuotePaymentDetails(String StoreID)
	{

		db.execSQL("DELETE FROM tblNewStoreSalesQuotePaymentDetails WHERE StoreId ='" + StoreID + "'");
	}
	public long fnsaveNewStoreSalesQuotePaymentDetails(String StoreId,String PaymentStageId) {

		ContentValues initialValues = new ContentValues();


		initialValues.put("StoreId", StoreId.trim());

		initialValues.put("PymtStageId", PaymentStageId.trim());
		initialValues.put("Sstat", "1");

		return db.insert(DATABASE_TABLE_NewStoreSalesQuotePaymentDetails, null, initialValues);
	}

	public String getLocationDetails()
	{
		//String StoresData="0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0";
		String StoresData="0";
		open();
		try {                           //  0           1        2         3       4     5       6     7                 8          9   1 0              11     12    13           14          15         16          17                        18        19    20                21                                   22                                   23
			Cursor cur=db.rawQuery("Select Lattitude,Longitude,Accuracy,Address,City,Pincode,State,fnAccurateProvider,GpsLat,GpsLong,GpsAccuracy,NetwLat,NetwLong,NetwAccuracy,FusedLat,FusedLong,FusedAccuracy,AllProvidersLocation,GpsAddress,NetwAddress,FusedAddress,FusedLocationLatitudeWithFirstAttempt,FusedLocationLongitudeWithFirstAttempt,FusedLocationAccuracyWithFirstAttempt from tblLocationDetails", null);

			if(cur.getCount()>0)
			{
				StringBuilder sBuilder=new StringBuilder();
				if(cur.moveToFirst())
				{
					for(int i=0;i<cur.getCount();i++)
					{
						StoresData=cur.getString(0)+"^"+cur.getString(1)+"^"+cur.getString(2)+"^"+cur.getString(3)+"^"+cur.getString(4)+"^"+cur.getString(5)+"^"+cur.getString(6)+"^"+cur.getString(7)+"^"+cur.getString(8)+"^"+cur.getString(9)+"^"+cur.getString(10)+"^"+cur.getString(11)+"^"+cur.getString(12)+"^"+cur.getString(13)+"^"+cur.getString(14)+"^"+cur.getString(15)+"^"+cur.getString(16)+"^"+cur.getString(17)+"^"+cur.getString(18)+"^"+cur.getString(19)+"^"+cur.getString(20)+"^"+cur.getString(21)+"^"+cur.getString(22)+"^"+cur.getString(23);
						cur.moveToNext();
					}
				}

			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return StoresData;
		}
	}

	public long  saveLatLngToTxtFile(String StoreID, String fnLati, String fnLongi,
									 String fnAccuracy, String fnAccurateProvider,
									 String GpsLat, String GpsLong, String GpsAccuracy,
									 String NetwLat, String NetwLong, String NetwAccuracy, String FusedLat,
									 String FusedLong, String FusedAccuracy,
									 int Sstat, String flgLocNotFound, String fnAddress, String AllProvidersLocation, String GpsAddress, String NetwAddress
			, String FusedAddress, String FusedLocationLatitudeWithFirstAttempt, String FusedLocationLongitudeWithFirstAttempt, String FusedLocationAccuracyWithFirstAttempt)
	{
		open();
		try
		{
			ContentValues initialValues = new ContentValues();

			Cursor cursor=db.rawQuery("Select StoreID from tblLatLongDetails where StoreID='"+StoreID+"'",null);

			if(cursor.getCount()>0)
			{

			}
			else
			{
				initialValues.put("StoreID", StoreID);
				initialValues.put("fnLati", fnLati);
				initialValues.put("fnLongi", fnLongi.trim());
				initialValues.put("fnAccuracy", fnAccuracy.trim());
				initialValues.put("flgLocNotFound", flgLocNotFound);
				initialValues.put("fnAccurateProvider", fnAccurateProvider.trim());
				initialValues.put("fnAddress", fnAddress);
				initialValues.put("AllProvidersLocation", AllProvidersLocation);


				initialValues.put("GpsLat", GpsLat.trim());
				initialValues.put("GpsLong", GpsLong.trim());
				initialValues.put("GpsAccuracy", GpsAccuracy.trim());
				initialValues.put("GpsAddress", GpsAddress);

				initialValues.put("NetwLat", NetwLat.trim());
				initialValues.put("NetwLong", NetwLong.trim());
				initialValues.put("NetwAccuracy", NetwAccuracy.trim());
				initialValues.put("NetwAddress", NetwAddress);

				initialValues.put("FusedLat", FusedLat.trim());
				initialValues.put("FusedLong", FusedLong.trim());
				initialValues.put("FusedAccuracy", FusedAccuracy.trim());
				initialValues.put("FusedAddress", FusedAddress);


				initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt);
				initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt);
				initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt);
				initialValues.put("Sstat", Sstat);
				return db.insert(DATABASE_TABLE_Main271, null, initialValues);
			}





		}
		catch(Exception e)
		{

		}
		finally
		{
			close();
		}
		return 0;
	}

	//private static final String DATABASE_CREATE_TABLE_4 = "create table tblDistributorListMaster " +
		//	"(DBRNodeID int null,DistributorNodeType int null,Distributor text null);";


	public LinkedHashMap<String, String> fetch_DSRCoverage_List()
	{
		open();
		LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();

		Cursor cursor = db.rawQuery("SELECT CoverageAreaNodeID,CoverageArea FROM tblDSRCoverageMaster",null);
		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					hmapCatgry.put("Select DSR", "0");
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						hmapCatgry.put(cursor.getString(1), cursor.getString(0));
						cursor.moveToNext();
					}
				}

			}

			else
			{
				hmapCatgry.put("No DSR", "0");
			}
			return hmapCatgry;
		}
		finally
		{
			cursor.close();
			close();
		}
	}

	public String[] getDistributorDataMstr()
	{
		String strStoreTypeNamesDetais[] =null;
		try {
			Cursor cursor2 = db.rawQuery("SELECT DBRNodeID,DistributorNodeType,Distributor,flgRemap FROM tblDistribtorMstr", null);

			if(cursor2.getCount()>0)
			{
				strStoreTypeNamesDetais=new String[cursor2.getCount()+1];
				if (cursor2.moveToFirst())
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						if(i==0)
						{
							strStoreTypeNamesDetais[i]="0^0^Select Distributor^0";
						}
						strStoreTypeNamesDetais[i+1] = cursor2.getString(0) +"^"+cursor2.getString(1)+"^"+cursor2.getString(2)+"^"+cursor2.getString(3);
						cursor2.moveToNext();
					}
				}
			}
			else
			{
				strStoreTypeNamesDetais=new String[1];
				strStoreTypeNamesDetais[0]="0^0^Select Distributor^0";
			}
			return strStoreTypeNamesDetais;
		} finally {

		}
	}
	public void Delete_tblDistributorMapping(int DistribtrId,int DistributorNodeType)
	{
		try
		{

			db.execSQL("DELETE FROM tblDistributorMapping where DistribtrId="+DistribtrId+" and DistributorNodeType="+DistributorNodeType);
		}
		catch(Exception e)
		{

		}
		finally
		{

		}
	}


	public long savetblDistributorMappingData(String DistribtrUniqueId,String  DistribtrId ,String DistributorNodeType ,
											  String flgGSTCapture,String flgGSTCompliance ,String GSTNumber, String Address,
											  String PinCode,String City,String State,String fnLati,
											  String fnLongi ,String fnAccuracy ,String flgLocNotFound,String fnAccurateProvider,
											  String AllProvidersLocation ,String fnAddress ,String GpsLat ,String  GpsLong ,
											  String GpsAccuracy ,String GpsAddress ,String NetwLat ,String NetwLong ,
											  String NetwAccuracy ,String  NetwAddress ,String  FusedLat ,String  FusedLong ,
											  String FusedAccuracy ,String  FusedAddress ,String FusedLocationLatitudeWithFirstAttempt,
											  String FusedLocationLongitudeWithFirstAttempt ,String FusedLocationAccuracyWithFirstAttempt,
											  int Sstat,int flgLocationServicesOnOff,int flgGPSOnOff,int flgNetworkOnOff,
                                              int flgFusedOnOff,int flgInternetOnOffWhileLocationTracking,int flgRestart,
                                              String CityId,String StateId,String MapAddress,String MapCity,
                                              String MapPinCode,String MapState,String PhoneNo,String EmailID)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("DistribtrUniqueId", DistribtrUniqueId.trim());
		initialValues.put("DistribtrId", DistribtrId.trim());
		initialValues.put("DistributorNodeType", DistributorNodeType.trim());
		initialValues.put("flgGSTCapture", flgGSTCapture.trim());
		initialValues.put("flgGSTCompliance", flgGSTCompliance.trim());
		initialValues.put("GSTNumber", GSTNumber.trim());

		initialValues.put("Address", Address.trim());
		initialValues.put("PinCode", PinCode.trim());
		initialValues.put("City", City.trim());
		initialValues.put("State", State.trim());

		initialValues.put("fnLati", fnLati.trim());
		initialValues.put("fnLongi", fnLongi.trim());
		initialValues.put("fnAccuracy", fnAccuracy.trim());
		initialValues.put("flgLocNotFound", flgLocNotFound.trim());
		initialValues.put("fnAccurateProvider", fnAccurateProvider.trim());
		initialValues.put("AllProvidersLocation", AllProvidersLocation.trim());
		initialValues.put("fnAddress", fnAddress.trim());

		initialValues.put("GpsLat", GpsLat.trim());
		initialValues.put("GpsLong", GpsLong.trim());
		initialValues.put("GpsAccuracy", GpsAccuracy.trim());
		initialValues.put("GpsAddress", GpsAddress.trim());

		initialValues.put("NetwLat", NetwLat.trim());
		initialValues.put("NetwLong", NetwLong.trim());
		initialValues.put("NetwAccuracy", NetwAccuracy.trim());
		initialValues.put("NetwAddress", NetwAddress.trim());

		initialValues.put("FusedLat", FusedLat.trim());
		initialValues.put("FusedLong", FusedLong.trim());
		initialValues.put("FusedAccuracy", FusedAccuracy.trim());
		initialValues.put("FusedAddress", FusedAddress.trim());

		initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt.trim());
		initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt.trim());
		initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt.trim());
		initialValues.put("Sstat", Sstat);

		initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
		initialValues.put("flgGPSOnOff", flgGPSOnOff);
		initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
		initialValues.put("flgFusedOnOff", flgFusedOnOff);
		initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
		initialValues.put("flgRestart", flgRestart);

        initialValues.put("MapAddress", MapAddress);
        initialValues.put("MapCity", MapCity);
        initialValues.put("MapPinCode", MapPinCode);
        initialValues.put("MapState", MapState);
        initialValues.put("CityId", CityId);
        initialValues.put("StateId", StateId);

        initialValues.put("PhoneNo", PhoneNo);
        initialValues.put("EmailID", EmailID);

		return db.insert(TABLE_tblDistributorMapping, null, initialValues);
	}

    public int fnCheckIfStoreIDExistsIn_tblStoreDeatilsSO(String StoreID)
    {
        open();
        int flgCheckIfStoreExists=0;
        //tblStoreDetails(StoreID
        Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblPreAddedStores where StoreID='"+StoreID+"'", null);
        try {
            if(cursor2.getCount()>0)
            {
                if(cursor2.moveToFirst())
                {
                    if (cursor2.getInt(0)>0)
                    {
                        flgCheckIfStoreExists=1;
                    }
                }
            }
        }
        catch(Exception e)
        {
            String ex1=e.getMessage();
        }
        finally {
            cursor2.close();
            close();
        }
        return flgCheckIfStoreExists;
    }

	public int fnCheckIfStoreIDExistsIn_tblStoreDeatils(String StoreID)
	{
		open();
		int flgCheckIfStoreExists=0;
		//tblStoreDetails(StoreID
		Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblStoreList where StoreID='"+StoreID+"'", null);
		try {
			if(cursor2.getCount()>0)
			{
				if(cursor2.moveToFirst())
				{
					if (cursor2.getInt(0)>0)
					{

						flgCheckIfStoreExists=1;

					}
				}
			}


		}
		catch(Exception e)
		{

		}
		finally {
			cursor2.close();
			close();
		}
		return flgCheckIfStoreExists;
	}

	public ArrayList<String> fnGetDetails_tblStoreDeatils(String StoreID)
	{
		ArrayList<String> arrBasisDetailsAgainstStore= new ArrayList<>();

		open();
		try
		{
			//Cursor cursor = db.rawQuery("SELECT StoreName,IFNULL(PaymentStage,'0') AS PaymentStage,IFNULL(StoreAddress,'NA') AS StoreAddress,IFNULL(StoreCity,'NA') AS StoreCity,IFNULL(StorePinCode,'NA') AS StorePinCode,IFNULL(StoreState,'NA') AS StoreState,ActualLatitude,ActualLongitude,Accuracy FROM tblStoreList where StoreID='" + StoreID+"'", null);
			// by sunil
			//SELECT t1.product_s_desc, t1.product_desc, t1.product_name, t2.product_price
			//FROM table1 t1
			//INNER JOIN table2 t2 ON t2.product_id = t1.product_id
			Cursor cursor = db.rawQuery("SELECT StoreName,StoreClose,StoreClose,StoreCity,StorePinCode,StoreState,ActualLatitude,ActualLongitude,Accuracy FROM tblStoreList where StoreID='"+StoreID+"'", null);


			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					arrBasisDetailsAgainstStore.add((String) cursor.getString(0));
					arrBasisDetailsAgainstStore.add((String) cursor.getString(1));
					arrBasisDetailsAgainstStore.add((String) cursor.getString(2));
					arrBasisDetailsAgainstStore.add((String) cursor.getString(3));
					arrBasisDetailsAgainstStore.add((String) cursor.getString(4));
					arrBasisDetailsAgainstStore.add((String) cursor.getString(5));
					arrBasisDetailsAgainstStore.add((String) cursor.getString(6));
					arrBasisDetailsAgainstStore.add((String) cursor.getString(7));
					arrBasisDetailsAgainstStore.add((String) cursor.getString(8));
					cursor.moveToNext();
				}
			}


		}
		catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
		}

		return arrBasisDetailsAgainstStore;
	}

	/*public LinkedHashMap<String, ArrayList<String>> fnGetQuestionMstrKey()
	{
		LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr=new LinkedHashMap<String, ArrayList<String>>();
		ArrayList<String> listKeyQuesVal=new ArrayList<String>();
		open();
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null,GrpCopyID int null,QuestCopyID int null,Sequence int null);";
		//tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
		Cursor cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.GrpID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr where tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  Order By tblPDAQuestGrpMappingMstr.GrpID ASC,tblPDAQuestGrpMappingMstr.Sequence", null);// Where PNodeID='"+TSIID+"'

		try
		{
			if(cursor.getCount()>0)
			{

				String sectionNo="0",preVisousSectionNum="0";
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						sectionNo= cursor.getString(3);
						System.out.println("Squence Added = "+cursor.getString(3)+" : "+cursor.getString(4));
						if(i==0)
						{
							preVisousSectionNum= sectionNo;
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
						}
						else if(preVisousSectionNum.equals(sectionNo))
						{
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
						}
						else
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
							listKeyQuesVal=new ArrayList<String>();
							preVisousSectionNum=sectionNo;
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));

						}
						if(i==(cursor.getCount()-1))
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
						}

						cursor.moveToNext();
					}
				}
			}
			return hmapQuestionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}
	}*/
	/*public LinkedHashMap<String, String> getGroupDescription()
	{
		open();
		LinkedHashMap<String, String> hmapGroupDescrptn=new LinkedHashMap<String, String>();
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		Cursor cur=db.rawQuery("Select Distinct GrpID,GrpDesc from tblPDAQuestGrpMappingMstr", null);
		if(cur.getCount()>0)
		{
			if(cur.moveToFirst())
			{
				for(int i=0;i<cur.getCount();i++)
				{
					hmapGroupDescrptn.put(cur.getString(0), cur.getString(1));
					cur.moveToNext();
				}

			}
		}
		close();
		return hmapGroupDescrptn;
	}*/
	/*public LinkedHashMap<String, ArrayList<String>> fnGetGroupIdMpdWdSectionId()
	{
		LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr=new LinkedHashMap<String, ArrayList<String>>();
		ArrayList<String> listKeyQuesVal=new ArrayList<String>();

		open();
		int sectionCount=getsectionCount();
		//    int sectionCount=0;
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		//tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
		Cursor cursor;
		if(sectionCount!=0)
		{
			cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr where SectionNo<="+sectionCount+" order by SectionNo", null);// Where PNodeID='"+TSIID+"'
		}
		else
		{
			cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr order by SectionNo", null);// Where PNodeID='"+TSIID+"'
		}


		try
		{
			if(cursor.getCount()>0)
			{
				String sectionNo="0",preVisousSectionNum="0";
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						sectionNo= cursor.getString(1);
						if(i==0)
						{
							preVisousSectionNum= sectionNo;
							listKeyQuesVal.add(cursor.getString(0));
						}
						else if(preVisousSectionNum.equals(sectionNo))
						{
							listKeyQuesVal.add(cursor.getString(0));
						}
						else
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
							listKeyQuesVal=new ArrayList<String>();
							preVisousSectionNum=sectionNo;
							listKeyQuesVal.add(cursor.getString(0));

						}
						if(i==cursor.getCount() - 1)
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
						}


						cursor.moveToNext();
					}
				}
			}
			return hmapQuestionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}
	}*/
	/*public LinkedHashMap<String, String> fnGetDependentQuestionMstr()
	{

		LinkedHashMap<String, String> hmapDpndntQuestionMstr=new LinkedHashMap<String, String>();
		open();
		//tblQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";
		Cursor cursor = db.rawQuery("SELECT DISTINCT GrpDepQuestID,OptionID from tblQuestionDependentMstr", null);// Where PNodeID='"+TSIID+"'
		String []arrbhi=new String[cursor.getCount()];
		try {
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						// hmapDpndntQuestionMstr.put((String) cursor.getString(3).toString()+"^"+(String) cursor.getString(1).toString(), (String) cursor.getString(2).toString());
						arrbhi[i]=(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString();

						cursor.moveToNext();
					}

				}
			}
			for(int cntLoop=0;cntLoop<arrbhi.length;cntLoop++)
			{
				String dpndIdAndOptId=arrbhi[cntLoop].toString();
				String dpndntId=dpndIdAndOptId.split(Pattern.quote("^"))[0];
				String optId=dpndIdAndOptId.split(Pattern.quote("^"))[1];
				StringBuilder quesIdToBeVisOrinVis= fnQuestionIdOnBasisOfDependentQuestionIDdpndntId(dpndntId,optId);
				hmapDpndntQuestionMstr.put(arrbhi[cntLoop].toString(), quesIdToBeVisOrinVis.toString());
			}

			return hmapDpndntQuestionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}

	}*/
	/*public LinkedHashMap<String, ArrayList<String>> fnGetSection_Key()
	{
		LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr=new LinkedHashMap<String, ArrayList<String>>();
		ArrayList<String> listKeyQuesVal=new ArrayList<String>();
		open();
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		//tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
		Cursor cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.SectionNo from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr where tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  Order By tblPDAQuestGrpMappingMstr.SectionNo ASC  ", null);// Where PNodeID='"+TSIID+"'

		try
		{
			if(cursor.getCount()>0)
			{
				String sectionNo="0",preVisousSectionNum="0";
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						sectionNo= cursor.getString(3);
						if(i==0)
						{
							preVisousSectionNum= sectionNo;
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
						}
						else if(preVisousSectionNum.equals(sectionNo))
						{
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
						}
						else
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
							listKeyQuesVal=new ArrayList<String>();
							preVisousSectionNum=sectionNo;
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));

						}
						if(i==(cursor.getCount()-1))
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
						}

						cursor.moveToNext();
					}
				}
			}
			return hmapQuestionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}
	}*/

	public  void deleteLocationTable()
	{
		db.execSQL("DELETE FROM tblLocationDetails");

	}
	public long saveTblLocationDetails(String Lattitude, String Longitude, String Accuracy, String Address, String City, String Pincode, String State, String fnAccurateProvider, String GpsLat, String GpsLong, String GpsAccuracy, String NetwLat, String NetwLong, String NetwAccuracy, String FusedLat, String FusedLong, String FusedAccuracy, String AllProvidersLocation, String GpsAddress, String NetwAddress, String FusedAddress, String FusedLocationLatitudeWithFirstAttempt, String FusedLocationLongitudeWithFirstAttempt, String FusedLocationAccuracyWithFirstAttempt)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("Lattitude", Lattitude);
		initialValues.put("Longitude", Longitude);
		initialValues.put("Accuracy", Accuracy);
		initialValues.put("Address", Address);
		initialValues.put("City", City);
		initialValues.put("Pincode", Pincode);
		initialValues.put("State", State);

		initialValues.put("fnAccurateProvider", fnAccurateProvider);
		initialValues.put("GpsLat", GpsLat);
		initialValues.put("GpsLong", GpsLong);
		initialValues.put("GpsAccuracy", GpsAccuracy);
		initialValues.put("NetwLat", NetwLat);
		initialValues.put("NetwLong", NetwLong);
		initialValues.put("NetwAccuracy", NetwAccuracy);
		initialValues.put("FusedLat", FusedLat);
		initialValues.put("FusedLong", FusedLong);
		initialValues.put("FusedAccuracy", FusedAccuracy);

		initialValues.put("AllProvidersLocation", AllProvidersLocation);
		initialValues.put("GpsAddress", GpsAddress);
		initialValues.put("NetwAddress", NetwAddress);
		initialValues.put("FusedAddress", FusedAddress);
		initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt);
		initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt);
		initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt);



		return db.insert(DATABASE_TABLE_tblLocationDetails, null, initialValues);
	}

    public LinkedHashMap<String, String> fnGeStoreListAllForSOForWebService(int CoverageAreadID,int RouteID)
    {
        LinkedHashMap<String, String> hmapStoreLisMstr= new LinkedHashMap<>();
        open();
        try {
            Cursor cursor=null;
            if(CoverageAreadID==0 && RouteID==0)
            {
                cursor = db.rawQuery("SELECT StoreID,StoreName,DateAdded,CoverageAreaID,RouteNodeID,StoreCategoryType,StoreSectionCount,flgApproveOrRejectOrNoActionOrReVisit,Sstat,flgOldNewStore from tblPreAddedStores Where flgOldNewStore<>1 ORDER BY DistanceNear", null);
            }
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapStoreLisMstr.put((String) cursor.getString(0),(String) cursor.getString(1) +"^"+(String) cursor.getString(2) +"^"+(String) cursor.getString(3) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(5) +"^"+(String) cursor.getString(6) +"^"+(String) cursor.getString(7) +"^"+(String) cursor.getString(8) +"^"+(String) cursor.getString(9));
                        cursor.moveToNext();
                    }
                }
            }

        }
        catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= "+e.toString());
        }
        finally
        {

            close();
            return hmapStoreLisMstr;
        }
    }

    public void delete_all_storeDetailTables()
    {
        db.execSQL("DELETE FROM tblUserName");
        db.execSQL("DELETE FROM tblStoreCountDetails");
        //db.execSQL("DELETE FROM tblPreAddedStores");

        db.execSQL("DELETE FROM tblCoverageMaster");
        db.execSQL("DELETE FROM tblRouteMasterWithCoverageMapping");
        // db.execSQL("DELETE FROM tblStoreImageList");
        // db.execSQL("DELETE FROM tblStorePaymentStageMapping");

        // db.execSQL("DELETE FROM tblFSOMaster");
        // db.execSQL("DELETE FROM tblPreAddedStoresDataDetails");
        db.execSQL("DELETE FROM tblLocationDetails");
    }

    public long saveTblUserName(String UserName) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("UserName", UserName);

        return db.insert(DATABASE_TABLE_tblUserName, null, initialValues);
    }

    public int fncheckCountNearByStoreExistsOrNot(int DistanceRange)
	{
		int flgCheck=0;
		open();

		try {
			// Cursor cursor = db.rawQuery("SELECT Count(*) from tblPreAddedStores Where (LatCode<>'0' and LatCode<>'NA') and DistanceNear<"+ DistanceRange+ " ORDER BY DistanceNear", null);

			Cursor cursor = db.rawQuery("SELECT Count(*) from tblStoreList WHERE (StoreLatitude<>'0' AND StoreLatitude<>'NA')    ORDER BY DistanceNear ASC", null);//
			//StoreID,StoreName,LatCode,LongCode,DateAdded
			if(cursor.getCount()>0) {
				if (cursor.moveToFirst())
				{
					if(cursor.getInt(0)>0)
					{
						flgCheck=1;
					}
				}
			}

		}
		catch (Exception e) {
			System.out.println("Error fnGettblUOMMstr= "+e.toString());
		}
		finally
		{

			close();
			if(flgCheck==0)
			{
				flgCheck=fncheckCountNewAddedNearByStoreExistsOrNot(flgCheck);
			}
			return flgCheck;
		}
	}

	private int fncheckCountNewAddedNearByStoreExistsOrNot(int flgCheck)
	{

		open();

		try {
			//Cursor cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode,DateAdded,DistanceNear from tblPreAddedStores WHERE (LatCode<>'0' AND LatCode<>'NA') AND DistanceNear<"+ DistanceRange +" ORDER BY DistanceNear  ASC Limit 30", null);//
			Cursor cursor = db.rawQuery("SELECT Count(*) from tblStoreList WHERE (StoreLatitude='NA') and ISNewStore=1", null);//
			if(cursor.getCount()>0) {
				if (cursor.moveToFirst())
				{
					if(cursor.getInt(0)>0)
					{
						flgCheck=1;
					}
				}
			}

		}
		catch (Exception e) {
			System.out.println("Error fnGettblUOMMstr= "+e.toString());
		}
		finally
		{

			close();

		}
		return flgCheck;
	}


	public LinkedHashMap<String, String> fnGeStoreList(int DistanceRange)
	{
		LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
		open();

		try {
			//Cursor cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode,DateAdded,DistanceNear from tblPreAddedStores WHERE (LatCode<>'0' AND LatCode<>'NA') AND DistanceNear<"+ DistanceRange +" ORDER BY DistanceNear  ASC Limit 30", null);//
			// Cursor cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode,DateAdded,DistanceNear from tblPreAddedStores WHERE (LatCode<>'0' AND LatCode<>'NA') AND DistanceNear<"+ DistanceRange +"  ORDER BY DistanceNear", null);//
//           /
			// tblPreAddedStores (StoreID text null,StoreName text null,LatCode text null,LongCode text null,DateAdded text null,DistanceNear int null,flgOldNewStore int null,flgReMap int null,Sstat int null);";

			//hmapStoreLatLongDistanceFlgRemap
			Cursor cursor = db.rawQuery("SELECT StoreID,StoreLatitude,StoreLongitude,ForDate,DistanceNear,0 AsflgReMap from tblStoreList WHERE (StoreLatitude<>'0' AND StoreLatitude<>'NA') ORDER BY DistanceNear", null);//
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						String StoreLat="0.00";
						String StoreLon="0.00";
						if(!cursor.getString(2).equals("NA"))
						{
							StoreLat=(String) cursor.getString(2);
							StoreLon=(String) cursor.getString(3);
						}

						hmapQuestionMstr.put((String) cursor.getString(0),StoreLat+"^"+StoreLon+"^"+(String) cursor.getString(3) +"^"+(String) cursor.getString(5));

						cursor.moveToNext();
					}
				}
			}

		}
		catch (Exception e) {
			System.out.println("Error fnGettblUOMMstr= "+e.toString());
		}
		finally
		{

			close();
			fnGeNewlyAddedStoreList(hmapQuestionMstr);
			return hmapQuestionMstr;
		}
	}


	private void fnGeNewlyAddedStoreList(LinkedHashMap<String, String> hmapQuestionMstr)
	{

		open();

		try {
			//Cursor cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode,DateAdded,DistanceNear from tblPreAddedStores WHERE (LatCode<>'0' AND LatCode<>'NA') AND DistanceNear<"+ DistanceRange +" ORDER BY DistanceNear  ASC Limit 30", null);//
			Cursor cursor = db.rawQuery("SELECT StoreID,StoreLatitude,StoreLongitude,ForDate,DistanceNear,0 AsflgReMap from tblStoreList WHERE (StoreLatitude='NA') and ISNewStore=1", null);//
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						String StoreLat="0.00";
						String StoreLon="0.00";
						if(!cursor.getString(1).equals("NA"))
						{
							StoreLat=(String) cursor.getString(1);
							StoreLon=(String) cursor.getString(2);
						}

						//hmapQuestionMstr.put((String) cursor.getString(0).toString(),StoreLat+"^"+StoreLon+"^"+(String) cursor.getString(3).toString());
						hmapQuestionMstr.put((String) cursor.getString(0),StoreLat+"^"+StoreLon+"^"+(String) cursor.getString(3) +"^"+(String) cursor.getString(5));
						cursor.moveToNext();
					}
				}
			}

		}
		catch (Exception e) {
			System.out.println("Error fnGettblUOMMstr= "+e.toString());
		}
		finally
		{

			close();

		}
	}

	public LinkedHashMap<String, String> fnGetALLOutletMstr()
	{
		Cursor cursor=null;

		LinkedHashMap<String, String> hmapOutletMstr= new LinkedHashMap<>();
		open();

		cursor = db.rawQuery("SELECT StoreID,ifnull(StoreLatitude,0),ifnull(StoreLongitude,0) from tblStoreList", null);


		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					String phoneNum;
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						hmapOutletMstr.put((String) cursor.getString(0), (String) cursor.getString(1) +"^"+(String) cursor.getString(2));
						cursor.moveToNext();
					}
				}
			}
			return hmapOutletMstr;
		}
		finally
		{
			cursor.close();
			close();
		}
	}


	public void UpdateStoreDistanceNear(String OutletID, int DistanceNear)
	{
		try
		{

			final ContentValues values = new ContentValues();
			values.put("DistanceNear", DistanceNear);
			int affected = db.update("tblStoreList", values, "StoreID=?", new String[]{OutletID});
		}
		catch(Exception e)
		{

		}
		finally
		{

		}

	}



	public long savetblManagerMstr(String PersonID, String PersonType, String  PersonName, String ManagerID, String ManagerType,String ManagerName)
	{

		ContentValues initialValues = new ContentValues();

		initialValues.put("PersonID", PersonID.trim());
		initialValues.put("PersonType", PersonType.trim());
		initialValues.put("PersonName", PersonName.trim());
		initialValues.put("ManagerID", ManagerID.trim());
		initialValues.put("ManagerType", ManagerType.trim());
		initialValues.put("ManagerName", ManagerName.trim());

		return db.insert(DATABASE_TABLE_MAIN261, null, initialValues);
	}

	public LinkedHashMap<String, String> fetch_Manager_List()
	{
		open();
		LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
		Cursor cursor = db.rawQuery("SELECT ManagerID,ManagerName FROM tblManagerMstr ",null);
		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
											/*if(i==0)
											{
												hmapCatgry.put("Select Manager", "00");
											}*/
						hmapCatgry.put(cursor.getString(1), cursor.getString(0));
						cursor.moveToNext();
					}
				}

			}

			else
			{
				hmapCatgry.put("No Manager", "0");
			}
			return hmapCatgry;
		}
		finally
		{
			cursor.close();
			close();
		}
	}

	public void deletetblSelectedManagerDetails()
	{
		open();
		db.execSQL("DELETE FROM tblSelectedManagerDetails");

		close();
	}
	public int counttblSelectedManagerDetails()
	{
		Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblSelectedManagerDetails", null);
		int chkI = 0;
		try {
			if (cursorE2.moveToFirst()) {

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally {
			cursorE2.close();
		}
		return chkI;
	}

	public String Fetch_tblSelectedManagerDetails()
	{
		open();
		Cursor cursor = null;
		try
		{
			cursor = db.rawQuery("SELECT ManagerID,ManagerName  FROM tblSelectedManagerDetails", null);

			String RankOutletName = null;//[] = new String[cursor.getCount()];

			if (cursor.moveToFirst()) {

				RankOutletName = (String) cursor.getString(0) + "_"
						+ (String) cursor.getString(1);
				cursor.moveToNext();



			}
			return RankOutletName;
		} finally {
			cursor.close();
			close();
		}

	}

	public String fetchOtherNameBasicOfManagerID(int ManagerID)
	{
		int SnamecolumnIndex1 = 0;
		String LocIDDesc="0";
		Cursor cursor = db.rawQuery("SELECT  OtherName from tblSelectedManagerDetails where ManagerID='"+ManagerID+"'", null);
		try {

			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					LocIDDesc = (String) cursor.getString(SnamecolumnIndex1).trim();

					cursor.moveToNext();
				}

			}
			return LocIDDesc;
		} finally {
			cursor.close();
		}


	}
	public long savetblSelectedManagerDetails(String IMEI,String CurDate,String PersonID,
											  String PersonType, String  PersonName, String ManagerID, String ManagerType,
											  String ManagerName,String OtherName)
	{

		ContentValues initialValues = new ContentValues();
		initialValues.put("IMEI", IMEI.trim());
		initialValues.put("CurDate", CurDate.trim());
		initialValues.put("PersonID", PersonID.trim());
		initialValues.put("PersonType", PersonType.trim());
		initialValues.put("PersonName", PersonName.trim());
		initialValues.put("ManagerID", ManagerID.trim());
		initialValues.put("ManagerType", ManagerType.trim());
		initialValues.put("ManagerName", ManagerName.trim());
		initialValues.put("OtherName", OtherName.trim());
		initialValues.put("Sstat", 3);

		return db.insert(DATABASE_TABLE_MAIN262, null, initialValues);
	}

	public String fetchtblManagerMstr(String ManagerID)
	{
		open();
		int SnamecolumnIndex1 = 0;
		String LocIDDesc="0";
		Cursor cursor = null;
		try
		{
			cursor = db.rawQuery("SELECT  * from tblManagerMstr where ManagerID='"+ManagerID+"'", null);


			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					LocIDDesc = (String) cursor.getString(0).trim()+"^"+(String) cursor.getString(1).trim()+"^"+(String) cursor.getString(2).trim()+"^"+(String) cursor.getString(3).trim()+"^"+(String) cursor.getString(4).trim()+"^"+(String) cursor.getString(5).trim();

					cursor.moveToNext();
				}

			}
			return LocIDDesc;
		} finally {
			cursor.close();
			close();
		}


	}

	public void droptblManagerMstr()
	{
		db.execSQL("DROP TABLE IF EXISTS tblManagerMstr");
		db.execSQL("DROP TABLE IF EXISTS tblSelectedManagerDetails");

	}

	public void createtblManagerMstr()
	{
		try
		{
			db.execSQL(DATABASE_CREATE_TABLE_261);
			db.execSQL(DATABASE_CREATE_TABLE_262);
		}
		catch (Exception e)
		{

		}

	}
	public void Delete_tblRouteMasterAndDistributorMstr()
	{
		db.execSQL("DELETE FROM tblRouteMstr");
		db.execSQL("DELETE FROM tblDistributorListMaster");
	}

	public void Delete_tblManagerMstr()
	{
		//db.execSQL("DELETE FROM tblManagerMstr");
		//db.execSQL("DELETE FROM tblSelectedManagerDetails");
	}


	public long savetblDistributorListMaster(int DBRNodeID,int DistributorNodeType, String Distributor)
	{

		ContentValues initialValues = new ContentValues();

		initialValues.put("DBRNodeID", DBRNodeID);
		initialValues.put("DistributorNodeType", DistributorNodeType);
		initialValues.put("Distributor", Distributor);

		return db.insert(DATABASE_TABLE_MAIN4, null, initialValues);
	}

	public String[] getDistributorData()
	{
		Cursor cursor2=null;
		try {
			//cursor2 = db.rawQuery("SELECT *  FROM tblDistributorListMaster", null);
			cursor2 = db.rawQuery("SELECT DBRNodeID,DistributorNodeType,Distributor FROM tblDistribtorMstr", null);

			String strStoreTypeNamesDetais[] =null;// new String[cursor2.getCount()];
			if(cursor2.getCount()>0)
			{
				strStoreTypeNamesDetais=new String[cursor2.getCount()+1];
				if (cursor2.moveToFirst())
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{
						if(i==0)
						{
							strStoreTypeNamesDetais[i]="0^0^Select Distributor";
						}
						strStoreTypeNamesDetais[i+1] = cursor2.getString(0) +"^"+cursor2.getString(1)+"^"+cursor2.getString(2);
						cursor2.moveToNext();
					}
				}
			}
			else
			{
				strStoreTypeNamesDetais=new String[1];
				strStoreTypeNamesDetais[0]="0^0^Select Distributor";

			}
			return strStoreTypeNamesDetais;
		} finally {
			cursor2.close();
		}
	}

	//created for distrbtr map after phone email changes
    public String[] getDistributorDataForMapActivity()
    {
        String strStoreTypeNamesDetais[] =null;
        String phoneNum="0",email="NA";
        try {
            Cursor cursor2 = db.rawQuery("SELECT DBRNodeID,DistributorNodeType,Distributor,flgRemap,ContactNumber,EmailID FROM tblDistribtorMstr", null);

            if(cursor2.getCount()>0)
            {
                strStoreTypeNamesDetais=new String[cursor2.getCount()+1];
                if (cursor2.moveToFirst())
                {
                    for (int i = 0; i < cursor2.getCount(); i++)
                    {
                        if(i==0)
                        {
                            strStoreTypeNamesDetais[i]="0^0^Select Distributor^0^0^0";
                        }
                        if(cursor2.getString(4).equals(""))
                        {
                            phoneNum="0";
                        }
                        if(cursor2.getString(5).equals(""))
                        {
                            email="NA";
                        }
                        strStoreTypeNamesDetais[i+1] = cursor2.getString(0) +"^"+cursor2.getString(1)+"^"+cursor2.getString(2)+"^"+cursor2.getString(3)+"^"+phoneNum+"^"+email;
                        cursor2.moveToNext();
                    }
                }
            }
            else
            {
                strStoreTypeNamesDetais=new String[1];
                strStoreTypeNamesDetais[0]="0^0^Select Distributor^0^0^0";
            }
            return strStoreTypeNamesDetais;
        } finally {

        }
    }

	public String fetchDistributorIdByName(String Distributor)
	{
		open();
		Cursor cursor2=null;
		String strStoreTypeNamesDetais = "0^0";
		try {
			cursor2 = db.rawQuery("SELECT DBRNodeID,DistributorNodeType FROM tblDistributorListMaster where Distributor='"+Distributor+"'", null);
							 /*[] = new String[cursor2.getCount()]*/

			if (cursor2.moveToFirst())
			{
				for (int i = 0; i < cursor2.getCount(); i++)
				{
					strStoreTypeNamesDetais = cursor2.getInt(0)+"^"+cursor2.getInt(1);
					cursor2.moveToNext();
				}
			}
			return strStoreTypeNamesDetais;
		}
		catch(Exception e)
		{
			System.out.println("EXCEPTION    "+e);
		}finally {

			cursor2.close();
			close();
			return strStoreTypeNamesDetais;
		}
	}

	public int fetchDistributorNodeTypeByID(int DBRNodeID)
	{
		open();
		Cursor cursor2=null;
		int strStoreTypeNamesDetais = 0;
		try {
			cursor2 = db.rawQuery("SELECT DistributorNodeType FROM tblDistributorListMaster where DBRNodeID='"+DBRNodeID+"'", null);
							 /*[] = new String[cursor2.getCount()]*/

			if (cursor2.moveToFirst())
			{
				for (int i = 0; i < cursor2.getCount(); i++)
				{
					strStoreTypeNamesDetais = cursor2.getInt(0);
					cursor2.moveToNext();
				}
			}
			return strStoreTypeNamesDetais;
		}
		catch(Exception e)
		{
			System.out.println("EXCEPTION    "+e);
		}finally {

			cursor2.close();
			close();
			return strStoreTypeNamesDetais;
		}
	}

	public String fetchProductNodeTypeByID(int ProductNodeID,int DistID,int DistNodeType)
	{
		open();
		Cursor cursor2=null;
		String strStoreTypeNamesDetais = "0^0";
		try {
			cursor2 = db.rawQuery("SELECT ProductNodeType,StockDate FROM tblDistributorDayReport where ProductNodeID='"+ProductNodeID+"' and DistributorNodeID="+DistID+" and DistributorNodeType="+DistNodeType, null);
							 /*[] = new String[cursor2.getCount()]*/

			if (cursor2.moveToFirst())
			{
				for (int i = 0; i < cursor2.getCount(); i++)
				{
					strStoreTypeNamesDetais = cursor2.getInt(0)+"^"+ cursor2.getString(1);
					cursor2.moveToNext();
				}
			}
			return strStoreTypeNamesDetais;
		}
		catch(Exception e)
		{
			System.out.println("EXCEPTION    "+e);
		}finally {

			//cursor2.close();
			close();
			return strStoreTypeNamesDetais;
		}
	}


	public int countDataIntblDistributorSavedData(int DistribtrId,int DistributorNodeType,int Sstat)
	{
		open();

		Cursor cursorE2=null;
		int chkI = 0;
		try {
			cursorE2 = db.rawQuery("SELECT * FROM tblDistributorSavedData WHERE DistribtrId="+DistribtrId+" and DistributorNodeType="+DistributorNodeType, null);

			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {


				}		chkI = 1;

			}

		} finally {
			//cursorE2.close();
			close();
		}
		return chkI;
	}

	public int counttblDistributorSavedData()  throws IOException
	{
		int chkI = 0;
		try
		{
			open();
			Cursor cursorE2 = db.rawQuery("SELECT * from tblDistributorSavedData where Sstat=3", null);

			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst())
				{

					chkI = 1;

				}
			}

		}
		catch(Exception e)
		{

		}
		finally
		{
			//cursorE2.close();
			close();
		}
		return chkI;
	}
	public void deleteDistributorStockTbles()
	{
		try
		{
			open();

			db.execSQL("DELETE FROM tblDistributorDayReport");
			db.execSQL("DELETE FROM tblDistributorDayReportColumnsDesc");
			db.execSQL("DELETE FROM tblDistributorSavedData");
			db.execSQL("DELETE FROM tblDistributorOldStockData");
		}
		catch(Exception e)
		{

		}finally
		{
			close();
		}

	}

	public String GetActiveRouteIDForDistributor()
	{
		int LoncolumnIndex = 0;
		String activeRouteID = "0";
		Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);
		try
		{

			if (cursor2.moveToFirst())
			{

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					activeRouteID = cursor2.getString(LoncolumnIndex);
					cursor2.moveToNext();
				}

			}
			return activeRouteID;
		}
		finally
		{
			cursor2.close();
		}

	}

	public void deleteDistributorStockTblesOnDistributorIDBasic(int DistributorNodeID,int DistributorNodeType)
	{
		try
		{
			open();

			db.execSQL("DELETE FROM tblDistributorDayReport where DistributorNodeID="+DistributorNodeID+" and DistributorNodeType="+DistributorNodeType);
			db.execSQL("DELETE FROM tblDistributorDayReportColumnsDesc where DistributorNodeID="+DistributorNodeID+" and DistributorNodeType="+DistributorNodeType);
			db.execSQL("DELETE FROM tblDistributorSavedData where DistribtrId="+DistributorNodeID+" and DistributorNodeType="+DistributorNodeType);
			db.execSQL("DELETE FROM tblDistributorOldStockData where DistribtrId="+DistributorNodeID+" and DistributorNodeType="+DistributorNodeType);
		}
		catch(Exception e)
		{

		}finally
		{
			close();
		}

	}
	public LinkedHashMap<String,String> fetchtblDistribtrReport(int DistributorNodeID,int DistributorNodeType)
	{
		int ScodecolumnIndex = 0;

		Cursor cursor = null;
		LinkedHashMap<String, String> HmapDistrbutrReport;
		try {
			cursor = db.rawQuery("SELECT *  FROM tblDistributorDayReport where DistributorNodeType="+DistributorNodeID+" and DistributorNodeType="+DistributorNodeType, null);
			HmapDistrbutrReport= new LinkedHashMap<>();

			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					ScodecolumnIndex = 1;

					HmapDistrbutrReport.put(cursor.getString(0).trim()+"^"+(String) cursor.getString(3).trim(), cursor.getString(1).trim()+"^"+(String) cursor.getString(2).trim());
					//// System.out.println("Value inserting 231 fetching :"+allData[i]);
					cursor.moveToNext();
					// cursor.close();
				}

			}
			////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return HmapDistrbutrReport;
		} finally {
			cursor.close();
		}

	}

	public ArrayList<String> fetchtblDistribtrReportColumnDesc(int DistributorNodeID,int DistributorNodeType)
	{
		int ScodecolumnIndex = 0;

		Cursor cursor = null;
		ArrayList<String> alist;
		try {
			cursor = db.rawQuery("SELECT *  FROM tblDistributorDayReportColumnsDesc where DistributorNodeID="+DistributorNodeID+" and DistributorNodeType="+DistributorNodeType, null);
			alist= new ArrayList<>();

			if (cursor.moveToFirst())
			{
				for (int i = 0; i < cursor.getCount(); i++)
				{
					if(i >4)
					{
						alist.add(cursor.getString(0)+"^"+ cursor.getString(1).trim());
						System.out.println(cursor.getString(0).trim()+"^"+ cursor.getString(1).trim());
						//// System.out.println("Value inserting 231 fetching :"+allData[i]);
						// cursor.close();
					}
					cursor.moveToNext();
				}

			}
			////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return alist;
		} finally {
			cursor.close();
		}
	}
	public void Delete_tblDistributorSavedData(int DistribtrId,int DistributorNodeType)
	{
		try
		{
			open();
			db.execSQL("DELETE FROM tblDistributorSavedData where DistribtrId="+DistribtrId+" and DistributorNodeType="+DistributorNodeType);
			db.execSQL("DELETE FROM tblDistributorOldStockData where DistribtrId="+DistribtrId+" and DistributorNodeType="+DistributorNodeType);
		}
		catch(Exception e)
		{

		}
		finally
		{
			close();
		}
	}

	public long savetblDistributorSavedData(String ProductName,String ShortName,String ProductID,String Date,String EnteredValue, int DistribtrId,int DistributorNodeType,int ProductNodeType,String StockDate, int Sstat,int EntryType,int StockPcsCaseType)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("ProductName", ProductName.trim());
		initialValues.put("ShortName", ShortName.trim());
		initialValues.put("ProductID", ProductID.trim());
		initialValues.put("Date", Date.trim());
		initialValues.put("EnteredValue", EnteredValue.trim());
		initialValues.put("DistribtrId", DistribtrId);
		initialValues.put("DistributorNodeType", DistributorNodeType);
		initialValues.put("ProductNodeType", ProductNodeType);
		initialValues.put("EntryType", EntryType);
		initialValues.put("StockDate", StockDate);
		initialValues.put("StockPcsCaseType", StockPcsCaseType);


		initialValues.put("Sstat", Sstat);
		return db.insert(TABLE_tblDistributorSavedData, null, initialValues);
	}


	public LinkedHashMap<String, String> fetchtblDistribtrMnthDates(int DistributorNodeID,int DistributorNodeType)
	{
		open();
		int ScodecolumnIndex = 0;

		Cursor cursor = null;
		LinkedHashMap<String, String> HmapForDates;
		try {
			cursor = db.rawQuery("SELECT DistDayReportColumnDisplayName  FROM tblDistributorDayReportColumnsDesc where DistributorNodeID="+DistributorNodeID+" and DistributorNodeType="+DistributorNodeType, null);
			HmapForDates= new LinkedHashMap<>();

			if (cursor.moveToFirst())
			{
				for (int i = 0; i < cursor.getCount(); i++)
				{
					if(i >6)
					{
						HmapForDates.put(cursor.getString(0).trim(), cursor.getString(0).trim());
						System.out.println(cursor.getString(0).trim());
					}
					cursor.moveToNext();
				}


			}
			HmapForDates.put("01-01-1900","Older Stock");
			////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return HmapForDates;
		} finally {
			cursor.close();
			close();
		}
	}


	public String[] getDistinctProdctName(int DistributorNodeID,int DistributorNodeType)
	{
		int LoncolumnIndex = 0;

		Cursor cursor2=null;
		try {
			cursor2 = db.rawQuery("SELECT DISTINCT SKUName  FROM tblDistributorDayReport where DistributorNodeID="+DistributorNodeID+" and DistributorNodeType="+DistributorNodeType, null);
			String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];

			if (cursor2.moveToFirst())
			{
				for (int i = 0; i < cursor2.getCount(); i++)
				{
					strStoreTypeNamesDetais[i] = cursor2.getString(0);
					cursor2.moveToNext();
				}

			}
			return strStoreTypeNamesDetais;
		} finally {
			cursor2.close();
		}
	}

	public String[] getPrdctIdAndSku(String SKUName,int DistribtrId,int DistributorNodeType)
	{
		int LoncolumnIndex = 0;

		Cursor cursor2=null;
		try {
			cursor2 = db.rawQuery("SELECT ProductNodeID,FlvShortName  FROM tblDistributorDayReport where SKUName='"+SKUName+"' and DistributorNodeID="+DistribtrId+" and DistributorNodeType="+DistributorNodeType, null);
			String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];

			if (cursor2.moveToFirst())
			{
				for (int i = 0; i < cursor2.getCount(); i++)
				{
					strStoreTypeNamesDetais[i] = cursor2.getString(0)+"^"+cursor2.getString(1);
					cursor2.moveToNext();
				}

			}
			return strStoreTypeNamesDetais;
		} finally {
            if(cursor2!=null) {
                cursor2.close();
            }
		}
	}


	public LinkedHashMap<String,String> fetchtblDistribtrOldStockData(int DistribtrId,int DistribtrNodeType)
	{
		open();
		int ScodecolumnIndex = 0;

		Cursor cursor = null;
		LinkedHashMap<String, String> HmapDistrbutrSavedData;
		try {
			cursor = db.rawQuery("SELECT DistribtrTag,EnteredValue  FROM tblDistributorOldStockData where  DistribtrId="+DistribtrId+" and DistributorNodeType="+DistribtrNodeType, null);
			HmapDistrbutrSavedData= new LinkedHashMap<>();

			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					ScodecolumnIndex = 1;

					HmapDistrbutrSavedData.put(cursor.getString(0).trim(),(String) cursor.getString(1).trim());
					//// System.out.println("Value inserting 231 fetching :"+allData[i]);
					cursor.moveToNext();
					// cursor.close();
				}
			}
			return HmapDistrbutrSavedData;
		} finally {
			//cursor.close();
			close();
		}
	}
	public LinkedHashMap<String,String> fetchtblDistribtrSavedData(int DistribtrId,int DistribtrNodeType)
	{
		open();
		int ScodecolumnIndex = 0;

		Cursor cursor = null;
		LinkedHashMap<String, String> HmapDistrbutrSavedData;
		try {
			cursor = db.rawQuery("SELECT ProductID,Date,EnteredValue,DistribtrId,DistributorNodeType,EntryType  FROM tblDistributorSavedData where  DistribtrId="+DistribtrId+" and DistributorNodeType="+DistribtrNodeType, null);
			HmapDistrbutrSavedData= new LinkedHashMap<>();

			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					ScodecolumnIndex = 1;

					HmapDistrbutrSavedData.put(cursor.getString(0).trim()+"_"+(String) cursor.getString(1).trim()+"_"+(String) cursor.getString(3).trim()+"_"+(String) cursor.getString(4).trim()+"_"+(String) cursor.getString(5).trim(),(String) cursor.getString(2).trim());
					//// System.out.println("Value inserting 231 fetching :"+allData[i]);
					cursor.moveToNext();
					// cursor.close();
				}
			}
			return HmapDistrbutrSavedData;
		} finally {
			//cursor.close();
			close();
		}



	}
	public int fnGetDistributorStockPcsCaseType(int DistribtrId,int DistributorNodeType)
	{

		open();
		int ScodecolumnIndex = 0;

		Cursor cursor = null;
		//LinkedHashMap<String, String> HmapDistrbutrSavedData;
		try {
			cursor = db.rawQuery("SELECT DISTINCT StockPcsCaseType  FROM tblDistributorSavedData where DistribtrId="+DistribtrId+" and DistributorNodeType="+DistributorNodeType, null);

			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					ScodecolumnIndex = Integer.parseInt(cursor.getString(0).trim());
					cursor.moveToNext();
				}
			}
			return ScodecolumnIndex;
		} finally {
			//cursor.close();
			close();
		}

	}

	public String getDistinctStockDate()
	{
		open();
		int LoncolumnIndex = 0;

		Cursor cursor2=null;
		try {
			cursor2 = db.rawQuery("SELECT DISTINCT StockDate  FROM tblDistributorDayReport", null);
			String strStoreTypeNamesDetais="NA";

			if (cursor2.moveToFirst())
			{
				for (int i = 0; i < cursor2.getCount(); i++)
				{
					strStoreTypeNamesDetais= cursor2.getString(0);
					cursor2.moveToNext();
				}

			}
			return strStoreTypeNamesDetais;
		} finally {
			cursor2.close();
			close();
		}
	}

	public long savetblDistributorOldStockData(int DistribtrId,int DistributorNodeType,String DistribtrTag,String EnteredValue)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("DistribtrId", DistribtrId);
		initialValues.put("DistributorNodeType", DistributorNodeType);
		initialValues.put("DistribtrTag", DistribtrTag.trim());
		initialValues.put("EnteredValue", EnteredValue.trim());

		return db.insert(TABLE_tblDistributorOldStockData, null, initialValues);
	}

	public long savetblDistributorDayReportColumnsDesc(String DistDayReportCoumnName,String DistDayReportColumnDisplayName,int CustomerNodeID,int CustomerNodeType)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("DistDayReportCoumnName", DistDayReportCoumnName);
		initialValues.put("DistDayReportColumnDisplayName", DistDayReportColumnDisplayName);
		initialValues.put("DistributorNodeID", CustomerNodeID);
		initialValues.put("DistributorNodeType", CustomerNodeType);

		return db.insert(TABLE_tblDistributorDayReportColumnsDesc, null, initialValues);
	}
	public long savetblDistributorDayReport(String ProductNodeID,String ProductNodeType,String SKUName,String FlvShortName,String StockDate,int CustomerNodeID,int CustomerNodeType)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("ProductNodeID", ProductNodeID);
		initialValues.put("ProductNodeType", ProductNodeType.trim());
		initialValues.put("SKUName", SKUName.trim());
		initialValues.put("FlvShortName", FlvShortName.trim());
		initialValues.put("StockDate", StockDate.trim());
		initialValues.put("DistributorNodeID", CustomerNodeID);
		initialValues.put("DistributorNodeType", CustomerNodeType);
		return db.insert(TABLE_tblDistributorDayReport, null, initialValues);
	}

	public void updateDistributorSstat()
	{

		try
		{

			final ContentValues values = new ContentValues();
			values.put("Sstat", "4");
			int affected = db.update("tblDistributorSavedData", values, "Sstat=?",new String[] { "3" });

		}
		catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}
	}

	public void updateDistributorCheckInSstat()
	{

		try
		{

			final ContentValues values = new ContentValues();
			values.put("Sstat", "4");
			int affected = db.update("tblDistributorSavedData", values, "Sstat=?",new String[] { "3" });
			int affected1 = db.update("tblDistributorMapping", values, "Sstat=?",new String[] { "3" });
		}
		catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}
	}


	public long savetblTargetVsAchievedNote(String msgToDisplay)
	{
		//DATABASE_TABLE_MAIN236 = "create table tblTargetVsAchievedNote (MsgToDisplay text null);";
		ContentValues initialValues = new ContentValues();

		initialValues.put("MsgToDisplay", msgToDisplay);


		return db.insert(DATABASE_TABLE_MAIN236, null, initialValues);
	}
	public String fetchNoteFromtblTargetVsAchievedNote()
	{
		open();
		int ScodecolumnIndex = 0;
		////DATABASE_TABLE_MAIN236 = "create table tblTargetVsAchievedNote (MsgToDisplay text null);";

		try {
			Cursor cursor = db.rawQuery("SELECT MsgToDisplay  FROM tblTargetVsAchievedNote", null);
			String note="";
			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					ScodecolumnIndex = 1;
					note =  cursor.getString(0);
					//// System.out.println("Value inserting 231 fetching :"+allData[i]);
					cursor.moveToNext();
					// cursor.close();
				}

			}
			////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return note;
		} finally {

			close();
		}

	}

	public long savetblStoreWiseTarget(String StoreID, String TargetValue)
	{

		ContentValues initialValues = new ContentValues();



		initialValues.put("StoreID", StoreID.trim());
		initialValues.put("TargetValue", TargetValue.trim());

		return db.insert(DATABASE_TABLE_MAIN23, null, initialValues);
	}

	public long savetblTargetVsAchievedSummary(int AutoId,String Descr,String TodayTarget,String TodayAchieved,String TodayBal,
											   String Todayflg,String MonthTarget,String MonthAchieved,String MonthBal,String Monthflg,int flgValTgtOrPrdct)
	{
		//ValTgtOrPrdctFlg
		ContentValues initialValues = new ContentValues();

		initialValues.put("AutoId", AutoId);
		initialValues.put("Descr", Descr.trim());
		initialValues.put("TodayTarget", TodayTarget.trim());
		initialValues.put("TodayAchieved", TodayAchieved.trim());
		initialValues.put("TodayBal", TodayBal.trim());
		initialValues.put("Todayflg", Todayflg.trim());
		initialValues.put("MonthTarget", MonthTarget.trim());
		initialValues.put("MonthAchieved", MonthAchieved.trim());
		initialValues.put("MonthBal", MonthBal.trim());
		initialValues.put("Monthflg", Monthflg.trim());
		initialValues.put("ValTgtOrPrdctFlg", flgValTgtOrPrdct);


		return db.insert(DATABASE_TABLE_MAIN235, null, initialValues);
	}

	public String GetActiveRouteIDSunilAgain()
	{
		int LoncolumnIndex = 0;
		String activeRouteID = "0";
		// open();
		Cursor cursor2 = null;
		try
		{
			cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);


			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					activeRouteID = cursor2.getString(LoncolumnIndex);
					cursor2.moveToNext();

				}

			}
			return activeRouteID;
		} finally {
			cursor2.close();
			//close();
		}

	}
	public void Delete_tblStoreWiseTarget()
	{
		db.execSQL("DELETE FROM tblStoreWiseTarget");
	}
	public String fetchtblStoreWiseTarget(String StoreID)
	{

		open();
		String LocIDDesc="0";
		Cursor cursor = db.rawQuery("SELECT  TargetValue from tblStoreWiseTarget where StoreID='"+StoreID+"'", null);
		try
		{

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					LocIDDesc = (String) cursor.getString(0).trim();
					cursor.moveToNext();
				}

			}
			return LocIDDesc;
		}
		finally
		{
			cursor.close();
			close();
		}


	}

	public ArrayList<Object> fetchIncentiveData()
	{
		ArrayList<Object> arrlstObjects= new ArrayList<>();
		ArrayList<LinkedHashMap<String, ArrayList<String>>> array= new ArrayList<>();
        LinkedHashMap<String, ArrayList<String>> HmapMstrData= new LinkedHashMap<>();


		LinkedHashMap<String, ArrayList<String>> HmapIncPastDetailData= new LinkedHashMap<>();
		LinkedHashMap<String, ArrayList<String>> HmapInnerData= new LinkedHashMap<>();
		String total_earning="0",Incentive_msg="NA";

		open();
		try
		{
			Cursor cursor = db.rawQuery("SELECT tblIncentiveMaster.IncId,OutputType,IncentiveName,count(tblIncentiveDetailsColumnsDesc.IncId) as ColumnCount,flgAcheived,Earning FROM tblIncentiveMaster INNER JOIN tblIncentiveDetailsColumnsDesc ON tblIncentiveMaster.IncId = tblIncentiveDetailsColumnsDesc.IncId group by tblIncentiveDetailsColumnsDesc.IncId", null);

			if(cursor.getCount() >0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i < cursor.getCount(); i++)
					{
						ArrayList<String> list_frstTbl= new ArrayList<>();
						list_frstTbl.add(0, cursor.getString(1).trim()); //output type
						list_frstTbl.add(1, cursor.getString(2).trim()); //incentive name
						list_frstTbl.add(2, cursor.getString(3).trim()); //count of incId frm columndesc tbl
						list_frstTbl.add(3, cursor.getString(4).trim()); //flgAchieved
						list_frstTbl.add(4, cursor.getString(5).trim()); //Earning

						HmapMstrData.put(cursor.getString(0).trim(), list_frstTbl);

						HmapInnerData.put(cursor.getString(0).trim(),fetchIncentiveInnerData(cursor.getString(0).trim()));

						ArrayList<String> list_pastDetail= new ArrayList<>();
						list_pastDetail=fetchIncPastDetailData(cursor.getString(0).trim());
						if(!list_pastDetail.isEmpty())
						{
							HmapIncPastDetailData.put(cursor.getString(0).trim(),list_pastDetail);
						}

						list_frstTbl.add(5,String.valueOf(getCountFromIncPastDetails(cursor.getString(0).trim())));

						cursor.moveToNext();
					}

					array.add(HmapMstrData);
					array.add(HmapInnerData);
					array.add(HmapIncPastDetailData);
					arrlstObjects.add(array);
					total_earning=fetchTotalEarning();
					arrlstObjects.add(total_earning);
					Incentive_msg=getMsgToDisplay();
					arrlstObjects.add(Incentive_msg);
				}
			}

		}
		catch(Exception e)
		{
			System.out.println("EXception.."+e);
		}
		finally
		{
			close();
		}
		return arrlstObjects;
	}

	private ArrayList<String> fetchIncentiveInnerData(String IncId)
	{
		LinkedHashMap<String, ArrayList<String>> HmapInnerData= new LinkedHashMap<>();
		String columnIncentives="";
		String columnIncentivesForTableDisplay="";
		ArrayList<String> list_frstTbl= new ArrayList<>();
		int ColumnCount=0;
		try
		{
			Cursor cursor = db.rawQuery("SELECT Distinct ReportColumnName,DisplayColumnName FROM tblIncentiveDetailsColumnsDesc where IncId='"+IncId+"'", null);

			if(cursor.getCount() >0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i < cursor.getCount(); i++)
					{
						ArrayList<String> arrIncenticeData= new ArrayList<>();
						if(columnIncentives.equals(""))
						{
							columnIncentives="IFNULL("+ cursor.getString(0).trim()+",' ')";
							columnIncentivesForTableDisplay= cursor.getString(1).trim();
							ColumnCount=0;
						}
						else
						{
							columnIncentives=columnIncentives+",IFNULL("+ cursor.getString(0).trim()+",' ')";
                            columnIncentivesForTableDisplay=columnIncentivesForTableDisplay+"^"+ cursor.getString(1).trim();
							ColumnCount=ColumnCount+1;

						}
											/*	ArrayList<String> list_frstTbl=new ArrayList<String>();
												list_frstTbl.add(cursor.getString(1).toString().trim()); //column desc to show in tbl

												;*/

						if(i==(cursor.getCount()-1))
						{
							list_frstTbl.add(columnIncentivesForTableDisplay);
							arrIncenticeData=fetchColumnData(IncId,columnIncentives,ColumnCount,list_frstTbl);
						}

						cursor.moveToNext();
					}

				}
			}
			return list_frstTbl;
		}
		finally
		{
		}
	}

	private ArrayList<String> fetchColumnData(String IncId, String columnIncentives, int ColumnCount, ArrayList<String> list_frstTbl)
	{
		try
		{
			Cursor cursor = db.rawQuery("SELECT "+columnIncentives+" FROM tblIncentiveDetailsData where IncId='"+IncId+"'", null);

			System.out.println("PASSED INFO..."+"IncId:"+IncId+" columnIncentives:"+columnIncentives+" ColumnCount:"+ColumnCount);
			if(cursor.getCount() >0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i < cursor.getCount(); i++)
					{
						Boolean val=false;
						String incentiveColumnsData="";
						for(int j=0;j <= ColumnCount;j++)
						{
							if(incentiveColumnsData.equals("") && !val)
							{
								incentiveColumnsData= cursor.getString(j).trim();
								val=true;
							}
							else
							{
								if(j == (ColumnCount))
								{
									if(cursor.getString(j).trim().equals(""))
									{
										incentiveColumnsData=incentiveColumnsData+"^"+"NA";
										System.out.println("j:"+j+"-"+incentiveColumnsData+"-"+ cursor.getColumnName(j));
									}
									else
									{
										incentiveColumnsData=incentiveColumnsData+"^"+ cursor.getString(j).trim();
									}

									System.out.println("END OF LOOP: "+"IncId"+IncId+"-"+incentiveColumnsData);
								}
								else
								{
									incentiveColumnsData=incentiveColumnsData+"^"+ cursor.getString(j).trim();
								}
							}

						}
						list_frstTbl.add(incentiveColumnsData); //column desc to show in tbl
						cursor.moveToNext();
					}
				}
			}
			return list_frstTbl;
		}
		finally
		{
		}
	}

	private String fetchTotalEarning()
	{
		String total_earning="NA";
		try
		{
			Cursor cursor = db.rawQuery("SELECT Total_Earning FROM tblTotalEarning", null);

			if(cursor.getCount() >0)
			{
				if (cursor.moveToFirst())
				{
					total_earning= cursor.getString(0).trim();
					System.out.println("TOTAL EARNING: "+total_earning);
					cursor.moveToNext();
				}
			}
		}
		finally
		{
			return total_earning;
		}
	}

	private ArrayList<String> fetchIncPastDetailData(String IncId)
	{
		LinkedHashMap<String, ArrayList<String>> HmapInnerData= new LinkedHashMap<>();

		String columnIncentives="";
		String columnIncentivesForTableDisplay="";
		ArrayList<String> list_frstTbl= new ArrayList<>();
		int ColumnCount=0;

		try
		{
			Cursor cursor = db.rawQuery("SELECT Distinct ReportColumnName,DisplayColumnName FROM tblIncentivePastDetailsColumnsDesc where IncId='"+IncId+"'", null);

			if(cursor.getCount() >0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i < cursor.getCount(); i++)
					{
						ArrayList<String> arrIncenticeData= new ArrayList<>();

						if(columnIncentives.equals(""))
						{
							columnIncentives= cursor.getString(0).trim();
							columnIncentivesForTableDisplay= cursor.getString(1).trim();
							ColumnCount=0;
						}
						else
						{
							columnIncentives=columnIncentives+","+ cursor.getString(0).trim();
							columnIncentivesForTableDisplay=columnIncentivesForTableDisplay+"^"+ cursor.getString(1).trim();
							ColumnCount=ColumnCount+1;
						}

						if(i==(cursor.getCount()-1)) //in end
						{
							list_frstTbl.add(columnIncentivesForTableDisplay);
							fetchIncPastDetailColumnData(IncId,columnIncentives,ColumnCount,list_frstTbl);
						}

						cursor.moveToNext();
					}
				}
			}
			return list_frstTbl;
		}
		finally
		{
		}
	}

	private void fetchIncPastDetailColumnData(String IncId, String columnIncentives, int ColumnCount, ArrayList<String> list_frstTbl)
	{
		try
		{
			Cursor cursor = db.rawQuery("SELECT "+columnIncentives+" FROM tblIncentivePastDetailsData where IncId='"+IncId+"'", null);

			if(cursor.getCount() >0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i < cursor.getCount(); i++)
					{
						String incentiveColumnsData="";

						for(int j=0;j<=ColumnCount;j++)
						{
							if(incentiveColumnsData.equals(""))
							{
								incentiveColumnsData= cursor.getString(j).trim();
							}
							else
							{
								incentiveColumnsData=incentiveColumnsData+"^"+ cursor.getString(j).trim();
							}
						}
						list_frstTbl.add(incentiveColumnsData); //column desc to show in tbl
						cursor.moveToNext();
					}
				}
			}
		}
		finally
		{
		}
	}

	private int getCountFromIncPastDetails(String IncId)
	{
		int cal=0;
		try
		{
			Cursor cursor = db.rawQuery("SELECT IncId as ColumnCount FROM tblIncentivePastDetailsColumnsDesc where IncId='"+IncId+"'", null);

			if(cursor.getCount() >0)
			{
				cal=cursor.getCount();
				System.out.println("COUNT..."+cal+"INC ID.."+IncId);
			}
		}
		finally
		{
		}
		return cal;
	}

	public long savetblIncentiveMsgToDisplay(String MsgToDisplay)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("MsgToDisplay", MsgToDisplay);
		System.out.println("MSG..."+MsgToDisplay);
		return db.insert(TABLE_tblIncentiveMsgToDisplay_Define, null, initialValues);
	}

	private String getMsgToDisplay()
	{
		String val="NA";
		try
		{
			Cursor cursor = db.rawQuery("SELECT MsgToDisplay FROM tblIncentiveMsgToDisplay", null);

			if(cursor.getCount() >0)
			{
				if (cursor.moveToFirst())
				{
					val= cursor.getString(0).trim();
					System.out.println("MSG FETCHED..."+val);
				}
			}
		}
		finally
		{
		}
		return val;
	}




	public void truncatetblTargetVsAchievedSummary()
	{
		db.execSQL("DELETE FROM tblTargetVsAchievedSummary");

	}
	public String[] fetchAllDataFromtblTargetVsAchievedSummary()
	{
		int ScodecolumnIndex = 0;
		open();
		Cursor cursor = db.rawQuery("SELECT *  FROM tblTargetVsAchievedSummary", null);
		try {
			String allData[]=new String[cursor.getCount()];
			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					ScodecolumnIndex = 1;
					//tblTargetVsAchievedSummary (AutoId int not null,Descr text null," +
					//"TodayTarget text null,TodayAchieved text null,TodayBal text null,Todayflg text null,
					//MonthTarget text null,MonthAchieved text null,MonthBal text null,Monthflg text null,ValTgtOrPrdctFlg int not null);";
					allData[i] = (String) cursor.getString(0).trim()+"^"+(String) cursor.getString(1).trim()+"^"+(String) cursor.getString(2).trim()+"^"+(String) cursor.getString(3).trim()+"^"+(String) cursor.getString(4).trim()+"^"+(String) cursor.getString(5).trim()+"^"+(String) cursor.getString(6).trim()+"^"+(String) cursor.getString(7).trim()+"^"+(String) cursor.getString(8).trim()+"^"+(String) cursor.getString(9).trim()+"^"+String.valueOf(cursor.getInt(10));
					//// System.out.println("Value inserting 231 fetching :"+allData[i]);
					cursor.moveToNext();
					// cursor.close();
				}

			}
			////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return allData;
		} finally {
			cursor.close();
			close();
		}

	}
	public long savetblIncentiveMaster(int IncId,int OutputType,String IncentiveName,String flgAcheived,String Earning)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("IncId", IncId);
		initialValues.put("OutputType", OutputType);
		initialValues.put("IncentiveName", IncentiveName.trim());
		initialValues.put("flgAcheived", flgAcheived.trim());
		initialValues.put("Earning", Earning.trim());

		return db.insert(TABLE_tblIncentiveMaster, null, initialValues);
	}
	public void CreateDynamicTables(String Table_Name, String TableColumn[])
	{
		db.execSQL("DROP TABLE IF EXISTS " + Table_Name);

		for(int i=0;i<TableColumn.length;i++)
		{
			if(i==0)
			{
				DATABASE_CREATE_TABLE_tblIncentiveDetailsData="CREATE TABLE " + Table_Name + "(" + TableColumn[0]+ " TEXT";
			}
			else
			{
				DATABASE_CREATE_TABLE_tblIncentiveDetailsData=DATABASE_CREATE_TABLE_tblIncentiveDetailsData+", "+TableColumn[i]+ " TEXT";
			}
		}
		DATABASE_CREATE_TABLE_tblIncentiveDetailsData=DATABASE_CREATE_TABLE_tblIncentiveDetailsData+ " );";
		db.execSQL(DATABASE_CREATE_TABLE_tblIncentiveDetailsData);

		System.out.println("hi");

	}

	public void insertDynamicTables(String Table_Name,String[] TableColumn,String TableColumnValue[])
	{
		ContentValues cv = new ContentValues();

		for(int i=0;i<TableColumn.length;i++)
		{
			cv.put(TableColumn[i], TableColumnValue[i]);
		}

		db.insert(Table_Name, null, cv);
	}

	public void CreateDynamicTblIncPastDetails(String Table_Name, String TableColumn[])
	{
		db.execSQL("DROP TABLE IF EXISTS " + Table_Name);

		for(int i=0;i<TableColumn.length;i++)
		{
			if(i==0)
			{
				DATABASE_CREATE_TABLE_tblIncentivePastDetailsData="CREATE TABLE " + Table_Name + "(" + TableColumn[0]+ " TEXT";
			}
			else
			{
				DATABASE_CREATE_TABLE_tblIncentivePastDetailsData=DATABASE_CREATE_TABLE_tblIncentivePastDetailsData+", "+TableColumn[i]+ " TEXT";
			}
		}
		DATABASE_CREATE_TABLE_tblIncentivePastDetailsData=DATABASE_CREATE_TABLE_tblIncentivePastDetailsData+ " );";
		db.execSQL(DATABASE_CREATE_TABLE_tblIncentivePastDetailsData);

		System.out.println("hi");
	}

	public long savetblIncentiveDetailsColumnsDesc(int IncId,String ReportColumnName,String DisplayColumnName)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("IncId", IncId);
		initialValues.put("ReportColumnName", ReportColumnName.trim());
		initialValues.put("DisplayColumnName", DisplayColumnName.trim());

		return db.insert(TABLE_tblIncentiveDetailsColumnsDesc, null, initialValues);
	}

	public long savetblIncentivePastDetailsColumnsDesc(int IncId,String ReportColumnName,String DisplayColumnName, String Ordr)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("IncId", IncId);
		initialValues.put("ReportColumnName", ReportColumnName.trim());
		initialValues.put("DisplayColumnName", DisplayColumnName.trim());
		initialValues.put("Ordr", Ordr.trim());

		return db.insert(TABLE_tblIncentivePastDetailsColumnsDesc, null, initialValues);
	}

	public long savetblTotalEarning(String Total_Earning)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("Total_Earning", Total_Earning.trim());

		return db.insert(TABLE_tblTotalEarning, null, initialValues);
	}

	public void deleteIncentivesTbles()
	{
		try
		{
			db.execSQL("DELETE FROM tblIncentiveMaster");
			db.execSQL("DELETE FROM tblIncentiveDetailsColumnsDesc");
			db.execSQL("DELETE FROM tblIncentivePastDetailsColumnsDesc");
			db.execSQL("DELETE FROM tblTotalEarning");
			db.execSQL("DELETE FROM tblIncentiveMsgToDisplay");

		}
		catch(Exception e)
		{	}
		finally
		{
		}
	}





	public void insertRestartStoreInfo(String prvsStoreID, String CrntStoreID, String isSavedOrSubmittedStore, String MsgToRestartPopUpShown, String isRestartDoneByDSR, int Sstat, String ActionTime)
	{
		//tblsameLocationForStoreRestartDone(UniqueID INTEGER PRIMARY KEY AUTOINCREMENT,prvsStoreID text null,CrntStoreID text null,isSavedOrSubmittedStore text null,is MsgToRestartPopUpShown text null,isRestartDoneByDSR text null ,prvsStoreFlag text null,Sstat text null);";
		open();

		Cursor cursor=db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where prvsStoreID='"+CrntStoreID+"'",null);

		ContentValues values = new ContentValues();





		values.put("Sstat",Sstat);

		if(cursor.getCount()>0)
		{


			db.update(DATABASE_TABLE_tblSameLocationForStoreRestartDone,values,"prvsStoreID=?",new String[]{prvsStoreID});
		}
		else
		{
			fnDeleteFlgStoreUnusedPrvs("0");

			values.put("ActionTime",ActionTime);
			values.put("CrntStoreID",CrntStoreID);
			values.put("prvsStoreID",prvsStoreID);
			values.put("isMsgToRestartPopUpShown",MsgToRestartPopUpShown);
			values.put("isSavedOrSubmittedStore",isSavedOrSubmittedStore);
			values.put("isRestartDoneByDSR",isRestartDoneByDSR);
			db.insert(DATABASE_TABLE_tblSameLocationForStoreRestartDone,null,values);
		}


		close();


	}

	public void updateMsgToRestartPopUpShown(String prvsStoreId, String visitSTime)
	{
		open();
		ContentValues values=new ContentValues();
		values.put("isMsgToRestartPopUpShown","1");
		values.put("ActionTime",visitSTime);
		db.update(DATABASE_TABLE_tblSameLocationForStoreRestartDone,values,"prvsStoreID=?",new String[]{prvsStoreId});
		close();
	}

	public boolean isPrvsStoreMsgShownAndRestrtDone(String prvsStoreId)
	{
		open();
		boolean isToShowPopUpForResart=true;
		try {
			Cursor cur=db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where isMsgToRestartPopUpShown='1' AND isRestartDoneByDSR='1' AND prvsStoreID='"+prvsStoreId+"'",null);
			if(cur.getCount()>0)
			{
				isToShowPopUpForResart=false;
			}
		}
		catch(Exception e)
		{

		}
		finally {
			close();
			return isToShowPopUpForResart;
		}

	}

	public String PrvsStoreMsgShownAndRestrtDone()
	{
		open();
		String storeShowPopUpForResartAndDone="";
		try {
			Cursor cur=db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where isMsgToRestartPopUpShown='1' AND isRestartDoneByDSR='1' AND UniqueID=(SELECT MAX(UniqueID) FROM tblsameLocationForStoreRestartDone)",null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{
					storeShowPopUpForResartAndDone=cur.getString(0);
				}

			}
			else
			{
				cur.close();
				Cursor cursor=db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where isMsgToRestartPopUpShown='1' AND isRestartDoneByDSR='0' AND UniqueID=(SELECT MAX(UniqueID) FROM tblsameLocationForStoreRestartDone)",null);
				if(cursor.getCount()>0)
				{
					if(cursor.moveToFirst())
					{
						storeShowPopUpForResartAndDone=cursor.getString(0);
					}

				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			close();
			return storeShowPopUpForResartAndDone;
		}

	}
	public void updateisRestartDoneByDSR(String prvsStoreId)
	{
		open();
		ContentValues values=new ContentValues();
		values.put("isRestartDoneByDSR","1");
		db.update(DATABASE_TABLE_tblSameLocationForStoreRestartDone,values,"prvsStoreID=?",new String[]{prvsStoreId});
		close();
	}
	public void updateCurrentStoreId(String crntStoreID, String prvsStoreId)
	{
		open();
		ContentValues values=new ContentValues();
		values.put("CrntStoreID",crntStoreID);
		db.update(DATABASE_TABLE_tblSameLocationForStoreRestartDone,values,"prvsStoreID=?",new String[]{prvsStoreId});
		close();
	}
	public String getPreviousStoreId()
	{
		String prvsStoreId="";
		open();
		try {
			Cursor cursor=db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where UniqueID=(SELECT MAX(UniqueID) FROM tblsameLocationForStoreRestartDone)",null);
			if(cursor.getCount()>0)
			{
				if(cursor.moveToFirst())
				{
					prvsStoreId=cursor.getString(0);
				}

			}
		}catch (Exception e)
		{
			e.printStackTrace();
		}
		finally {
			close();
			return prvsStoreId;
		}

	}

	public String getPreviousShownPopUpStoreId()
	{
		String prvsStoreId="";
		open();
		try {
			Cursor cursor=db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where UniqueID=(SELECT MAX(UniqueID) FROM tblsameLocationForStoreRestartDone) AND isMsgToRestartPopUpShown='1'",null);
			if(cursor.getCount()>0)
			{
				if(cursor.moveToFirst())
				{
					prvsStoreId=cursor.getString(0);
				}

			}
		}catch (Exception e)
		{

		}
		finally {
			close();
			return prvsStoreId;
		}

	}



	private void fnDeleteFlgStoreUnusedPrvs(String MsgToRestartPopUpShown) {
		try {
			db.execSQL("DELETE FROM tblsameLocationForStoreRestartDone WHERE isMsgToRestartPopUpShown='"+ MsgToRestartPopUpShown + "'");// and sectionID="+sectionID
		}
		catch (Exception e)
		{

		}


	}


	public String[] getAllStoreIDIntblNewAddedStorePhotoDetail()
	{

		int SnamecolumnIndex1 = 0;


		Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tableImage where Sstat=5", null);
		//Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
		try
		{
			String StoreName[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
					cursor.moveToNext();
				}
			}

			return StoreName;
		}
		finally
		{
			cursor.close();
		}

	}

	public int getExistingPicNosForNewAddedStore(String StoreID)
	{

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tableImage where StoreID='" + StoreID + "'", null);
		try {
			int strProdStockQty = 0;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					if (!cursor.isNull(ScodecolumnIndex)) {
						strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex));
						cursor.moveToNext();
					}

				}
			}
			return strProdStockQty;
		} finally {
			cursor.close();
		}
	}

	public String[] getImgsPathForNewAddedStore(String StoreID)
	{

		int SnamecolumnIndex1 = 0;

		Cursor cursor = db.rawQuery("SELECT imageName FROM tableImage WHERE StoreID ='"+ StoreID + "'", null);
		try
		{

			String StoreName[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{

					StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}

	}

	public void updateImageRecordsSyncdForNewAddedStore(String PhotoName)
	{

		try
		{
			open();
			//System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
			final ContentValues values = new ContentValues();
			values.put("Sstat", 4);

			int affected3 = db.update("tableImage", values, "imageName=?",new String[] { PhotoName });
		}
		catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}
		finally
		{
			close();
		}


	}

	public LinkedHashMap<String, LinkedHashMap<String, String>> fetchTblRowSummary()
	{
		LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
		LinkedHashMap<String, LinkedHashMap<String, String>> hmapCatgryAll = new LinkedHashMap<>();

		Cursor cursor = db.rawQuery("SELECT DISTINCT TableNo FROM tblAllSummaryDay", null);
		try {
			String allData[]=new String[cursor.getCount()];
			if (cursor.moveToFirst()) {

				for (int i = 0; i < cursor.getCount(); i++)
				{
					allData[i] = (String) cursor.getString(0).trim();

					hmapCatgry=fetch_Summary_Detail_DayData(allData[i]);
					hmapCatgryAll.put(allData[i],hmapCatgry);
					cursor.moveToNext();

				}

			}
			////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
			return hmapCatgryAll;
		} finally {
			cursor.close();
		}

	}


//nitika

	private LinkedHashMap<String, String> fetch_Summary_Detail_DayData(String TableNo)
	{
//		open();
		LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
		try
		{
			Cursor cursor = db.rawQuery("SELECT Measures,TodaysSummary,MTDSummary,ColorCode FROM tblAllSummaryDay WHERE TableNo='"+TableNo+"'",null);

			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						hmapCatgry.put(cursor.getString(0), cursor.getString(1) +"^"+ cursor.getString(2) +"^"+ cursor.getString(3));
						cursor.moveToNext();
					}
				}

			}

			return hmapCatgry;
		}
		finally
		{
//			cursor.close();
//			close();
		}
	}
	//nitika
	public long savetblAllSummaryDayAndMTD(int AutoId,String Measures,String TodaysSummary,String MTDSummary, String TableNo,String ColorCode)
	{
//table tblAllSummaryDay (AutoId int not null,Measures text null," +
		//"TodaysSummary text null,MTDSummary text null , TableNo text not null,ColorCode text not null);";

		ContentValues initialValues = new ContentValues();

		initialValues.put("AutoId", AutoId);
		initialValues.put("Measures", Measures.trim());
		initialValues.put("TodaysSummary", TodaysSummary.trim());
		initialValues.put("MTDSummary", MTDSummary.trim());

		initialValues.put("TableNo", TableNo.trim());
		initialValues.put("ColorCode", ColorCode.trim());

		long value= db.insert(DATABASE_TABLE_DayAndSummary, null, initialValues);
		System.out.println("Inserted ; "+value);
		return value;
	}

	//nitika
	public void truncateAllSummaryDayDataTable()
	{
		db.execSQL("DELETE FROM tblAllSummaryDay");

	}

	public void updateFlgCrediBal(String storeId,int flgCreditRetailBal)
	{
		//flgRetailerCreditBalnce
		// tblStoreList(StoreID text not null, StoreType string not null, StoreName string not null, StoreLatitude real not null, StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not null, Sstat integer not null, ForDate string not null, ActualLatitude text null, ActualLongitude text null, VisitStartTS text null, VisitEndTS text null,AutoIdStore int null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreClose integer null,StoreNextDay integer null,chainID integer null,ISNewStore int null,StoreRouteID int null,RouteNodeType int null,StoreCatNodeId int null,IsNewStoreDataCompleteSaved int null,flgFromWhereSubmitStatus int null,StoreAddress text null,PaymentStage text null,flgHasQuote int null,flgAllowQuotation int null,flgSubmitFromQuotation int null,flgGSTCapture text null,flgGSTCompliance text null,GSTNumber text null,flgGSTRecordFromServer int null,DistanceNear int null,flgLocationServicesOnOff int null,flgGPSOnOff int null,flgNetworkOnOff int null,flgFusedOnOff int null,flgInternetOnOffWhileLocationTracking int null,flgRestart int null,flgStoreOrder int null,StoreCity text null,StorePinCode text not null,StoreState text null,flgRetailerCreditBalnce text null);";
		open();
		try{

			ContentValues values=new ContentValues();
			values.put("flgRetailerCreditBalnce",flgCreditRetailBal);

			db.update(DATABASE_TABLE_MAIN13,values,"StoreID=?",new String[]{storeId});

		}catch(Exception e)
		{

		}
		finally
		{
			close();
		}

	}

	public boolean isFlgCrediBalSubmitted(String storeId)
	{
		boolean isRtalrCreditBalSbmtd=false;
		open();
		try {

			Cursor cur=db.rawQuery("Select flgRetailerCreditBalnce from tblStoreList where StoreID='"+storeId+"' AND flgRetailerCreditBalnce<>-1",null);
			if(cur.getCount()>0)
			{
				isRtalrCreditBalSbmtd=true;
			}
		}
		catch(Exception e)
		{

		}
		finally
		{
			close();
			return isRtalrCreditBalSbmtd;
		}
	}
	//(PrdctId text not null,OrderQntty text ,DistributorNodeIdNodeType text null);";
	public void insertDistributorStock(String prdctId,String stockQntty,String distributorNodeIdNodeType)
	{
		open();

		ContentValues  values=new ContentValues();
		values.put("PrdctId",prdctId);
		values.put("StockQntty",stockQntty);
		values.put("DistributorNodeIdNodeType",distributorNodeIdNodeType);
		int netStock = getLeftProductQantity(Integer.parseInt(stockQntty),distributorNodeIdNodeType,prdctId);

		values.put("OriginalStock",String.valueOf(netStock));




		db.insert(DATABASE_TABLE_DISTRIBUTOR_STOCK,null,values);
		close();
	}

	public void updateOriginalStock(LinkedHashMap<String,Integer> hmapProductStock,String distId)
	{
		open();
		for(Map.Entry<String,Integer> entry:hmapProductStock.entrySet())
		{
			ContentValues values=new ContentValues();
			System.out.println("hmapProductStock = "+entry.getKey()+" : "+entry.getValue());
			values.put("OriginalStock",String.valueOf(entry.getValue()));
			db.update(DATABASE_TABLE_DISTRIBUTOR_STOCK,values,"DistributorNodeIdNodeType=? AND PrdctId=?", new String[]{distId,entry.getKey()});
		}

		close();
	}

	public void insertDistributorLeftOrderId(String distributorNodeIdNodeType,String orderId)
	{
		open();

		ContentValues values=new ContentValues();

//tblDistributorProductLeft(DistributorNodeIdNodeType text null,OrderId text null,ProductId text null,OrderQntty text null);";
		values.put("DistributorNodeIdNodeType",distributorNodeIdNodeType);
		values.put("OrderId",orderId);

		db.insert(DATABASE_TABLE_DISTRIBUTOR_LEFTPRODUCT,null,values);


		close();
	}

	public String getDstBIDOrderId()
	{
		open();
		String distIDOrderId="";
		//tblDistributorOrderPdaId(DistributorNodeIdNodeType text null,OrderPDAID text null,ProductId text null,OrderQntty text null,Sstat integer not null);";
		try {
			Cursor cur=db.rawQuery("Select DISTINCT DistributorNodeIdNodeType,OrderPDAID from tblDistributorOrderPdaId",null);
			if(cur.getCount()>0)
			{
				StringBuilder sb=new StringBuilder();
				if(cur.moveToFirst())
				{
					for(int i=0;i<cur.getCount();i++)
					{
						if(i==0)
						{
							sb.append(cur.getString(0)).append("|").append(cur.getString(1));
						}
						else
						{
							sb.append("^").append(cur.getString(0)).append("|").append(cur.getString(1));
						}
						cur.moveToNext();
					}
				}
				distIDOrderId=sb.toString();
			}
		}
		catch(Exception e)
		{

		}
		finally
		{
			close();
			return distIDOrderId;
		}

	}
	public void insertDistributorPDAOrderId(String distributorNodeIdNodeType,String orderId,String productId,String orderQntty,int Sstat)
	{
		//tblDistributorOrderPdaId(DistributorNodeIdNodeType text null,OrderPDAID text null,ProductId text null,OrderQntty text null,Sstat integer not null);";
		open();

        Cursor cur=db.rawQuery("Select DistributorNodeIdNodeType from tblDistributorOrderPdaId where OrderPDAID='"+orderId+"' AND ProductId='"+productId+"' AND DistributorNodeIdNodeType='"+distributorNodeIdNodeType+"'",null);
		ContentValues values=new ContentValues();
		values.put("Sstat",Sstat);

		values.put("OrderQntty",orderQntty);
		if(cur.getCount()>0)
		{
            if(cur!=null)
            {
                cur.close();
            }
			db.update(DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID,values,"OrderPDAID=? AND DistributorNodeIdNodeType=? AND ProductId=?",new String[]{orderId,distributorNodeIdNodeType,productId});
		}
		else
		{

			values.put("ProductId",productId);

			values.put("DistributorNodeIdNodeType",distributorNodeIdNodeType);
			values.put("OrderPDAID",orderId);

			long insertd=db.insert(DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID,null,values);
			System.out.println("Nitish Entered = "+insertd);
		}

		close();
	}

	public void deleteExistStockTable(String distributorNodeIdNodeType,String orderId,String ProductId)
	{
		open();
		Cursor cur=db.rawQuery("Select DistributorNodeIdNodeType from tblDistributorOrderPdaId where OrderPDAID='"+orderId+"' AND DistributorNodeIdNodeType='"+distributorNodeIdNodeType+"' AND ProductId='"+ProductId+"'",null);
		if(cur.getCount()>0)
		{
			db.delete(DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID,"DistributorNodeIdNodeType=? AND OrderPDAID=? AND ProductId=?",new String[]{distributorNodeIdNodeType, orderId, ProductId});
		}
		close();
	}

	public LinkedHashMap<String,String> getProductStock(String orderPDAId,String distId)
	{
		open();
		LinkedHashMap<String,String> hmapPrdctStock= new LinkedHashMap<>();
		Cursor cur=db.rawQuery("Select ProductId,OrderQntty from tblDistributorOrderPdaId where DistributorNodeIdNodeType='"+distId+"' AND OrderPDAID='"+orderPDAId+"'",null);
		if(cur.getCount()>0)
		{
			if(cur.moveToFirst())
			{
				for(int i=0;i<cur.getCount();i++)
				{
					hmapPrdctStock.put(cur.getString(0),cur.getString(1));
					cur.moveToNext();
				}
			}
		}
		close();
		return hmapPrdctStock;
	}

	public void deleteCompleteDataDistStock()
	{

		db.execSQL("DELETE FROM tblDistributorStock");
		db.execSQL("DELETE FROM tblDistributorProductLeft");
		db.execSQL("DELETE FROM tblDistributorOrderPdaId");

	}

	public LinkedHashMap<String,Integer> getDistStockCount(String distId)
	{
		// tblDistributorStock(PrdctId text null,StockQntty text null,DistributorNodeIdNodeType text null);";
		LinkedHashMap<String,Integer> hmapDistPrdctStockCount=new LinkedHashMap<>();
		open();
		try {
			Cursor cur=db.rawQuery("Select PrdctId,OriginalStock from tblDistributorStock where DistributorNodeIdNodeType='"+distId+"'",null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{
					for(int i=0;i<cur.getCount();i++)
					{
						hmapDistPrdctStockCount.put(cur.getString(0),Integer.parseInt(cur.getString(1)));
						cur.moveToNext();
					}
				}


			}



		} catch(Exception e)
		{

		}

		finally
		{
			return hmapDistPrdctStockCount;
		}


	}

	private int getLeftProductQantity(int stockCount, String distId, String PrdctId)
	{
		int netStock=0;
		//tblStoreProdcutPurchaseDetails (IMEIno text not null,RouteID int null,StoreID text not null,CatID text  null,ProdID text not null,TransDate string not null,Stock integer not null,OrderQty integer not null,OrderVal real not null,FreeQty integer not null,DisVal real not null,Sstat integer not null,SampleQuantity int null,ProductShortName text null,ProductPrice real null, TaxRate real null,TaxValue real null,StoreCatNodeId int null,OrderIDPDA text null,flgIsQuoteRateApplied int null,distibutorID text null);";
		try {
			boolean isPrdctFound=false;
			Cursor cur=db.rawQuery("Select tblStoreProdcutPurchaseDetails.ProdID , tblStoreProdcutPurchaseDetails.OrderQty from tblStoreProdcutPurchaseDetails inner join tblDistributorProductLeft ON tblStoreProdcutPurchaseDetails.OrderIDPDA=tblDistributorProductLeft.OrderId where tblStoreProdcutPurchaseDetails.distibutorID='"+distId+"'",null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{
					for(int i=0;i<cur.getCount();i++)
					{
						if(PrdctId.equals(cur.getString(0)))
						{
							netStock=stockCount-Integer.parseInt(cur.getString(1));
							stockCount=netStock;
							isPrdctFound=true;

						}



						cur.moveToNext();
					}
				}
			}
			else
			{
				netStock=stockCount;
			}

			if(!isPrdctFound){
				netStock=stockCount;
			}

		}
		catch (Exception e)
		{
			Log.e("Error",e.toString() );
		}finally {
			{
				return netStock;
			}
		}


	}

	public String getDisId(String storeId)
	{
		open();
		String dbstID="";
		try {


			Cursor cur=db.rawQuery("Select DBR from tblStoreList where StoreID='"+storeId+"'",null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{
					if(!cur.getString(0).equals("0"))
					{
						dbstID=cur.getString(0);
					}
				}
			}
		} catch(Exception e)
		{

		}
		finally
		{
			close();
			return dbstID;
		}
	}


	public void updateRtlrCrdtBal(String storeId)
	{
		ContentValues values=new ContentValues();
		values.put("flgRetailerCreditBalnce",-1);
		try {
			db.update(DATABASE_TABLE_MAIN13,values,"StoreID=?",new String[]{storeId});
		}catch (Exception e)
		{

		}

	}


	public void deleteOrderId(String orderId)
	{
		//"Select DistributorNodeIdNodeType from tblDistributorOrderPddb.insert(DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID,null,values);
		Cursor cur=db.rawQuery("Select DistributorNodeIdNodeType from tblDistributorOrderPdaId where OrderPDAID='"+orderId+"'",null);
		if(cur.getCount()>0)
		{
			db.delete(DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID,"OrderPDAID=?",new String[]{orderId});
		}
	}
	public String[] getAllDSRSignatureAndSelfi()
	{

		int SnamecolumnIndex1 = 0;


		Cursor cursor = db.rawQuery("SELECT DISTINCT(IMEI) FROM tblSoRegDetails", null);
		//Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
		try
		{
			String StoreName[] = new String[cursor.getCount()];
if(cursor.getCount()>0)
{
	if (cursor.moveToFirst())
	{
		for (int i = 0; i <= (cursor.getCount() - 1); i++)
		{
			StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
			cursor.moveToNext();
		}
	}

}

			return StoreName;
		}
		finally
		{
			cursor.close();
		}

	}



	public int getExistingPicNosForSignatureAndSelfi()
	{

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT ifnull(SelfiePath,''),ifnull(SignPath,'') FROM tblSoRegDetails", null);
		try {
			int strProdStockQty = 0;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					if (!cursor.isNull(ScodecolumnIndex)) {
						if(!cursor.getString(ScodecolumnIndex).equals(""))
						{
							strProdStockQty=1;
						}
						if(!cursor.getString(1).equals(""))
						{
							strProdStockQty=2;
						}
						///strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
						cursor.moveToNext();
					}

				}
			}
			return strProdStockQty;
		} finally {
			cursor.close();
		}
	}

	public String[] getImgsPathForSignatureAndSelfi()
	{

		int SnamecolumnIndex1 = 0;

		Cursor cursor = db.rawQuery("SELECT ifnull(SelfieName,''),ifnull(SignName,'') FROM tblSoRegDetails", null);
		try
		{

			String StoreName[] = new String[cursor.getCount()+1];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					if(!cursor.getString(SnamecolumnIndex1).equals(""))
					{
						StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
					}
					if(!cursor.getString(1).equals(""))
					{
						StoreName[1] = (String) cursor.getString(1);
					}

					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}

	}



	public void updateImageRecordsSyncdForDSRRegistrationAndSelfi()
	{

		try
		{
			open();
			db.execSQL("Update tblSoRegDetails SET Sstat=4");

		}
		catch (Exception ex)
		{
			Log.e(TAG, ex.toString());
		}
		finally
		{
			close();
		}


	}

	public void UpdateDistributerFlag(String DistribtrUniqueId, int flag2set)
	{

		try
		{
			final ContentValues values = new ContentValues();
			values.put("Sstat", flag2set);
			int affected = db.update("tblDistributorMapping", values, "DistribtrUniqueId=?",new String[] { DistribtrUniqueId });
		}
		catch (Exception ex)
		{
			String ex1=ex.getMessage();
		}

	}



	private String fngetDIdAndDType(String DistribtrUniqueId)
	{

		String flgCheckIfStoreExists="0^0";
		//tblStoreDetails(StoreID
		Cursor cursor2 = db.rawQuery("SELECT DistribtrId,DistributorNodeType FROM tblDistributorMapping WHERE tblDistributorMapping.DistribtrUniqueId='"+DistribtrUniqueId+"'", null);
		try {
			if(cursor2.getCount()>0)
			{
				if(cursor2.moveToFirst())
				{

					flgCheckIfStoreExists=(String) cursor2.getString(0) +"^"+(String) cursor2.getString(1);

				}
			}
		}
		catch(Exception e)
		{
			String ex1=e.getMessage();
		}
		finally {
			cursor2.close();

		}
		return flgCheckIfStoreExists;
	}

	public void fnupdateDisributorMstrLocationtrackRemapFlg(String DistribtrUniqueId)
	{
		open();
		String DIdAndDType=fngetDIdAndDType(DistribtrUniqueId);
		db.execSQL("UPDATE tblDistribtorMstr SET flgRemap=0 WHERE tblDistribtorMstr.DBRNodeID='"+DIdAndDType.split(Pattern.quote("^"))[0]+"' AND tblDistribtorMstr.DistributorNodeType='"+DIdAndDType.split(Pattern.quote("^"))[1]+"'");
		close();

	}


	public void Delete_tblDistributorMstr()
	{
		db.execSQL("DELETE FROM tblDistribtorMstr");
	}

	//map distributor
	public long  saveDistributorMstrData(int DBRNodeID, int DistributorNodeType, String Distributor, int flgRemap,
                                         String ContactNumber,String EmailID)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("DBRNodeID", DBRNodeID);
		initialValues.put("DistributorNodeType", DistributorNodeType);
		initialValues.put("Distributor", Distributor.trim());
		initialValues.put("flgRemap", flgRemap);   //0=Not To be mapped Again,1=Can Map Distributor

        initialValues.put("ContactNumber", ContactNumber);
        initialValues.put("EmailID", EmailID.trim());

        return db.insert(TABLE_tblDistribtorMstr, null, initialValues);
	}

	public void deletetblStoreList()
	{
		open();
		db.execSQL("DELETE FROM tblStoreList");
		close();


	}

	public String[] SaveStoreList()
	{

		int LoncolumnIndex = 0;
		int LoncolumnIndex2 = 1;

		Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList WHERE Sstat = 1 or Sstat = 3",null);
		try
		{
			String strAreaIdsDetais[] = new String[cursor2.getCount()];
			////// System.out.println("records count[ProcessStoreReq]: "+cursor2.getCount());
			if (cursor2.moveToFirst())
			{
				for (int i = 0; i < cursor2.getCount(); i++)
				{
					strAreaIdsDetais[i] = (String) cursor2.getString(LoncolumnIndex)+ "%"+ (String) cursor2.getString(LoncolumnIndex2);

					////// System.out.println("VAL1: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"VAL2: "+(String) cursor2.getString(LoncolumnIndex2));
					cursor2.moveToNext();
				}

			}
			return strAreaIdsDetais;
		}
		finally
		{
			cursor2.close();
		}

	}

	public LinkedHashMap<String, String> fetch_Route_List()
	{
		open();
		LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
		//Cursor cursor = db.rawQuery("SELECT ID,RouteType,Descr FROM tblRouteMstr ",null);
        Cursor cursor = db.rawQuery("SELECT ID,RouteType,Descr FROM tblRouteMstr where CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"'",null);
		//Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr where CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"'", null);

		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
											/*if(i==0)
											{
												hmapCatgry.put("Select Manager", "00");
											}*/
						hmapCatgry.put(cursor.getString(2), cursor.getString(0) +"_"+ cursor.getString(1));
						cursor.moveToNext();
					}
				}

			}

			else
			{
				hmapCatgry.put("No Routes", "0");
			}
			return hmapCatgry;
		}
		finally
		{
			cursor.close();
			close();
		}
	}
	//Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList WHERE Sstat = 1 ",null);

	public int checkDSRCheckIntblDistributorMapping()
	{
		int chkI = 0;
		open();
		Cursor cursorE2=null;

		try
		{
			//cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblDistributorMapping WHERE Sstat =4", null);
			cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblDistributorMapping", null);
			if (cursorE2.moveToFirst())
			{

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}
			//chkI=checkDSRCheckIntblDistributorSavedData();

		} finally
		{
			cursorE2.close();
			close();
		}
		return chkI;
	}

	public int checkDSRCheckIntblDistributorSavedData()
	{
		int chkI = 0;
		Cursor cursorE2=null;

		try
		{
			cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblDistributorSavedData WHERE Sstat =4", null);
			if (cursorE2.moveToFirst())
			{

				if (cursorE2.getInt(0) > 0) {
					chkI = 1;
				} else {
					chkI = 0;
				}
			}

		} finally
		{
			cursorE2.close();

		}
		return chkI;
	}



    public String GetActiveRouteDescrBasedCoverageIDandNodeTyep()
    {
        int LoncolumnIndex = 0;

        open();
        Cursor cursor2 = null;
        try
        {
           cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr WHERE CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"' and flgTodayRoute = 1 Limit 1", null);

           // cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);

            String activeRouteID = "0";
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++)
                {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            if(activeRouteID.equals("0"))
            {
                activeRouteID=GetNoActiveRouteDescrBasedCoverageIDandNodeTyep();
            }
            return activeRouteID;
        } finally {
            cursor2.close();
            close();
        }

    }

    private String GetNoActiveRouteDescrBasedCoverageIDandNodeTyep()
    {
        int LoncolumnIndex = 0;

        open();
        Cursor cursor2 = null;
        try
        {
            cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr WHERE CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"' and flgTodayRoute = 0 Limit 1", null);

            // cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);

            String activeRouteID = "0";
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++)
                {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            if(activeRouteID.equals("0"))
            {

            }
            return activeRouteID;
        } finally {
            cursor2.close();
            close();
        }

    }


    public String GetActiveRouteDescr()
	{
		int LoncolumnIndex = 0;

		open();
		Cursor cursor2 = null;
		try
		{
			cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);

			String activeRouteID = "0";
			if (cursor2.moveToFirst()) {

				for (int i = 0; i < cursor2.getCount(); i++)
				{
					activeRouteID = cursor2.getString(LoncolumnIndex);
					cursor2.moveToNext();

				}

			}
			return activeRouteID;
		} finally {
			cursor2.close();
			close();
		}

	}

	public String[] FetchStoreRouteIdType(String rID)
	{
		int ScodecolumnIndex = 0;
		int SnamecolumnIndex = 1;

		Cursor cursor = db.rawQuery("SELECT StoreRouteID, RouteNodeType FROM tblStoreList where StoreRouteID='"+ rID +"'   ORDER BY DistanceNear", null);
		//Cursor cursor = db.rawQuery("SELECT StoreRouteID, RouteNodeType FROM tblStoreList ORDER BY DistanceNear", null);
		try
		{
			String StoreName[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex) + "_"+ (String) cursor.getString(SnamecolumnIndex);
					cursor.moveToNext();
				}

			}
			return StoreName;
		}
		finally
		{
			cursor.close();
		}

	}

	public String fnGetPersonNodeIDAndPersonNodeTypeForSO()
	{
		String SONodeIdAndNodeType="0^0";

		open();

		Cursor cursor=db.rawQuery("Select CoverageAreaNodeID,CoverageAreaNodeType from tblUserAuthenticationMstr", null);

		if(cursor.getCount()>0)
		{
			if(cursor.moveToFirst())
			{
				SONodeIdAndNodeType=cursor.getString(0)+"^"+cursor.getString(1);
			}
		}
		close();
		return SONodeIdAndNodeType;
	}

	public LinkedHashMap<String, String> fetch_MarktVisitDSM_List()
	{
		open();
		LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
		Cursor cursor = db.rawQuery("SELECT ID,Descr FROM tblRouteMstr",null);
		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					hmapCatgry.put("Select DSR", "0");
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						hmapCatgry.put(cursor.getString(1), cursor.getString(0));
						cursor.moveToNext();
					}
				}

			}
			else
			{
				hmapCatgry.put("No DSR", "0");
			}
			return hmapCatgry;
		}
		finally
		{
			cursor.close();
			close();
		}
	}


	// SO Function Start

	public long savetblDSRCoverageMaster(String CoverageAreaNodeID, String CoverageAreaNodeType, String CoverageArea,
										 String PersonNodeID, String PersonNodeType,String PersonName)
	{
		ContentValues initialValues = new ContentValues();

		initialValues.put("CoverageAreaNodeID", CoverageAreaNodeID);
		initialValues.put("CoverageAreaNodeType", CoverageAreaNodeType);
		initialValues.put("CoverageArea", CoverageArea);
		initialValues.put("PersonNodeID", PersonNodeID);
		initialValues.put("PersonNodeType", PersonNodeType);
		initialValues.put("PersonName", PersonName);


		return db.insert(Table_tblDSRCoverageMaster_Define, null, initialValues);
	}

	public String fnGetDSRNodeIdAndNodeType(String CoverageArea)
	{
		String SONodeIdAndNodeType="0^0";

		open();

		Cursor cursor=db.rawQuery("Select CoverageAreaNodeID,CoverageAreaNodeType from tblDSRCoverageMaster where CoverageArea='"+CoverageArea+"'", null);

		if(cursor.getCount()>0)
		{
			if(cursor.moveToFirst())
			{
				SONodeIdAndNodeType=cursor.getString(0)+"^"+cursor.getString(1);
			}
		}
		close();
		return SONodeIdAndNodeType;
	}

	public String fnGetDSRPersonNodeIdAndNodeType(String CoverageArea)
	{
		String SONodeIdAndNodeType="0^0";

		open();

		Cursor cursor=db.rawQuery("Select PersonNodeID,PersonNodeType from tblDSRCoverageMaster where CoverageArea='"+CoverageArea+"'", null);

		if(cursor.getCount()>0)
		{
			if(cursor.moveToFirst())
			{
				SONodeIdAndNodeType=cursor.getString(0)+"^"+cursor.getString(1);
			}
		}
		close();
		return SONodeIdAndNodeType;
	}

	public String  fetch_DSRCoverage_Name(int  PersonNodeID,int PersonNodeType)
	{
		open();
		String CoverageArea="No DSR";
		Cursor cursor = db.rawQuery("SELECT CoverageArea FROM tblDSRCoverageMaster where PersonNodeID='"+PersonNodeID+"' and PersonNodeType='"+PersonNodeType+"'",null);
		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						CoverageArea= cursor.getString(0);
						cursor.moveToNext();
					}
				}

			}


			return CoverageArea;
		}
		finally
		{
			cursor.close();
			close();
		}
	}

	public String getDistributorName(int DBRNodeID,int DistributorNodeType)
	{
		String strStoreTypeNamesDetais ="Distributor Name";
		try {

			open();
			//create table tblDistribtorMstr (DBRNodeID int null,DistributorNodeType int null,Distributor text null, flgRemap int null);
			Cursor cursor2 = db.rawQuery("SELECT Distributor FROM tblDistribtorMstr where DBRNodeID='"+DBRNodeID+"' and DistributorNodeType='"+DistributorNodeType+"'",null);

			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst())
				{
					for (int i = 0; i < cursor2.getCount(); i++)
					{

						strStoreTypeNamesDetais = cursor2.getString(0);
						cursor2.moveToNext();
					}
				}
			}

			return strStoreTypeNamesDetais;
		} finally {
			close();
		}
	}






	// SO Function start
	public LinkedHashMap<String, String> fetch_CoverageArea_List(int flgForReportOrStoreListActivity)
	{
		open();
		LinkedHashMap<String, String> hmapCoverageArea = new LinkedHashMap<>();
		Cursor cursor = db.rawQuery("SELECT CoverageAreaNodeID,CoverageArea FROM tblCoverageMaster",null);
		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						if(i==0)
						{
							if(flgForReportOrStoreListActivity==0) {
								hmapCoverageArea.put("All DSR/Coverage Area", "0");
							}
							if(flgForReportOrStoreListActivity==1) {
								hmapCoverageArea.put("All DSR/Coverage Area", "0");
							}
						}
						hmapCoverageArea.put(cursor.getString(1), cursor.getString(0));
						cursor.moveToNext();
					}
				}

			}

			else
			{
				// hmapFSO.put("All FSO's Stores List", "0");
				if(flgForReportOrStoreListActivity==0) {
					hmapCoverageArea.put("All DSR/Coverage Area", "0");
				}
				if(flgForReportOrStoreListActivity==1) {
					hmapCoverageArea.put("All DSR/Coverage Area", "0");
				}
			}
			return hmapCoverageArea;
		}
		finally
		{
			cursor.close();
			close();
		}
	}

	public LinkedHashMap<String, String> fetch_Route_List(int flgForReportOrStoreListActivity)
	{
		open();
		LinkedHashMap<String, String> hmapRoute = new LinkedHashMap<>();
		Cursor cursor = db.rawQuery("SELECT RouteID,Route FROM tblRouteMasterWithCoverageMapping",null);
		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						if(i==0)
						{
							if(flgForReportOrStoreListActivity==0) {
								hmapRoute.put("All Beats", "0");
							}
							if(flgForReportOrStoreListActivity==1) {
								hmapRoute.put("All Beats", "0");
							}
						}
						hmapRoute.put(cursor.getString(1), cursor.getString(0));
						cursor.moveToNext();
					}
				}

			}

			else
			{
				// hmapFSO.put("All FSO's Stores List", "0");
				if(flgForReportOrStoreListActivity==0) {
					hmapRoute.put("All Beats", "0");
				}
				if(flgForReportOrStoreListActivity==1) {
					hmapRoute.put("All Beats", "0");
				}
			}
			return hmapRoute;
		}
		finally
		{
			cursor.close();
			close();
		}
	}

	public LinkedHashMap<String, String> fetch_CoverageRouteMap_List(int flgForReportOrStoreListActivity,int CoverageAreaNodeID)
	{
		open();
		LinkedHashMap<String, String> hmapCoverageRouteMap_details = new LinkedHashMap<>();
		Cursor cursor=null;
		if(CoverageAreaNodeID==0)
		{
			cursor = db.rawQuery("SELECT RouteID,Route FROM tblRouteMasterWithCoverageMapping",null);
		}
		else
		{
			cursor = db.rawQuery("SELECT RouteID,Route FROM tblRouteMasterWithCoverageMapping WHERE CoverageAreaNodeID="+CoverageAreaNodeID,null);
		}

		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						if(i==0)
						{
							if(flgForReportOrStoreListActivity==0) {
								hmapCoverageRouteMap_details.put("All Beats", "0");
							}
							if(flgForReportOrStoreListActivity==1) {
								hmapCoverageRouteMap_details.put("All Beats", "0");
							}
						}
						hmapCoverageRouteMap_details.put(cursor.getString(1), cursor.getString(0));
						cursor.moveToNext();
					}
				}

			}

			else
			{
				// hmapFSO.put("All FSO's Stores List", "0");
				if(flgForReportOrStoreListActivity==0) {
					hmapCoverageRouteMap_details.put("All Beats", "0");
				}
				if(flgForReportOrStoreListActivity==1) {
					hmapCoverageRouteMap_details.put("All Beats", "0");
				}
			}
			return hmapCoverageRouteMap_details;
		}
		finally
		{
			cursor.close();
			close();
		}
	}
	public String getChannelGroupIdOptIdForAddingStore()
	{
		String grpQstIdOptIdForChannel="0-0-0";

		open();
		try {

//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
			Cursor cur=db.rawQuery("Select OptID from tblQuestIDForOutChannel", null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{

					grpQstIdOptIdForChannel=cur.getString(0);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return grpQstIdOptIdForChannel;
		}
	}
	public int fnCheckTableFlagValue(String tableName,String Columnname)
	{
		int count=0;
		open();
		try {
			Cursor cursor = db.rawQuery("SELECT "+Columnname+" FROM "+tableName+"", null);
			ContentValues initialValues = new ContentValues();
			if(cursor.getCount()>0) {
				cursor.moveToFirst();
				count = cursor.getInt(0);
			}
		}
		catch(Exception ex)
		{
			String ex1=ex.getMessage();
		}
		finally {
			close();
		}
		return count;
	}
    public LinkedHashMap<String, String> fnGeStoreListAllForSO(int CoverageAreadID,int RouteID)
    {
        LinkedHashMap<String, String> hmapStoreLisMstr=new LinkedHashMap<String, String>();
        open();




        try {
            Cursor cursor=null;
            if(CoverageAreadID==0 && RouteID==0)
            {
                cursor = db.rawQuery("SELECT StoreID,StoreName,DateAdded,CoverageAreaID,RouteNodeID,StoreCategoryType,StoreSectionCount,flgApproveOrRejectOrNoActionOrReVisit,Sstat,flgOldNewStore,flgRemap,flgSelfStoreNode from tblPreAddedStores Where  Sstat<>4  ORDER BY DistanceNear", null);
            }
            else if(CoverageAreadID!=0 && RouteID!=0)
            {
                cursor = db.rawQuery("SELECT StoreID,StoreName,DateAdded,CoverageAreaID,RouteNodeID,StoreCategoryType,StoreSectionCount,flgApproveOrRejectOrNoActionOrReVisit,Sstat,flgOldNewStore,flgRemap,flgSelfStoreNode from tblPreAddedStores WHERE CoverageAreadID="+CoverageAreadID+" AND RouteID="+RouteID+" and Sstat<>4 ORDER BY DistanceNear", null);//
            }
            else if(CoverageAreadID!=0 && RouteID==0)
            {
                cursor = db.rawQuery("SELECT StoreID,StoreName,DateAdded,CoverageAreaID,RouteNodeID,StoreCategoryType,StoreSectionCount,flgApproveOrRejectOrNoActionOrReVisit,Sstat,flgOldNewStore,flgRemap,flgSelfStoreNode from tblPreAddedStores WHERE CoverageAreadID="+CoverageAreadID+" AND Sstat<>4 ORDER BY DistanceNear", null);//
            }
            else if(CoverageAreadID==0 && RouteID!=0)
            {
                cursor = db.rawQuery("SELECT StoreID,StoreName,DateAdded,CoverageAreaID,RouteNodeID,StoreCategoryType,StoreSectionCount,flgApproveOrRejectOrNoActionOrReVisit,Sstat,flgOldNewStore,flgRemap,flgSelfStoreNode from tblPreAddedStores WHERE RouteID="+RouteID+" AND Sstat<>4 ORDER BY DistanceNear", null);//
            }

            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapStoreLisMstr.put((String) cursor.getString(0).toString(),(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()+"^"+(String) cursor.getString(11).toString());
                        cursor.moveToNext();
                    }
                }
            }

        }
        catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= "+e.toString());
        }
        finally
        {

            close();
            return hmapStoreLisMstr;
        }
    }
	public void UpdateStoreDistanceNearSO(String OutletID, int DistanceNear)
	{
		try
		{

			final ContentValues values = new ContentValues();
			values.put("DistanceNear", DistanceNear);
			int affected = db.update("tblPreAddedStores", values, "StoreID=?", new String[]{OutletID});
		}
		catch(Exception e)
		{

		}
		finally
		{

		}

	}
	public int fncheckCountNearByStoreExistsOrNotSO(int DistanceRange)
	{
		int flgCheck=0;
		open();

		try {
			Cursor cursor = db.rawQuery("SELECT Count(*) from tblPreAddedStores", null);
			//StoreID,StoreName,LatCode,LongCode,DateAdded
			if(cursor.getCount()>0) {
				if (cursor.moveToFirst())
				{
					if(cursor.getInt(0)>0)
					{
						flgCheck=1;
					}
				}
			}

		}
		catch (Exception e) {
			System.out.println("Error fnGettblUOMMstr= "+e.toString());
		}
		finally
		{

			close();
			return flgCheck;
		}
	}
	public int getsectionCountWhileAddingStore()
	{
		int sectionCount=0;

		open();
		try {

//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
			Cursor cur=db.rawQuery("Select SectionCount from tblQuestIDForOutChannel", null);
			if(cur.getCount()>0)
			{
				if(cur.moveToFirst())
				{

					sectionCount=cur.getInt(0);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return sectionCount;
		}
	}
	public void fnInsertOrUpdate_tblAllServicesCalledSuccessfull(int flgAllServicesCalledOrNot)
	{
		open();
		try {
			Cursor cursor = db.rawQuery("SELECT * FROM "+ TABLE_tblAllServicesCalledSuccessfull+"" , null);
			ContentValues initialValues = new ContentValues();
			initialValues.put("flgAllServicesCalledOrNot", flgAllServicesCalledOrNot);
			if(cursor.getCount()>0)
			{
				db.execSQL("UPDATE tblAllServicesCalledSuccessfull SET flgAllServicesCalledOrNot="+flgAllServicesCalledOrNot);
			}
			else
			{
				db.insert(TABLE_tblAllServicesCalledSuccessfull, null, initialValues);
			}
		}
		catch(Exception ex)
		{
			String ex1=ex.getMessage();
		}
		finally {
			close();
		}
	}
	public String getUsername()
	{String userName="0"+"^"+"0";

		open();
		try {
			Cursor cur=db.rawQuery("Select UserName from tblUserName", null);

			if(cur.getCount()>0)
			{
				StringBuilder sBuilder=new StringBuilder();
				if(cur.moveToFirst())
				{
					for(int i=0;i<cur.getCount();i++)
					{
						userName=cur.getString(0);
						cur.moveToNext();
					}
				}

			}

		} catch (Exception e) {
			// TODO: handle exception
		} finally
		{
			close();
			return userName;
		}
	}
	public String getTodatAndTotalStores()
	{
		String StoresData="0^0";
		open();
		try {
			Cursor cur=db.rawQuery("Select TotStoreAdded , TodayStoreAdded from tblStoreCountDetails", null);

			if(cur.getCount()>0)
			{
				StringBuilder sBuilder=new StringBuilder();
				if(cur.moveToFirst())
				{
					for(int i=0;i<cur.getCount();i++)
					{
						StoresData=cur.getString(0)+"^"+cur.getString(1);
						cur.moveToNext();
					}
				}

			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return StoresData;
		}
	}
	public void fndeleteSbumittedStoreList(int Sstat)
	{
		//
		open();
		db.execSQL("DELETE FROM tblPreAddedStores WHERE Sstat="+ Sstat);
		db.execSQL("DELETE FROM tblNewStoreSalesQuotePaymentDetails WHERE Sstat="+ Sstat);

		db.execSQL("DELETE FROM tblOutletQuestAnsMstr WHERE Sstat="+ Sstat);



		close();
	}
	public void updateSSttImage(String imageName,int sStat)
	{
		open();
		Cursor cursorImage=db.rawQuery("Select StoreID from tableImage where imageName='"+imageName+"'", null);
		if(cursorImage.getCount()>0)
		{
			ContentValues value=new ContentValues();
			value.put("Sstat", sStat);
			db.update(TABLE_IMAGE, value, "imageName=?", new String[]{imageName});
		}

		close();
	}
	public void fndeleteSbumittedStoreImagesOfSotre(int Sstat)
	{
		//
		open();

		db.execSQL("DELETE FROM tableImage WHERE  Sstat='"+Sstat+"'");
		close();
	}
	public ArrayList<String> getImageDetails(int sStat)
	{
		open();
		ArrayList<String> listImageDetails= new ArrayList<>();
		try {

			//tableImage(tempId text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,Sstat integer null);";
			Cursor cursor=db.rawQuery("Select StoreID,imagePath,imageName from tableImage where Sstat="+sStat, null);

			if(cursor.getCount()>0)
			{
				if(cursor.moveToFirst())
				{
					for(int i=0;i<cursor.getCount();i++)
					{
						listImageDetails.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
						cursor.moveToNext();
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return listImageDetails;
		}
	}
	public ArrayList<String> fnGetDetails_tblStoreDeatilsSO(String StoreID,String StoreName)
	{
		ArrayList<String> arrBasisDetailsAgainstStore= new ArrayList<>();

		open();
		try
		{
			Cursor cursor = db.rawQuery("SELECT StoreName,IFNULL(tblNewStoreSalesQuotePaymentDetails.PymtStageId,'0') AS PaymentStage,IFNULL(StoreAddress,'NA') AS StoreAddress,IFNULL(City,'NA') AS City,IFNULL(PinCode,'NA') AS PinCode,IFNULL(State,'NA') AS State,LatCode,LongCode,Accuracy,SOLatCode,SOLongCode,IsStoreDataCompleteSaved,VisitStartTS,VisitEndTS,flgOldNewStore,flgSelfStoreNode FROM tblPreAddedStores LEFT OUTER JOIN tblNewStoreSalesQuotePaymentDetails on tblPreAddedStores.StoreID=tblNewStoreSalesQuotePaymentDetails.StoreId where tblPreAddedStores.StoreID='" + StoreID+"'", null);
// IFNULL(PymtStageId,0) from tblNewStoreSalesQuotePaymentDetails Where StoreId
			// private static final String DATABASE_CREATE_TABLE_tblPreAddedStores = "create table tblPreAddedStores (StoreID text null,StoreName text null,LatCode text null," +
/*
            "LongCode text null,DateAdded text null,DistanceNear int null,flgOldNewStore int null,CoverageAreaID int null,CoverageAreaType int null," +
                    "RouteNodeID int null,RouteNodeType int null,City text null,State text null,PinCode text null,StoreCategoryType int null,StoreSectionCount int null," +
                    "flgApproveOrRejectOrNoActionOrReVisit int null,SOLatCode text null,SOLongCode text,VisitStartTS text null,VisitEndTS text null," +
                    "LocProvider text null, Accuracy text null, BateryLeftStatus text null,IsStoreDataCompleteSaved int null,PaymentStage text null,flgLocationTrackEnabled integer null," +
                    "flgStoreVisitMode int null,Sstat int null);";
*/

			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{

					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						arrBasisDetailsAgainstStore.add((String) cursor.getString(0));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(1));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(2));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(3));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(4));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(5));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(6));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(7));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(8));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(9));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(10));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(11));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(12));
						arrBasisDetailsAgainstStore.add((String) cursor.getString(13));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(14));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(15));





						//,Accuracy,SOLongCode,SOLongCode,IsStoreDataCompleteSaved,PaymentStage
						// cursor.moveToNext();
					}
				}
			}
			else
			{
				arrBasisDetailsAgainstStore.add(StoreName);
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("");
				arrBasisDetailsAgainstStore.add("NA");
				arrBasisDetailsAgainstStore.add("NA");
                arrBasisDetailsAgainstStore.add("NA");
                arrBasisDetailsAgainstStore.add("NA");

			}


		}
		catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
		}

		return arrBasisDetailsAgainstStore;
	}
	public LinkedHashMap<String, String> fnGetQuestionMstr(int sectionCount)
	{
		LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
		open();
		// int sectionCount=getsectionCount();
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		//tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
		Cursor cursor=null;
		if(sectionCount!=0)
		{
			if(CommonInfo.flgNewStoreORStoreValidation==1)
			{
				cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr on tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  where tblPDAQuestGrpMappingMstr.SectionNo<="+sectionCount+" AND tblQuestionMstr.flgNewStore=1 Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
			else if(CommonInfo.flgNewStoreORStoreValidation==2)
			{
				cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr on tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  where tblPDAQuestGrpMappingMstr.SectionNo<="+sectionCount+" AND tblQuestionMstr.flgStoreValidation=1 Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}


		}
		else
		{
			// cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr on tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			if(CommonInfo.flgNewStoreORStoreValidation==1)
			{
				cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr on tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID WHERE  tblQuestionMstr.flgNewStore=1 Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
			else if(CommonInfo.flgNewStoreORStoreValidation==2)
			{
				cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.QuestCode,tblQuestionMstr.QuestDesc,tblQuestionMstr.QuestType,tblQuestionMstr.AnsControlType,tblQuestionMstr.AnsControlInputTypeID,tblQuestionMstr.AnsControlInputTypeMaxLength,tblQuestionMstr.AnsMustRequiredFlg,tblQuestionMstr.QuestBundleFlg,tblQuestionMstr.ApplicationTypeID,tblQuestionMstr.Sequence,tblQuestionMstr.AnsControlInputTypeMinLength,tblQuestionMstr.AnsHint,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.Sequence from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr on tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID WHERE tblQuestionMstr.flgStoreValidation=1  Order By tblPDAQuestGrpMappingMstr.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}

		}


		try
		{
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						System.out.println("Varun Quest Id = "+(String) cursor.getString(0) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(13) +"~"+ (String) cursor.getString(0) +"^"+(String) cursor.getString(1) +"^"+(String) cursor.getString(2) +"^"+(String) cursor.getString(3) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(5) +"^"+(String) cursor.getString(6) +"^"+(String) cursor.getString(7) +"^"+(String) cursor.getString(8) +"^"+(String) cursor.getString(13) +"^"+(String) cursor.getString(14));
						hmapQuestionMstr.put((String) cursor.getString(0) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(13), (String) cursor.getString(0) +"^"+(String) cursor.getString(1) +"^"+(String) cursor.getString(2) +"^"+(String) cursor.getString(3) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(5) +"^"+(String) cursor.getString(6) +"^"+(String) cursor.getString(7) +"^"+(String) cursor.getString(8) +"^"+(String) cursor.getString(9) +"^"+(String) cursor.getString(10) +"^"+(String) cursor.getString(11) +"^"+(String) cursor.getString(12) +"^"+(String) cursor.getString(13));
						cursor.moveToNext();
					}
				}
			}
			return hmapQuestionMstr;
		}
		finally
		{
            if(cursor!=null)
            {
                cursor.close();
            }

			close();
		}
	}
	public LinkedHashMap<String, ArrayList<String>> fnGetQuestionMstrKey()
	{
		LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr= new LinkedHashMap<>();
		ArrayList<String> listKeyQuesVal= new ArrayList<>();
		open();
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		//tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
		Cursor cursor =null;
		if(CommonInfo.flgNewStoreORStoreValidation==1)
		{
			cursor= db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.GrpID from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr where tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID AND tblQuestionMstr.flgNewStore=1 AND tblPDAQuestGrpMappingMstr.flgNewStore=1  Order By tblPDAQuestGrpMappingMstr.GrpID ASC,tblPDAQuestGrpMappingMstr.Sequence  ", null);// Where PNodeID='"+TSIID+"'
		}
		else if(CommonInfo.flgNewStoreORStoreValidation==2)
		{
			cursor= db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.GrpID from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr where tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID AND tblQuestionMstr.flgStoreValidation=1 AND tblPDAQuestGrpMappingMstr.flgStoreValidation=1  Order By tblPDAQuestGrpMappingMstr.GrpID ASC,tblPDAQuestGrpMappingMstr.Sequence  ", null);// Where PNodeID='"+TSIID+"'
		}
//        cursor= db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.GrpID from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr where tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID  Order By tblPDAQuestGrpMappingMstr.GrpID ASC,tblPDAQuestGrpMappingMstr.Sequence  ", null);// Where PNodeID='"+TSIID+"'

		try
		{
			if(cursor.getCount()>0)
			{
				String sectionNo="0",preVisousSectionNum="0";
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						sectionNo= cursor.getString(3);
						if(i==0)
						{
							preVisousSectionNum= sectionNo;
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
						}
						else if(preVisousSectionNum.equals(sectionNo))
						{
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
						}
						else
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
							listKeyQuesVal= new ArrayList<>();
							preVisousSectionNum=sectionNo;
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));

						}
						if(i==(cursor.getCount()-1))
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
						}

						cursor.moveToNext();
					}
				}
			}
			return hmapQuestionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}
	}
	public LinkedHashMap<String, String> getGroupDescription()
	{
		open();
		LinkedHashMap<String, String> hmapGroupDescrptn= new LinkedHashMap<>();
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		Cursor cur=null;
		if(CommonInfo.flgNewStoreORStoreValidation==1)
		{
			cur=db.rawQuery("Select Distinct GrpID,GrpDesc from tblPDAQuestGrpMappingMstr WHERE flgNewStore=1", null);
		}
		else if(CommonInfo.flgNewStoreORStoreValidation==2)
		{
			cur=db.rawQuery("Select Distinct GrpID,GrpDesc from tblPDAQuestGrpMappingMstr WHERE flgStoreValidation=1", null);
		}

		if(cur.getCount()>0)
		{
			if(cur.moveToFirst())
			{
				for(int i=0;i<cur.getCount();i++)
				{
					hmapGroupDescrptn.put(cur.getString(0), cur.getString(1));
					cur.moveToNext();
				}

			}
		}
		close();
		return hmapGroupDescrptn;
	}
	public LinkedHashMap<String, ArrayList<String>> fnGetGroupIdMpdWdSectionId(int StoreSectionCount)
	{
		LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr= new LinkedHashMap<>();
		ArrayList<String> listKeyQuesVal= new ArrayList<>();

		open();
		int sectionCount=StoreSectionCount;//getsectionCount();

		// int sectionCount1=getsectionCount();
		//int sectionCount=0;
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		//tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
		Cursor cursor=null;
		if(sectionCount!=0)
		{
			if(CommonInfo.flgNewStoreORStoreValidation==1)
			{
				cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr where SectionNo<="+sectionCount+" AND flgNewStore=1 order by SectionNo", null);// Where PNodeID='"+TSIID+"'
			}
			else if(CommonInfo.flgNewStoreORStoreValidation==2)
			{
				cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr where SectionNo<="+sectionCount+" AND flgStoreValidation=1 order by SectionNo", null);// Where PNodeID='"+TSIID+"'
			}

		}
		else
		{
			//cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr order by SectionNo", null);// Where PNodeID='"+TSIID+"'
			if(CommonInfo.flgNewStoreORStoreValidation==1)
			{
				cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr  WHERE flgNewStore=1 order by SectionNo", null);// Where PNodeID='"+TSIID+"'
			}
			else if(CommonInfo.flgNewStoreORStoreValidation==2)
			{
				cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr  WHERE  flgStoreValidation=1 order by SectionNo", null);// Where PNodeID='"+TSIID+"'
			}
		}


		try
		{
			if(cursor.getCount()>0)
			{
				String sectionNo="0",preVisousSectionNum="0";
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						sectionNo= cursor.getString(1);
						if(i==0)
						{
							preVisousSectionNum= sectionNo;
							listKeyQuesVal.add(cursor.getString(0));
						}
						else if(preVisousSectionNum.equals(sectionNo))
						{
							listKeyQuesVal.add(cursor.getString(0));
						}
						else
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
							listKeyQuesVal= new ArrayList<>();
							preVisousSectionNum=sectionNo;
							listKeyQuesVal.add(cursor.getString(0));

						}
						if(i==cursor.getCount() - 1)
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
						}


						cursor.moveToNext();
					}
				}
			}
			return hmapQuestionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}
	}
	public LinkedHashMap<String, String> fnGetDependentQuestionMstr()
	{

		LinkedHashMap<String, String> hmapDpndntQuestionMstr= new LinkedHashMap<>();
		open();
		//tblQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";
		Cursor cursor = db.rawQuery("SELECT DISTINCT GrpDepQuestID,OptionID from tblQuestionDependentMstr", null);// Where PNodeID='"+TSIID+"'
		String []arrbhi=new String[cursor.getCount()];
		try {
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						// hmapDpndntQuestionMstr.put((String) cursor.getString(3).toString()+"^"+(String) cursor.getString(1).toString(), (String) cursor.getString(2).toString());
						arrbhi[i]=(String) cursor.getString(0) +"^"+(String) cursor.getString(1);

						cursor.moveToNext();
					}

				}
			}
			for(int cntLoop=0;cntLoop<arrbhi.length;cntLoop++)
			{
				String dpndIdAndOptId= arrbhi[cntLoop];
				String dpndntId=dpndIdAndOptId.split(Pattern.quote("^"))[0];
				String optId=dpndIdAndOptId.split(Pattern.quote("^"))[1];
				StringBuilder quesIdToBeVisOrinVis= fnQuestionIdOnBasisOfDependentQuestionIDdpndntId(dpndntId,optId);
				hmapDpndntQuestionMstr.put(arrbhi[cntLoop], quesIdToBeVisOrinVis.toString());
			}

			return hmapDpndntQuestionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}

	}
	public LinkedHashMap<String, ArrayList<String>> fnGetSection_Key()
	{
		LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr= new LinkedHashMap<>();
		ArrayList<String> listKeyQuesVal= new ArrayList<>();
		open();
		//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
		//tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
		Cursor cursor =null;
		if(CommonInfo.flgNewStoreORStoreValidation==1)
		{
			cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.SectionNo from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr where tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID AND tblQuestionMstr.flgNewStore=1 AND tblPDAQuestGrpMappingMstr.flgNewStore=1  Order By tblPDAQuestGrpMappingMstr.SectionNo ASC  ", null);// Where PNodeID='"+TSIID+"'
		}
		else if(CommonInfo.flgNewStoreORStoreValidation==2){
			cursor = db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID,tblPDAQuestGrpMappingMstr.SectionNo from tblQuestionMstr inner join tblPDAQuestGrpMappingMstr where tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID AND tblQuestionMstr.flgStoreValidation=1 AND tblPDAQuestGrpMappingMstr.flgStoreValidation=1  Order By tblPDAQuestGrpMappingMstr.SectionNo ASC  ", null);// Where PNodeID='"+TSIID+"'
		}
		try
		{
			if(cursor.getCount()>0)
			{
				String sectionNo="0",preVisousSectionNum="0";
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++)
					{
						sectionNo= cursor.getString(3);
						if(i==0)
						{
							preVisousSectionNum= sectionNo;
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
						}
						else if(preVisousSectionNum.equals(sectionNo))
						{
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
						}
						else
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
							listKeyQuesVal= new ArrayList<>();
							preVisousSectionNum=sectionNo;
							listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));

						}
						if(i==(cursor.getCount()-1))
						{
							hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
						}

						cursor.moveToNext();
					}
				}
			}
			return hmapQuestionMstr;
		}
		finally
		{
			cursor.close();
			close();
		}
	}
	public String fnGetQuestIDForOutChannelFromQuestionMstr()
	{//tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null,GrpCopyID int null,QuestCopyID int null);";

		int ScodecolumnIndex = 0;
		int ansCntrlTypeIndex = 1;
		int grpQuestIdIndex = 2;
		String QuestID="0";
		open();
		Cursor cursor =null;
		if(CommonInfo.flgNewStoreORStoreValidation==1)
		{
			cursor=db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID FROM tblQuestionMstr inner join tblPDAQuestGrpMappingMstr ON tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID where tblQuestionMstr.flgQuestIDForOutChannel=1 AND tblQuestionMstr.flgNewStore=1", null);
		}
		else if(CommonInfo.flgNewStoreORStoreValidation==2)
		{
			cursor=db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID FROM tblQuestionMstr inner join tblPDAQuestGrpMappingMstr ON tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID where tblQuestionMstr.flgQuestIDForOutChannel=1 AND tblQuestionMstr.flgStoreValidation=1", null);
		}
		//cursor=db.rawQuery("SELECT tblQuestionMstr.QuestID,tblQuestionMstr.AnsControlType,tblPDAQuestGrpMappingMstr.GrpQuestID FROM tblQuestionMstr inner join tblPDAQuestGrpMappingMstr ON tblQuestionMstr.QuestID=tblPDAQuestGrpMappingMstr.QuestID where tblQuestionMstr.flgQuestIDForOutChannel=1", null);
		try
		{


			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					QuestID = cursor.getString(ScodecolumnIndex)+"^"+cursor.getString(ansCntrlTypeIndex)+"^"+cursor.getString(grpQuestIdIndex);
					cursor.moveToNext();
				}
			}
			return QuestID;
		}
		finally
		{
			cursor.close();
			close();
		}
	}
	public void fnsaveOutletQuestAnsMstrSectionWise(LinkedHashMap<String, String> hmapQuesAnsVal,int CurrentsectionID,String CurrentOutletID,String StoreCategoryType)
	{

		open();
		fnDeletesaveOutletQuestAnsMstrSctionWise(CurrentOutletID,CurrentsectionID);
		String channelOptId=StoreCategoryType;//getChannelGroupIdOptId(CurrentOutletID);
		String channelkey =getChannelGroupIdKey();
		if(!channelOptId.equals("0-0-0"))
		{
			hmapQuesAnsVal.put(channelkey,channelOptId);
		}

		String OutletID="0",QuestID = "0",AnswerType,AnswerValue = "";
		int sectionID = 0;
		int QuestionGroupID=0;

		for(Map.Entry<String, String> entry:hmapQuesAnsVal.entrySet())
		{
			String questId= entry.getKey().split(Pattern.quote("^"))[0];
			AnswerType= entry.getKey().split(Pattern.quote("^"))[1];
			QuestionGroupID=Integer.valueOf(entry.getKey().split(Pattern.quote("^"))[2]);
			AnswerValue=entry.getValue();

			ContentValues content=new ContentValues();

			content.put("AnswerType", Integer.parseInt(AnswerType));
			content.put("AnswerValue", AnswerValue.trim());

			content.put("Sstat", 1);

			content.put("sectionID", CurrentsectionID);
			content.put("QuestionGroupID", QuestionGroupID);
			content.put("QuestID", questId);
			content.put("OutletID", CurrentOutletID.trim());

			db.insert(TABLE_OutletQuestAnsMstr, null, content);


		}


		close();

	}
	public String fngettblNewStoreSalesQuotePaymentDetails(String StoreID)
	{



		String searchString="";



		try {
			open();

			Cursor cur=db.rawQuery("Select IFNULL(PymtStageId,0) from tblNewStoreSalesQuotePaymentDetails Where StoreId ='"+ StoreID + "'", null);

			if(cur.getCount()>0)

			{

				StringBuilder sBuilder=new StringBuilder();

				if(cur.moveToFirst())

				{

					for(int i=0;i<cur.getCount();i++)

					{

						searchString= cur.getString(0);

						cur.moveToNext();

					}

				}



			}



		} catch (Exception e) {

			// TODO: handle exception

		}

		finally

		{

			close();

			return searchString;

		}

	}
	public LinkedHashMap<String, String> fnGetImagesAgainstStoreForSOView(String StoreID)
	{
		open();
		Cursor cursor=db.rawQuery("Select StoreImagename,ImageType from tblStoreImageList where StoreID='"+StoreID+"'",null);
		LinkedHashMap<String, String> hmapStoresDSRImageList= new LinkedHashMap<>();
		if(cursor.getCount()>0)
		{
			if(cursor.moveToFirst())
			{
				for(int index=0;index<cursor.getCount();index++)
				{
					hmapStoresDSRImageList.put(cursor.getString(0), cursor.getString(1));
					cursor.moveToNext();
				}
			}
		}
		close();
		return hmapStoresDSRImageList;
	}
	public LinkedHashMap isMstrQuestToHide(String prmchannelOptId)
	{
		LinkedHashMap<String,String> hmapMstrQstOptId= new LinkedHashMap<>();
		open();

		String channelOptId=prmchannelOptId;//getChannelGroupIdOptId();
		String channelkey =getChannelGroupIdKey();
		if(!channelOptId.equals("0-0-0"))
		{
			hmapMstrQstOptId.put(channelkey,channelOptId);
		}
		else
		{
			hmapMstrQstOptId.put(channelkey,"0");
		}
		close();
		return hmapMstrQstOptId;
	}
	public LinkedHashMap<String, String> getQuestAnswer(String tempId,String prmchannelOptId)
	{
		open();
		LinkedHashMap<String, String> hmapRtrvQuestAns= new LinkedHashMap<>();
		try {
			String channelOptId=prmchannelOptId;
			String channelkey =getChannelGroupIdKey();
			if(!channelOptId.equals("0-0-0"))
			{
				hmapRtrvQuestAns.put(channelkey,channelOptId);
			}

			//  hmapRtrvQuestAns.put("1^6^1","0-1-80");
			//tblOutletQuestAnsMstr (OutletID text not null,QuestID text not null,AnswerType text null, AnswerValue text null,QuestionGroupID integer null,sectionID integer null,Sstat integer not null);";
			Cursor cursor=db.rawQuery("Select * from tblOutletQuestAnsMstr where OutletID='"+tempId+"'", null);

			if(cursor.getCount()>0)
			{
				if(cursor.moveToFirst())
				{
					for(int i=0;i<cursor.getCount();i++)
					{

						hmapRtrvQuestAns.put(cursor.getString(1)+"^"+cursor.getString(2)+"^"+cursor.getString(4), cursor.getString(3));
						cursor.moveToNext();
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			close();
			return hmapRtrvQuestAns;
		}
	}
	public LinkedHashMap<String, String> fnGetQuestionIdFlgPrvValue(String TempID)
	{
		LinkedHashMap<String, String> hmapQuestionflgPrvValue= new LinkedHashMap<>();
		open();
		//tblQuestionTaskIdMapd(QstId int null,TaskId int null);";
		int lastIndex=0;
		Cursor cursor;
//tblPreAddedStoresDataDetails (StoreIDDB text null,GrpQuestID text null,QstId text null,AnsControlTypeID text null,AnsTextVal text null,flgPrvVal text null);";
		cursor = db.rawQuery("SELECT QstId,AnsControlTypeID,flgPrvVal,GrpQuestID from tblPreAddedStoresDataDetails Where tblPreAddedStoresDataDetails.StoreIDDB='"+ TempID +"'", null);


		try {
			if(cursor.getCount()>0)
			{
				if (cursor.moveToFirst())
				{
					for (int i = 0; i <= (cursor.getCount() - 1); i++) {
						hmapQuestionflgPrvValue.put((String) cursor.getString(0) +"^"+(String) cursor.getString(1) +"^"+(String) cursor.getString(3), (String) cursor.getString(2));

						cursor.moveToNext();
					}

				}
			}
			return hmapQuestionflgPrvValue;
		}
		finally
		{
			cursor.close();
			close();
		}
	}
	/*public void fnInsertOrUpdate_tblStoreDeatils(String StoreID,String StoreName,String ActualLatitude,String ActualLongitude,String VisitStartTS,String VisitEndTS,String LocProvider,String Accuracy,String BateryLeftStatus,int IsStoreDataCompleteSaved,String PaymentStage,int flgLocationTrackEnabled,String StoreAddress,String StoreCity,String StorePinCode,String StoreState,int Sstat,int flgApproveOrRejectOrNoActionOrReVisit,int flgStoreVisitMode,String StoreCategoryType,int StoreSectionCount,String CityId,String StateId,String MapAddress,String MapCity,String MapPinCode,String MapState)
	{



		open();
		try {
			Cursor cursor = db.rawQuery("SELECT StoreID FROM "+ DATABASE_TABLE_tblPreAddedStores +" where StoreID='"+StoreID +"'" , null);


			ContentValues initialValues = new ContentValues();
			initialValues.put("StoreName", StoreName.trim());
			initialValues.put("IsStoreDataCompleteSaved", IsStoreDataCompleteSaved);
			initialValues.put("PaymentStage", PaymentStage);
			initialValues.put("flgLocationTrackEnabled", flgLocationTrackEnabled);
			initialValues.put("StoreAddress", StoreAddress);
			initialValues.put("City", StoreCity);
			initialValues.put("PinCode", StorePinCode);
			initialValues.put("State", StoreState);
			initialValues.put("Sstat", Sstat);
			initialValues.put("SOLatCode", ActualLatitude);
			initialValues.put("SOLongCode", ActualLongitude);
			initialValues.put("LocProvider", LocProvider);
			initialValues.put("Accuracy", Accuracy);
			initialValues.put("BateryLeftStatus", BateryLeftStatus);
			initialValues.put("flgApproveOrRejectOrNoActionOrReVisit", flgApproveOrRejectOrNoActionOrReVisit);
			initialValues.put("flgStoreVisitMode", flgStoreVisitMode);
            initialValues.put("CityId", CityId);
            initialValues.put("StateId", StateId);
			if(cursor.getCount()>0)
			{
				int affected = db.update(DATABASE_TABLE_tblPreAddedStores, initialValues, "StoreID=?",new String[] {StoreID});
			}
			else
			{
				long syncTIMESTAMP = System.currentTimeMillis();
				Date datefromat = new Date(syncTIMESTAMP);
				SimpleDateFormat dfDate = new SimpleDateFormat("dd-MMM-yyyy",Locale.ENGLISH);
				String VisitDate = dfDate.format(datefromat);
//
				initialValues.put("DateAdded", VisitDate);
				initialValues.put("StoreID", StoreID);
				initialValues.put("SOLatCode", ActualLatitude);
				initialValues.put("SOLongCode", ActualLongitude);
				initialValues.put("LatCode", ActualLatitude);
				initialValues.put("LongCode", ActualLongitude);
				initialValues.put("DistanceNear", 0);
				initialValues.put("CoverageAreaID", 0);
				initialValues.put("CoverageAreaType", 0);
				initialValues.put("RouteNodeID", 0);
				initialValues.put("RouteNodeType", 0);
				initialValues.put("StoreCategoryType", StoreCategoryType);
				initialValues.put("StoreSectionCount", StoreSectionCount);
				//initialValues.put("DateAdded", "0");
				initialValues.put("VisitStartTS", VisitStartTS);
				initialValues.put("VisitEndTS", VisitEndTS);
                initialValues.put("MapAddress", MapAddress);
                initialValues.put("MapCity", MapCity);
                initialValues.put("MapPinCode", MapPinCode);
                initialValues.put("MapState", MapState);
				//initialValues.put("LocProvider", LocProvider);
				// initialValues.put("Accuracy", Accuracy);
				// initialValues.put("BateryLeftStatus", BateryLeftStatus);
				initialValues.put("flgOldNewStore", 1);
				db.insert(DATABASE_TABLE_tblPreAddedStores, null, initialValues);
			}


		}
		catch(Exception ex)
		{
			String ex1=ex.getMessage();
		}
		finally {
			close();
		}

	}*/

    public void fnInsertOrUpdate_tblStoreDeatils(String StoreID,String StoreName,String ActualLatitude,String ActualLongitude,
                                                 String VisitStartTS,String VisitEndTS,String LocProvider,String Accuracy,
                                                 String BateryLeftStatus,int IsStoreDataCompleteSaved,String PaymentStage,
                                                 int flgLocationTrackEnabled,String StoreAddress,String StoreCity,
                                                 String StorePinCode,String StoreState,int Sstat,
                                                 int flgApproveOrRejectOrNoActionOrReVisit,int flgStoreVisitMode,
                                                 String StoreCategoryType,int StoreSectionCount, int flgLocationServicesOnOff,
                                                 int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff,
                                                 int flgInternetOnOffWhileLocationTracking, int flgRestart, int flgStoreOrder,
                                                 int flgUpdateSomeNewStoreFlags,String CityId,String StateId,
                                                 String MapAddress,String MapCity,String MapPinCode,String MapState)
    {

        int flgIfStoreHasRecords=0;
        try {
            flgIfStoreHasRecords=CheckTotalStoreCountSO();
        }
        catch (Exception ex)
        {

        }

        open();
        try {
            Cursor cursor = db.rawQuery("SELECT StoreID FROM "+ DATABASE_TABLE_tblPreAddedStores +" where StoreID='"+StoreID +"'" , null);


            ContentValues initialValues = new ContentValues();
            initialValues.put("StoreName", StoreName.trim());
            initialValues.put("IsStoreDataCompleteSaved", IsStoreDataCompleteSaved);
            initialValues.put("PaymentStage", PaymentStage);
            initialValues.put("flgLocationTrackEnabled", flgLocationTrackEnabled);
            initialValues.put("StoreAddress", StoreAddress);
            initialValues.put("City", StoreCity);
            initialValues.put("PinCode", StorePinCode);
            initialValues.put("State", StoreState);
            initialValues.put("Sstat", Sstat);
            initialValues.put("SOLatCode", ActualLatitude);
            initialValues.put("SOLongCode", ActualLongitude);
            initialValues.put("SOAccuracy", Accuracy);
            initialValues.put("LocProvider", LocProvider);
            // initialValues.put("Accuracy", Accuracy);
            initialValues.put("BateryLeftStatus", BateryLeftStatus);
            initialValues.put("flgApproveOrRejectOrNoActionOrReVisit", flgApproveOrRejectOrNoActionOrReVisit);
            initialValues.put("flgStoreVisitMode", flgStoreVisitMode);

            initialValues.put("CityId", CityId);
            initialValues.put("StateId", StateId);

            if(flgUpdateSomeNewStoreFlags==1)
            {
                initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
                initialValues.put("flgGPSOnOff", flgGPSOnOff);
                initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
                initialValues.put("flgFusedOnOff", flgFusedOnOff);
                initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
                initialValues.put("flgRestart", flgRestart);
            }
            if(cursor.getCount()>0)
            {
                int affected = db.update(DATABASE_TABLE_tblPreAddedStores, initialValues, "StoreID=?",new String[] {StoreID});
            }
            else
            {
                long syncTIMESTAMP = System.currentTimeMillis();
                Date datefromat = new Date(syncTIMESTAMP);
                SimpleDateFormat dfDate = new SimpleDateFormat("dd-MMM-yyyy",Locale.ENGLISH);
                String VisitDate = dfDate.format(datefromat);
//
                initialValues.put("DateAdded", VisitDate);
                initialValues.put("StoreID", StoreID);
                initialValues.put("SOLatCode", ActualLatitude);
                initialValues.put("SOLongCode", ActualLongitude);
                initialValues.put("LatCode", ActualLatitude);
                initialValues.put("LongCode", ActualLongitude);
                initialValues.put("Accuracy", Accuracy);
                initialValues.put("SOAccuracy", Accuracy);
                initialValues.put("DistanceNear", 0);
                initialValues.put("CoverageAreaID", 0);
                initialValues.put("CoverageAreaType", 0);
                initialValues.put("RouteNodeID", 0);
                initialValues.put("RouteNodeType", 0);
                initialValues.put("StoreCategoryType", StoreCategoryType);
                initialValues.put("StoreSectionCount", StoreSectionCount);
                //initialValues.put("DateAdded", "0");
                initialValues.put("VisitStartTS", VisitStartTS);
                initialValues.put("VisitEndTS", VisitEndTS);
                initialValues.put("flgRemap", 0);
                //initialValues.put("LocProvider", LocProvider);
                // initialValues.put("Accuracy", Accuracy);
                // initialValues.put("BateryLeftStatus", BateryLeftStatus);
                initialValues.put("flgOldNewStore", 1);
                initialValues.put("flgStoreOrder", (flgIfStoreHasRecords+1));

                initialValues.put("MapAddress", MapAddress);
                initialValues.put("MapCity", MapCity);
                initialValues.put("MapPinCode", MapPinCode);
                initialValues.put("MapState", MapState);
                initialValues.put("flgSelfStoreNode", 1);

                db.insert(DATABASE_TABLE_tblPreAddedStores, null, initialValues);
            }


        }
        catch(Exception ex)
        {
            String ex1=ex.getMessage();
        }
        finally {
            close();
        }

    }
	public void UpdateStoreReturnphotoFlag(String StoreID, String StoreName)
	{
		try
		{
			final ContentValues values = new ContentValues();
			values.put("StoreName", StoreName);



			int affected16 = db.update("tblPreAddedStores", values,"StoreID=?", new String[] { StoreID });
		}
		catch (Exception ex) {

		}
	}
    public int fetch_GetCoverageAreaIDAgsinstStoreID(String StoreID)
    {
        open();
        int CoverageAreaIDAgsinstStoreID =0;
        Cursor cursor = db.rawQuery("SELECT CoverageAreaID FROM tblPreAddedStores WHERE StoreID='"+StoreID+"'",null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    CoverageAreaIDAgsinstStoreID=Integer.parseInt(cursor.getString(0));
                }
            }

            return CoverageAreaIDAgsinstStoreID;
        }
        finally
        {
            cursor.close();
            close();
        }
    }
    public long saveTblStoreCountDetails(String TotStoreAdded,String TodayStoreAdded)
    {

        ContentValues initialValues = new ContentValues();

        initialValues.put("TotStoreAdded", Integer.parseInt(TotStoreAdded.trim()));
        initialValues.put("TodayStoreAdded", Integer.parseInt(TodayStoreAdded.trim()));

        return db.insert(DATABASE_TABLE_tblStoreCountDetails, null, initialValues);
    }
    public void fnVisitStartOrEndTime(String StoreID,String Time,int flgVistStatOrEnd)
    {



        open();
        try {
            Cursor cursor = db.rawQuery("SELECT StoreID FROM "+ DATABASE_TABLE_tblPreAddedStores +" where StoreID='"+StoreID +"'" , null);


            ContentValues initialValues = new ContentValues();

            if(flgVistStatOrEnd==0)
            {
                initialValues.put("VisitStartTS", Time);
            }
            if(flgVistStatOrEnd==1)
            {
                initialValues.put("VisitEndTS", Time);
            }



            if(cursor.getCount()>0)
            {

                int affected = db.update(DATABASE_TABLE_tblPreAddedStores, initialValues, "StoreID=?",new String[] {StoreID});
            }


        } finally {
            close();
        }

    }

    public void UpdateStoreImageTableFlag(String sID, int flag2set)
    {

        try
        {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected2 = db.update("tableImage", values,"StoreID=?", new String[] { sID });
        }
        catch (Exception ex)
        {

        }

    }

    public LinkedHashMap<String, String> fnGetStList()
    {
        LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
        open();
        Cursor cursor= db.rawQuery("SELECT StoreID,Sstat from tblPreAddedStores Where Sstat=3", null);// Where PNodeID='"+TSIID+"'
        //(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(0),(String) cursor.getString(1));
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        }
        finally
        {
            cursor.close();
            close();
        }
    }

    public int fnCheckForPendingImages()
    {
        open();
        Cursor cursor =null;
        int check=0;
        try {

            cursor= db.rawQuery("SELECT StoreID FROM tableImage WHERE  Sstat =5", null);
            if (cursor.getCount() > 0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        check=1;
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = "+e.toString());
        }
        finally {
            cursor.close();
            close();
        }
        return check;
    }

    public int fnCheckForPendingXMLFilesInTable()
    {
        open();
        Cursor cursor =null;
        int check=0;
        try {
            //tbl_XMLfiles SET Sstat='4'

            cursor= db.rawQuery("SELECT XmlFileName FROM tbl_XMLfiles WHERE  Sstat=3", null);
            if (cursor.getCount() > 0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        check=1;
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = "+e.toString());
        }
        finally {
            cursor.close();
            close();
        }
        return check;
    }

    public String fetch_SONameAndSummryLastServerRefreshTime()
    {
        open();
        String SONameAndSummryLastServerRefreshTime ="";
        Cursor cursor = db.rawQuery("SELECT SOName,SummurayRefreshTime FROM tblSONameAndSummurayRefreshTime",null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        SONameAndSummryLastServerRefreshTime= cursor.getString(0) +"^"+ cursor.getString(1);
                        cursor.moveToNext();
                    }
                }
            }
            else
            {
                SONameAndSummryLastServerRefreshTime="Not Available"+"^"+"Not Yet Available";
            }
            return SONameAndSummryLastServerRefreshTime;
        }
        finally
        {
            cursor.close();
            close();
        }
    }
    public LinkedHashMap<String, String> fetch_SODSRSummary()
    {
        open();
        LinkedHashMap<String,String> hmapStoreCountCoverageAreaWise= new LinkedHashMap<>();
        //hmapStoreCountCoverageAreaWise=fetch_StoreCountCoverageAreaWise();
        LinkedHashMap<String, String> hmapSODSRSummary = new LinkedHashMap<>();
        Cursor cursor = db.rawQuery("SELECT DSRID,DSRName,TotStoreAdded,Approved,Rejected,ReMap,Pending,flgDSROrSO FROM tblDSRSummaryDetials",null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {

                        int TotStoreAdded=Integer.parseInt(cursor.getString(2));
                        int Approved=Integer.parseInt(cursor.getString(3));
                        int Rejected=Integer.parseInt(cursor.getString(4));
                        int ReMap=Integer.parseInt(cursor.getString(5));
                        int Pending=Integer.parseInt(cursor.getString(6));
                        int flgDSROrSO=Integer.parseInt(cursor.getString(7));


                       /* if(hmapStoreCountCoverageAreaWise.size()>0)
                        {
                            if(hmapStoreCountCoverageAreaWise.containsKey(cursor.getString(0).toString()))
                            {
                                OutletCountValidated=OutletCount-Integer.parseInt(hmapStoreCountCoverageAreaWise.get(cursor.getString(0).toString()));
                            }
                        }*/
                        hmapSODSRSummary.put(cursor.getString(0), cursor.getString(1) +"^"+TotStoreAdded+"^"+Approved+"^"+Rejected+"^"+ReMap+"^"+Pending+"^"+flgDSROrSO);
                        cursor.moveToNext();
                    }
                }
            }
            return hmapSODSRSummary;
        }
        finally
        {
            cursor.close();
            close();
        }
    }

    public String[] getAllStoreIDForPhotoTakenDetail()
    {
        Cursor cursor=null;
        try
        {
            cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tableImage where Sstat=5", null);

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst())
            {
                for (int i = 0; i <= (cursor.getCount() - 1); i++)
                {
                    StoreName[i] = (String) cursor.getString(0);
                    cursor.moveToNext();
                }
            }

            return StoreName;
        }
        finally
        {
            cursor.close();
        }

    }
    public int CheckTotalStoreCountFormServiceWorker() throws IOException
    {

        int chkI = 0;
        Cursor cursorE2=null;

        try
        {
            cursorE2 = db.rawQuery("SELECT flgStoreOrder from tblPreAddedStores order by flgStoreOrder desc limit 1", null);
            if(cursorE2.getCount()>0) {
                if (cursorE2.moveToFirst()) {

                    if (cursorE2.getInt(0) > 0) {
                        chkI = cursorE2.getInt(0);
                    } else {
                        chkI = 0;
                    }
                }
            }

        } finally
        {
            if(cursorE2!=null) {
                cursorE2.close();
            }

        }
        return chkI;
    }
    public long fnsaveTblPreAddedStores(String StoreID,String StoreName,String LatCode,String LongCode,String DateAdded,int flgOldNewStore,int Sstat,int CoverageAreaID,int CoverageAreaType,int RouteNodeID,int RouteNodeType,String City,String State,String PinCode,String StoreCategoryType,int StoreSectionCount,int flgApproveOrRejectOrNoActionOrReVisit,String SOLatCode,String SOLongCode,int flgStoreVisitMode,String VisitStartTS,String VisitEndTS,String LocProvider,String Accuracy,String BateryLeftStatus,int IsStoreDataCompleteSaved,String PaymentStage,int flgLocationTrackEnabled,String StoreAddress,String SOAccuracy,int flgRemap,int flgSelfStoreNode)
    {

        int flgIfStoreHasRecords=0;
        try {
            flgIfStoreHasRecords=CheckTotalStoreCountFormServiceWorker();
        }
        catch (Exception ex)
        {

        }
        ContentValues initialValues = new ContentValues();
        long count = 0;
        try
        {
            //tblPreAddedStores(StoreID text null,StoreName text null,LatCode text null," +
 /*   "LongCode text null,DateAdded text null,DistanceNear int null,flgOldNewStore int null,CoverageAreaID int null,CoverageAreaType int null," +
            "RouteNodeID int null,RouteNodeType int null,City text null,State text null,PinCode text null,StoreCategoryType text null,StoreSectionCount int null," +
            "flgApproveOrRejectOrNoActionOrReVisit int null,SOLatCode text null,SOLongCode text null,VisitStartTS text null,VisitEndTS text null," +
            "LocProvider text null,Accuracy text null,BateryLeftStatus text null,IsStoreDataCompleteSaved int null,PaymentStage text null,flgLocationTrackEnabled int null," +
            "flgStoreVisitMode int null,Sstat int null)*/
// StoreSectionCount,int flgApproveOrRejectOrNoActionOrReVisit,String SOLatCode,String SOLongCode,int flgStoreVisitMode,String VisitStartTS,String VisitEndTS,String LocProvider,String Accuracy,String BateryLeftStatus,int IsStoreDataCompleteSaved,String PaymentStage,int flgLocationTrackEnabled)
            initialValues.put("StoreID", StoreID);
            initialValues.put("StoreName", StoreName);
            initialValues.put("LatCode", LatCode);
            initialValues.put("LongCode", LongCode);
            initialValues.put("DateAdded", DateAdded);
            initialValues.put("DistanceNear", 1000);
            initialValues.put("flgOldNewStore", flgOldNewStore);
            initialValues.put("Sstat", Sstat);
            initialValues.put("CoverageAreaID", CoverageAreaID);
            initialValues.put("CoverageAreaType", CoverageAreaType);
            initialValues.put("RouteNodeID", RouteNodeID);
            initialValues.put("RouteNodeType", RouteNodeType);
            initialValues.put("City", City);
            initialValues.put("State", State);
            initialValues.put("PinCode", PinCode);

            initialValues.put("StoreCategoryType", StoreCategoryType);
            initialValues.put("StoreSectionCount", StoreSectionCount);

            initialValues.put("flgApproveOrRejectOrNoActionOrReVisit", flgApproveOrRejectOrNoActionOrReVisit);
            initialValues.put("SOLatCode", SOLatCode);
            initialValues.put("SOLongCode", SOLongCode);
            initialValues.put("flgStoreVisitMode", flgStoreVisitMode);

            initialValues.put("VisitStartTS", VisitStartTS);
            initialValues.put("VisitEndTS", VisitEndTS);
            initialValues.put("LocProvider", LocProvider);
            initialValues.put("Accuracy", Accuracy);
            initialValues.put("BateryLeftStatus", BateryLeftStatus);
            initialValues.put("IsStoreDataCompleteSaved", IsStoreDataCompleteSaved);
            initialValues.put("PaymentStage", PaymentStage);
            initialValues.put("flgLocationTrackEnabled", flgLocationTrackEnabled);
            initialValues.put("StoreAddress", StoreAddress);
            initialValues.put("SOAccuracy", SOAccuracy);
            initialValues.put("flgRemap", flgRemap);

            initialValues.put("flgSelfStoreNode", flgSelfStoreNode);
            initialValues.put("flgLocationServicesOnOff", 0);
            initialValues.put("flgGPSOnOff", 0);
            initialValues.put("flgNetworkOnOff", 0);
            initialValues.put("flgFusedOnOff", 0);
            initialValues.put("flgInternetOnOffWhileLocationTracking", 0);
            initialValues.put("flgRestart", 0);

            initialValues.put("flgStoreOrder", (flgIfStoreHasRecords+1));
            //StoreAddress
            count= db.insert(DATABASE_TABLE_tblPreAddedStores, null, initialValues);

            System.out.println("Nitish Count ="+count);

            //SOLatCode, SOLongCode,flgStoreVisitMode

        }
        catch (Exception e)
        {
            String abhinav= e.getMessage();

        }
        return count;
    }
    public long fnsavetblCoverageMaster(int CoverageAreaNodeID,int CoverageAreaNodeType,String CoverageArea)
    {

        ContentValues initialValues = new ContentValues();
        initialValues.put("CoverageAreaNodeID", CoverageAreaNodeID);
        initialValues.put("CoverageAreaNodeType", CoverageAreaNodeType);
        initialValues.put("CoverageArea", CoverageArea);

        return db.insert(DATABASE_TABLE_tblCoverageMaster, null, initialValues);
    }
    public long fnsavetblRouteMasterWithCoverageMapping(int CoverageAreaNodeID,int CoverageAreaNodeType,String CoverageArea,int RouteID,int RouteType,String Route)
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put("CoverageAreaNodeID", CoverageAreaNodeID);
        initialValues.put("CoverageAreaNodeType", CoverageAreaNodeType);
        initialValues.put("CoverageArea", CoverageArea);
        initialValues.put("RouteID", RouteID);
        initialValues.put("RouteType", RouteType);
        initialValues.put("Route", Route);


        return db.insert(DATABASE_TABLE_tblRouteMasterWithCoverageMapping, null, initialValues);
    }

    public long fnsavetblStoreImageList(String StoreID,String StoreImagename,int ImageType)
    {

        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", StoreID);
        initialValues.put("StoreImagename", StoreImagename);
        initialValues.put("ImageType", ImageType);

        return db.insert(DATABASE_TABLE_tblStoreImageList, null, initialValues);
    }


    public long saveTblPreAddedStoresDataDetails(String StoreIDDB,String GrpQuestID,String QstId,String AnsControlTypeID,String AnsTextVal,String flgPrvVal)
    {

        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreIDDB", StoreIDDB);
        initialValues.put("GrpQuestID", GrpQuestID);
        initialValues.put("QstId", QstId);
        initialValues.put("AnsControlTypeID", AnsControlTypeID);

        initialValues.put("AnsTextVal", AnsTextVal);

        initialValues.put("flgPrvVal", flgPrvVal);

        return db.insert(DATABASE_TABLE_tblPreAddedStoresDataDetails, null, initialValues);
    }

    public LinkedHashMap<String, String> fnGeStoreCoverageIDAndflagValidaeForWebService(int CoverageAreadID,int RouteID)
    {
        LinkedHashMap<String, String> hmapStoreLisMstr= new LinkedHashMap<>();
        open();
        try {
            Cursor cursor=null;
            if(CoverageAreadID==0 && RouteID==0)
            {
                cursor = db.rawQuery("SELECT StoreID,CoverageAreaID from tblPreAddedStores WHERE flgApproveOrRejectOrNoActionOrReVisit=1 or flgApproveOrRejectOrNoActionOrReVisit=2 or flgApproveOrRejectOrNoActionOrReVisit=3 ORDER BY DistanceNear", null);
            }
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapStoreLisMstr.put((String) cursor.getString(0),(String) cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }

        }
        catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= "+e.toString());
        }
        finally
        {

            close();
            return hmapStoreLisMstr;
        }
    }

    public int fnGetCountOfStoresAddedBySO()
    {
        int countOfStoresAddedBySO=0;
        open();
        try {
            Cursor cursor= db.rawQuery("SELECT COUNT(*) from tblPreAddedStores WHERE flgOldNewStore=1 ORDER BY DistanceNear", null);

            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    countOfStoresAddedBySO= Integer.parseInt(cursor.getString(0));

                }
            }

        }
        catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= "+e.toString());
        }
        finally
        {

            close();
            return countOfStoresAddedBySO;
        }
    }

    public void fnDeleteOldtblDSRSummaryDetialsRecordsAndSONameTable()
    {
        // open();
        db.execSQL("Delete FROM tblDSRSummaryDetials");
        db.execSQL("Delete FROM tblSONameAndSummurayRefreshTime");
        // close();
    }
    public long savetblSONameAndSummurayRefreshTime(String SOName, String SummurayRefreshTime)
    {

        ContentValues initialValues = new ContentValues();

        initialValues.put("SOName", SOName.trim());
        initialValues.put("SummurayRefreshTime", SummurayRefreshTime.trim());
        return db.insert(DATABASE_TABLE_tblSOName, null, initialValues);
    }

    public long fnsavetblDSRSummaryDetials(int DSRCoverageAreaID, String DSRName,int TotStoreAdded,int Approved,int Rejected,int ReMap,int Pending,int flgDSROrSO)
    {
        //open();
        ContentValues initialValues = new ContentValues();
        try
        {
            initialValues.put("DSRID", DSRCoverageAreaID);
            initialValues.put("DSRName", DSRName.trim());
            initialValues.put("TotStoreAdded", TotStoreAdded);
            initialValues.put("Approved", Approved);
            initialValues.put("Rejected", Rejected);
            initialValues.put("ReMap", ReMap);
            initialValues.put("Pending", Pending);
            initialValues.put("flgDSROrSO", flgDSROrSO);
        }
        catch (Exception ex)
        {

        }
        finally {
            // close();
        }
        return db.insert(DATABASE_TABLE_tblDSRSummaryDetials, null, initialValues);
    }
    public long fnsavetblStorePaymentStageMapping(String StoreID,String PaymentStage)
    {

        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", StoreID);
        initialValues.put("PaymentStage", PaymentStage);


        return db.insert(DATABASE_TABLE_tblStorePaymentStageMapping, null, initialValues);
    }

    public int fnCheckFortblNewStoreSalesQuotePaymentDetailsHasStore(String StoreId)
    {

        Cursor cursor =null;
        int check=0;
        try {
            //tbl_XMLfiles SET Sstat='4'
//tblStorePaymentStageMapping
            cursor= db.rawQuery("SELECT StoreId FROM tblNewStoreSalesQuotePaymentDetails WHERE  StoreId='"+ StoreId +"'", null);
            if (cursor.getCount() > 0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        check=1;
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = "+e.toString());
        }
        finally {
            cursor.close();

        }
        return check;
    }
    public String GetActiveRouteIDCrntDSR(int CoverageAreaNodeID,int CoverageAreaNodeType)
    {
        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"' and flgTodayRoute = 1 Limit 1", null);

       /// Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE CoverageAreaNodeID='"+CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CoverageAreaNodeType+"' Limit 1", null);
        //Cursor cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr where CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"'", null);

        try
        {
            String activeRouteID = "0";
            if (cursor2.moveToFirst())
            {

                for (int i = 0; i < cursor2.getCount(); i++)
                {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            if(activeRouteID.equals("0"))
            {
                activeRouteID=GetNoActiveRouteIDCrntDSR(CoverageAreaNodeID,CoverageAreaNodeType);
            }
            return activeRouteID;
        } finally {
            cursor2.close();

        }

    }

    private String GetNoActiveRouteIDCrntDSR(int CoverageAreaNodeID, int CoverageAreaNodeType)
    {
        int LoncolumnIndex = 0;


         Cursor cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr WHERE CoverageAreaNodeID='"+CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CoverageAreaNodeType+"' Limit 1", null);
        //Cursor cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr where CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"'", null);

        try
        {
            String activeRouteID = "0";
            if (cursor2.moveToFirst())
            {

                for (int i = 0; i < cursor2.getCount(); i++)
                {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            return activeRouteID;
        } finally {
            cursor2.close();

        }

    }


    public boolean isDataAlreadyExist(int coveAreaNodeId,int coverageNodeType)
    {//to avoid Launcher Page
     //   boolean dataExist=true;
        boolean dataExist=false;
        //tblStoreList(StoreID text not null, StoreType string not null, StoreName string not null, StoreLatitude real not null, StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not null, Sstat integer not null, ForDate string not null, ActualLatitude text null, ActualLongitude text null, VisitStartTS text null, VisitEndTS text null,AutoIdStore int null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreClose integer null,StoreNextDay integer null,chainID integer null,ISNewStore int null,StoreRouteID int null,RouteNodeType int null,StoreCatNodeId int null,IsNewStoreDataCompleteSaved int null,flgFromWhereSubmitStatus int null,StoreAddress text null,PaymentStage text null,flgHasQuote int null,flgAllowQuotation int null,flgSubmitFromQuotation int null,flgGSTCapture text null,flgGSTCompliance text null,GSTNumber text null,flgGSTRecordFromServer int null,DistanceNear int null,flgLocationServicesOnOff int null,flgGPSOnOff int null,flgNetworkOnOff int null,flgFusedOnOff int null,flgInternetOnOffWhileLocationTracking int null,flgRestart int null,flgStoreOrder int null,StoreCity text null,StorePinCode text not null,StoreState text null,CoverageAreaNodeID integer null,CoverageAreaNodeType integer null,FlgDSRSO integer null);";
        open();
        Cursor cursorE2=null;
        try {


            cursorE2 = db.rawQuery("SELECT Count(*) from tblStoreList where CoverageAreaNodeID="+coveAreaNodeId+" AND CoverageAreaNodeType="+coverageNodeType, null);
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    dataExist = true;
                }
            }

        }catch(Exception e)
        {
            System.out.println("Error isDataAlreadyExist ="+e.toString());
        }
        finally
        {cursorE2.close();
            close();
            return dataExist;
        }
    }
    public LinkedHashMap<String,String> getStoreClosedReasons()
    {
        open();
        LinkedHashMap<String,String> list=new LinkedHashMap<>();
        try
        {
            Cursor cur=db.rawQuery("Select CloseReasonID,CloseReasonDescr from tblStoreCloseReasonMaster",null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    for(int i=0;i<cur.getCount();i++)
                    {
                        if(i==0)
                        {
                            list.put("00","Select");
                            list.put(cur.getString(0),cur.getString(1));
                        }
                        else
                        {
                            list.put(cur.getString(0),cur.getString(1));
                        }
                        cur.moveToNext();
                    }
                }
            }
        }
        catch(Exception e)
        {
            System.out.println("Error getStoreClosedReasons = "+e.toString());
        }
        finally
        {
            close();
            return list;
        }
    }
    public  void deletetblStoreCloseReasonMaster()
    {
        db.execSQL("DELETE FROM tblStoreCloseReasonMaster");
    }
    public void savetblStoreCloseReasonMaster(String CloseReasonID,String CloseReasonDescr)
    {

        ContentValues values=new ContentValues();
        values.put("CloseReasonID", CloseReasonID);
        values.put("CloseReasonDescr", CloseReasonDescr);

        db.insert(DATABASE_TABLE_tblStoreCloseReasonMaster , null, values);

    }


    public String getOtherReason(String StoreID)
    {
        open();
        String list="00^NA";
        try
        {
            Cursor cur=db.rawQuery("Select ReasonID,ReasonDescr from tblStoreCloseReasonSaving where StoreID='"+StoreID+"'",null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    for(int i=0;i<cur.getCount();i++)
                    {
                        list=cur.getString(0)+"^"+cur.getString(1);
                        cur.moveToNext();
                    }
                }
            }
        }
        catch(Exception e)
        {
            System.out.println("Error getOtherReason = "+e.toString());
        }
        finally
        {
            close();
            return list;
        }
    }

    public  void deleteStorecloseLocationTableBasedOnStoreID(String StoreID)
    {
        db.execSQL("DELETE FROM tblStoreCloseLocationDetails where StoreID='"+StoreID+"'");
    }

    public void UpdateStoreStoreClose(String StoreID, int StoreClose)
    {


        final ContentValues values = new ContentValues();
        values.put("StoreClose", StoreClose);

        int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { StoreID });

    }
    public void UpdateStoreSstat(String StoreID, int Sstat)
    {


        final ContentValues values = new ContentValues();
        values.put("Sstat", Sstat);

        int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { StoreID });

    }

    public long inserttblStoreCloseReasonSaving(String storeId,String ReasonID,String ReasonDescr,int Sstat)
    {
        open();
        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", storeId.trim());
        initialValues.put("ReasonID", ReasonID.trim());
        initialValues.put("ReasonDescr", ReasonDescr.trim());
        initialValues.put("Sstat", Sstat);

        long inserted=db.insert(DATABASE_TABLE_tblStoreCloseReasonSaving, null, initialValues);
        close();
        return inserted;
    }
    public long inserttblStoreClosedPhotoDetail(String storeId,String ClickedDateTime,String PhotoName,
                                                String PDAPhotoPath,int Sstat)
    {

        open();
        ContentValues initialValues = new ContentValues();
        //StoreID text null,ClickedDateTime text null,PhotoName text null,PDAPhotoPath text null,Sstat integer null
        initialValues.put("StoreID", storeId.trim());
        initialValues.put("ClickedDateTime", ClickedDateTime.trim());
        initialValues.put("PhotoName", PhotoName.trim());
        initialValues.put("PDAPhotoPath", PDAPhotoPath.trim());
        initialValues.put("Sstat", Sstat);

        long inserted=db.insert(DATABASE_TABLE_tblStoreClosedPhotoDetail, null, initialValues);
        close();
        return inserted;
    }

    public void validateAndDelStoreClosePic(String StoreId,String imgName)
    {
        open();
        try
        {
            /*tblPutStckRoomPhotoDetails(TempId text null,StoreId text null,PhotoName text null,PhotoPath text null,ClickedDateTime text null,ClickTagPhoto text null,Sstat text null);";*/
            Cursor cur=db.rawQuery("Select PhotoName from tblStoreClosedPhotoDetail where StoreId='"+StoreId+"'" +
                    "and PhotoName='"+imgName+"'",null);

            if(cur.getCount()>0)
            {
                db.delete(DATABASE_TABLE_tblStoreClosedPhotoDetail,"StoreID=? and PhotoName=?",
                        new String[] {StoreId,imgName});
            }
        }
        catch (SQLiteException ex)
        {
            System.out.println("validate pic..."+ex);
        }
        finally {
            close();
        }
    }

    public ArrayList<String> getStoreClosedImgNameByStoreId(String StoreID)
    {
        open();
        ArrayList<String> list=new ArrayList<>();
        try
        {
            Cursor cur=db.rawQuery("Select PhotoName from tblStoreClosedPhotoDetail where StoreID='"+StoreID+"'",null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    for(int i=0;i<cur.getCount();i++)
                    {
                        list.add(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        }
        catch(Exception e)
        {
            System.out.println("Error getStoreClosedImgNameByStoreId = "+e.toString());
        }
        finally
        {
            close();
            return list;
        }
    }

    public void upDateCloseStoreReason(String StoreID,String ReasonID, String ReasonDesc) {
        try {
            open();
            final ContentValues values = new ContentValues();
            values.put("ReasonID", ReasonID);
            values.put("ReasonDesc", ReasonDesc);

            int affected = db.update("tblStoreCloseReasonSaving", values, "StoreID=?",
                    new String[] {StoreID});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
        finally {
            close();
        }
    }

    public long saveTblStorecloseLocationDetails(String StoreID,
                                                 String Lattitude, String Longitude, String Accuracy,
                                                 String Address, String City, String Pincode, String State,
                                                 String fnAccurateProvider, String GpsLat, String GpsLong,
                                                 String GpsAccuracy, String NetwLat, String NetwLong,
                                                 String NetwAccuracy, String FusedLat, String FusedLong,
                                                 String FusedAccuracy, String AllProvidersLocation, String GpsAddress,
                                                 String NetwAddress, String FusedAddress,
                                                 String FusedLocationLatitudeWithFirstAttempt, String FusedLocationLongitudeWithFirstAttempt,
                                                 String FusedLocationAccuracyWithFirstAttempt,int Sstat)
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", StoreID);
        initialValues.put("Lattitude", Lattitude);
        initialValues.put("Longitude", Longitude);
        initialValues.put("Accuracy", Accuracy);
        initialValues.put("Address", Address);
        initialValues.put("City", City);
        initialValues.put("Pincode", Pincode);
        initialValues.put("State", State);
        initialValues.put("fnAccurateProvider", fnAccurateProvider);
        initialValues.put("GpsLat", GpsLat);
        initialValues.put("GpsLong", GpsLong);
        initialValues.put("GpsAccuracy", GpsAccuracy);
        initialValues.put("NetwLat", NetwLat);
        initialValues.put("NetwLong", NetwLong);
        initialValues.put("NetwAccuracy", NetwAccuracy);
        initialValues.put("FusedLat", FusedLat);
        initialValues.put("FusedLong", FusedLong);
        initialValues.put("FusedAccuracy", FusedAccuracy);

        initialValues.put("AllProvidersLocation", AllProvidersLocation);
        initialValues.put("GpsAddress", GpsAddress);
        initialValues.put("NetwAddress", NetwAddress);
        initialValues.put("FusedAddress", FusedAddress);
        initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt);
        initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt);
        initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt);
        initialValues.put("Sstat", Sstat);

        return db.insert(DATABASE_TABLE_tblStoreCloseLocationDetails, null, initialValues);
    }


    public String[] fetchRouteIdsBasedOnCoverageAreaNodeIDAndCoverageAreaNodeType(int CoverageAreaNodeID,int CoverageAreaNodeType)
    {

        open();
        Cursor cursor2 =null;
        try {
           cursor2 = db.rawQuery("SELECT ID FROM tblRouteMstr where CoverageAreaNodeID='"+CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CoverageAreaNodeType+"'", null);

            String strLocationIDDetais[] = new String[cursor2.getCount()];
            if (cursor2.moveToFirst())
            {

                for (int i = 0; i < cursor2.getCount(); i++)
                {
                    strLocationIDDetais[i] = cursor2.getString(0);
                    cursor2.moveToNext();
                }

            }
            return strLocationIDDetais;
        } finally {
            cursor2.close();
            close();
        }
    }

    //sales target
    public  void deletetblTargetMnthPlan()
    {
        db.execSQL("DELETE FROM tblTargetMnthPlan");
    }

    public long savetblTargetMnthPlan(String MonthVal, String YearVal,String RotMonthYear,
                                      String StrToDisplay, String flgDefault,String flgPlanType)
    {
        /* private static final String DATABASE_CREATE_TABLE_tblTargetMnthPlan = "create table tblTargetMnthPlan(" +
            "MonthVal text null,YearVal text null,RotMonthYear text null,StrToDisplay text null,
            flgDefault text null,flgPlanType text null);";*/
        ContentValues initialValues = new ContentValues();

        initialValues.put("MonthVal", MonthVal.trim());
        initialValues.put("YearVal", YearVal.trim());
        initialValues.put("RotMonthYear", RotMonthYear.trim());
        initialValues.put("StrToDisplay", StrToDisplay.trim());
        initialValues.put("flgDefault", flgDefault.trim());
        initialValues.put("flgPlanType", flgPlanType.trim());

        return db.insert(DATABASE_TABLE_tblTargetMnthPlan, null, initialValues);
    }

    public LinkedHashMap<String,String> fetchTargetMnthPlan()
    {
        LinkedHashMap<String,String> hmap_Dbr=new LinkedHashMap<>();

        open();
        Cursor cursor=null;
        try
        {
            cursor=db.rawQuery("Select RotMonthYear,StrToDisplay from tblTargetMnthPlan where flgPlanType='"+1+"'",null);
            if(cursor.getCount()>0)
            {
                if(cursor.moveToFirst())
                {
                    for(int i=0;i<cursor.getCount();i++)
                    {
                        if(i==0)
                        {
                            hmap_Dbr.put("00","Select Target Month");
                        }
                        hmap_Dbr.put(cursor.getString(0),cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if(cursor != null)
            {
                cursor.close();
            }
            close();
            return  hmap_Dbr;
        }
    }

    public  void deletetblSalesAreaTargetDetail()
    {
        db.execSQL("DELETE FROM tblSalesAreaTargetDetail");
    }

    public long savetblSalesAreaTargetDetail(String TargetLevelNodeID, String TargetLevelNodeType,String TargetLevelName,
                                             String PrdNodeID, String PrdNodeType,String ProductName,String MeasureID,
                                             String targetValue)
    {
        /* private static final String DATABASE_CREATE_TABLE_tblSalesAreaTargetDetail =
        "create table tblSalesAreaTargetDetail(" +
            "TargetLevelNodeID text null,TargetLevelNodeType text null,TargetLevelName text null,
            PrdNodeID text null," +
            "PrdNodeType text null,ProductName text null,MeasureID text null,targetValue text null);";*/

        ContentValues initialValues = new ContentValues();

        initialValues.put("TargetLevelNodeID", TargetLevelNodeID.trim());
        initialValues.put("TargetLevelNodeType", TargetLevelNodeType.trim());
        initialValues.put("TargetLevelName", TargetLevelName.trim());
        initialValues.put("PrdNodeID", PrdNodeID.trim());
        initialValues.put("PrdNodeType", PrdNodeType.trim());
        initialValues.put("ProductName", ProductName.trim());
        initialValues.put("MeasureID", MeasureID.trim());
        initialValues.put("targetValue", targetValue.trim());

        return db.insert(DATABASE_TABLE_tblSalesAreaTargetDetail, null, initialValues);
    }

    public  void deletetblFlgEditeable()
    {
        db.execSQL("DELETE FROM tblFlgEditeable");
    }

    public long savetblFlgEditeable(String flgStatus)
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put("flgStatus", flgStatus.trim());

        return db.insert(DATABASE_TABLE_tblFlgEditeable, null, initialValues);
    }

    public int fetchtblSalesTargetFlg()
    {
        Integer flg=0;

        open();
        Cursor cursor=null;
        try
        {
            cursor=db.rawQuery("Select flgStatus from tblFlgEditeable",null);
            if(cursor.getCount()>0)
            {
                if(cursor.moveToFirst())
                {
                    for(int i=0;i<cursor.getCount();i++)
                    {
                        flg=cursor.getInt(0);

                        System.out.println("FLG STATUS..."+flg);
                        cursor.moveToNext();
                    }
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if(cursor != null)
            {
                cursor.close();
            }
            close();
            return  flg;
        }
    }

    public LinkedHashMap<String,ArrayList<String>> fetchtblSalesAreaTargetDetail()
    {
        LinkedHashMap<String,ArrayList<String>> hmap_Dbr=new LinkedHashMap<>();
        ArrayList<String> list=new ArrayList<>();
        String prvsTargetNodeID="",prvsTargetNodeType="",hmapKey="";

        open();
        Cursor cursor=null;
        try
        {
            cursor=db.rawQuery("Select distinct TargetLevelNodeID,TargetLevelNodeType,TargetLevelName,PrdNodeID,PrdNodeType,ProductName,targetValue from tblSalesAreaTargetDetail",null);
            if(cursor.getCount()>0)
            {
                if(cursor.moveToFirst())
                {
                    for(int i=0;i<cursor.getCount();i++)
                    {
                        if(prvsTargetNodeID.equals(cursor.getString(0)) && prvsTargetNodeType.equals(cursor.getString(1)))
                        {
                            list.add(cursor.getString(3)+"^"+cursor.getString(4)+"^"+cursor.getString(5)+"^"+cursor.getString(6));
                            hmap_Dbr.put(hmapKey,list);
                        }
                        else
                        {
                            prvsTargetNodeID=cursor.getString(0);
                            prvsTargetNodeType=cursor.getString(1);
                            hmapKey=cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2);
                            list=new ArrayList<>();
                            list.add(cursor.getString(3)+"^"+cursor.getString(4)+"^"+cursor.getString(5)+"^"+cursor.getString(6));
                            hmap_Dbr.put(hmapKey,list);
                        }

                        System.out.println("DISTINCT DATA..."+cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2)+"^"+
                                cursor.getString(3)+"^"+cursor.getString(4)+"^"+cursor.getString(5)+"^"+cursor.getString(6));
                        cursor.moveToNext();
                    }
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if(cursor != null)
            {
                cursor.close();
            }
            close();
            return  hmap_Dbr;
        }
    }

    public long savetblSalesTargetSavingDetail(Integer MonthID,Integer MeasureID,String TargetLevelNodeID, String TargetLevelNodeType,
                                               String PrdNodeID, String PrdNodeType,String targetValue,Integer Sstat)
    {
        /* create table tblSalesTargetSavingDetail(" +
            "MonthID int null,TargetLevelNodeID text null,TargetLevelNodeType text null,PrdNodeID text null," +
            "PrdNodeType text null,targetValue text null,Sstat int null*/

        ContentValues initialValues = new ContentValues();

        initialValues.put("MonthID", MonthID);
        initialValues.put("MeasureID", MeasureID);
        initialValues.put("TargetLevelNodeID", TargetLevelNodeID.trim());
        initialValues.put("TargetLevelNodeType", TargetLevelNodeType.trim());
        initialValues.put("PrdNodeID", PrdNodeID.trim());
        initialValues.put("PrdNodeType", PrdNodeType.trim());
        initialValues.put("targetValue", targetValue.trim());
        initialValues.put("Sstat", Sstat);

        return db.insert(DATABASE_TABLE_tblSalesTargetSavingDetail, null, initialValues);
    }

    public void deletetblSalesTargetSavingDetail(String MonthID,String MeasureID)
    {
        db.execSQL("DELETE FROM tblSalesTargetSavingDetail where MonthID='"+MonthID+"' AND MeasureID='"+MeasureID+"'");
        db.execSQL("DELETE FROM tblSalesTargetUserDetails");
    }

    public LinkedHashMap<String,String> getSavedtargetData()
    {
        LinkedHashMap<String,String> hmap_Dbr=new LinkedHashMap<>();
        open();
        Cursor cursor=null;
        try
        {
            cursor=db.rawQuery("Select MonthID,TargetLevelNodeID,TargetLevelNodeType,PrdNodeID,PrdNodeType,targetValue,Sstat,MeasureID from tblSalesTargetSavingDetail where Sstat='"+1+"' or Sstat='"+4+"'",null);
            if(cursor.getCount()>0)
            {
                if(cursor.moveToFirst())
                {
                    for(int i=0;i<cursor.getCount();i++)
                    {
                        hmap_Dbr.put(cursor.getString(1)+"^"+cursor.getString(2)+"^"+cursor.getString(3)+"^"+cursor.getString(4)+"^"+cursor.getString(0)+"^"+cursor.getString(7),cursor.getString(5)+"^"+cursor.getString(6));
                        System.out.println("FETCHED DATA..."+cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2)+"^"+
                                cursor.getString(3)+"^"+cursor.getString(4)+"^"+cursor.getString(5)+"^"+cursor.getString(6));
                        cursor.moveToNext();
                    }
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if(cursor != null)
            {
                cursor.close();
            }
            close();
            return  hmap_Dbr;
        }
    }

    public void UpdateTargetTblSstatByFlg(String tableName,int flag2set)
    {
        try
        {
            db.execSQL("UPDATE "+tableName+" SET Sstat="+flag2set+" where Sstat='"+3+"'");
        }
        catch (Exception ex)
        {
            String ex1=ex.getMessage();
            System.out.println("ERROR IN UPDATING SSTAT..."+ex1);
        }
    }

    public void UpdateTargetTblSstat(String tableName,int flag2set)
    {
        try
        {
            db.execSQL("UPDATE "+tableName+" SET Sstat="+flag2set);
        }
        catch (Exception ex)
        {
            String ex1=ex.getMessage();
            System.out.println("ERROR IN UPDATING SSTAT..."+ex1);
        }
    }

    public void deletetblTargetSavingBySstat(String tblName)
    {
        Cursor cursor=null;
        try{
            cursor=db.rawQuery("Select * from "+tblName+"",null);
            if(cursor.getCount()>0)
            {
                db.execSQL("DELETE FROM "+tblName+" where Sstat='"+4+"'");
            }
        }
        catch(Exception e)
        {}
        finally {
            if(cursor != null)
            {
                cursor.close();
            }
        }
    }

    public void savetblSalesTargetUserDetails(String IMEINo,Integer MonthID,Integer MeasureID,String SalesAreaId,
                                              String SalesAreaNodeType,String DateTime,Integer Sstat)
    {
        /*create table tblSalesTargetUserDetails(IMEINo text null,MonthID int null,
        SalesAreaId text null,SalesAreaNodeType text null,DateTime text null);";*/
        open();
        ContentValues initialValues = new ContentValues();

        initialValues.put("IMEINo", IMEINo.trim());
        initialValues.put("MonthID", MonthID);
        initialValues.put("MeasureID", MeasureID);
        initialValues.put("SalesAreaId", SalesAreaId.trim());
        initialValues.put("SalesAreaNodeType", SalesAreaNodeType.trim());
        initialValues.put("DateTime", DateTime.trim());
        initialValues.put("Sstat", Sstat);

        db.insert(TABLE_tblSalesTargetUserDetails, null, initialValues);
        close();
    }

    public  void deletetblSalestargetMeasure()
    {
        db.execSQL("DELETE FROM tblSalestargetMeasure");
    }

    public long savetblSalestargetMeasure(String TgtMeasueId, String TgtMeasueName,String flgActive)
    {
        /* create table tblSalestargetMeasure(TgtMeasueId text null,TgtMeasueName text null,flgActive text null);";*/
        ContentValues initialValues = new ContentValues();

        initialValues.put("TgtMeasueId", TgtMeasueId.trim());
        initialValues.put("TgtMeasueName", TgtMeasueName.trim());
        initialValues.put("flgActive", flgActive.trim());

        return db.insert(TABLE_tblSalestargetMeasure, null, initialValues);
    }

    public LinkedHashMap<String,String> fetchTargetMeasureMstr()
    {
        LinkedHashMap<String,String> hmap_Dbr=new LinkedHashMap<>();

        open();
        Cursor cursor=null;
        try
        {
            cursor=db.rawQuery("Select TgtMeasueId,TgtMeasueName,flgActive from tblSalestargetMeasure",null);
            if(cursor.getCount()>0)
            {
                if(cursor.moveToFirst())
                {
                    for(int i=0;i<cursor.getCount();i++)
                    {
                        if(i==0)
                        {
                            hmap_Dbr.put("0","Select Measure^1");
                        }
                        hmap_Dbr.put(cursor.getString(0),cursor.getString(1)+"^"+cursor.getString(2));
                        cursor.moveToNext();
                    }
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if(cursor != null)
            {
                cursor.close();
            }
            close();
            return  hmap_Dbr;
        }
    }

    public LinkedHashMap<String, String> fnGetPaymentMode()
    {
        LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
        open();
        // Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
        Cursor cursor = db.rawQuery("SELECT InstrumentModeId,InstrumentMode from tblInstrumentMaster   ", null);// Where PNodeID='"+TSIID+"'
        // (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(0),(String) cursor.getString(1));
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        }
        finally
        {
            cursor.close();
            close();
        }
    }
    public LinkedHashMap<String, String> fnGetBankIdData()
    {
        LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
        open();
        // Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
        Cursor cursor = db.rawQuery("SELECT BankId,BankName from tblBankMaster   ", null);// Where PNodeID='"+TSIID+"'
        // (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(0),(String) cursor.getString(1));
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        }
        finally
        {
            cursor.close();
            close();
        }
    }


    public String  fnRetrieveCollectionDataBasedOnStoreID(String StoreID,String OrderPDAID)
    {
        String flag="0";
        try {
            open();
            Cursor cursor = db.rawQuery("SELECT PaymentMode, PaymentModeID,Amount,RefNoChequeNoTrnNo,Date,Bank from tblAllCollectionData where StoreID = '"+StoreID +"' and OrderPDAID='"+OrderPDAID +"'", null);

            if(cursor.getCount()>0){
                if (cursor.moveToFirst()){
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        if(flag.equals("0")){
                            flag= cursor.getString(0) +"^"+ cursor.getString(1) +"^"+ cursor.getString(2) +"^"+ cursor.getString(3) +"^"+ cursor.getString(4) +"^"+ cursor.getString(5);

                        }
                        else{
                            flag=flag+"$"+ cursor.getString(0) +"^"+ cursor.getString(1) +"^"+ cursor.getString(2) +"^"+ cursor.getString(3) +"^"+ cursor.getString(4) +"^"+ cursor.getString(5);
                        }
                        cursor.moveToNext();
                    }

                }}
            return flag;
        }catch(Exception e)
        {

        }

        finally
        {

            close();
            return flag;
        }
    }
    public LinkedHashMap<String, String> fnGettblBankMaster()
    {
        LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();
        open();
        // Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
        Cursor cursor = db.rawQuery("SELECT BankId,BankName from tblBankMaster   ", null);// Where PNodeID='"+TSIID+"'
        // (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(1),(String) cursor.getString(0));
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        }
        finally
        {
            cursor.close();
            close();
        }
    }
    public void deleteWhereStoreId(String StoreID,String OrderPDAID)
    {

        db.execSQL("DELETE FROM tblAllCollectionData WHERE StoreID ='" + StoreID +"' and OrderPDAID='" + OrderPDAID +"'");
    }

    public long savetblAllCollectionData(String StoreID, String paymentMode,String PaymentModeID, String Amount,
                                         String RefNoChequeNoTrnNo, String Date, String Bank, String OrderPDAID)
    {

        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("PaymentMode", paymentMode.trim());
        initialValues.put("PaymentModeID", PaymentModeID.trim());
        initialValues.put("Amount", Amount.trim());
        initialValues.put("RefNoChequeNoTrnNo", RefNoChequeNoTrnNo.trim());
        initialValues.put("Date", Date.trim());
        initialValues.put("Bank", Bank.trim());
        initialValues.put("Sstat", "1");
        initialValues.put("OrderPDAID", OrderPDAID.trim());
       /* initialValues.put("AmountChequesOrDD", AmountSecondString.toString().trim());
        initialValues.put("CashID", "1");
        initialValues.put("RefNoChequeNoTrnNo", ChequeNoSecondString.toString().trim());
        initialValues.put("DateChequesOrDD", DateSecondString.toString().trim());
        initialValues.put("BankChequesOrDD", BankSecondString.toString().trim());

        initialValues.put("ElectronicID", "3");
        initialValues.put("PaymentModeElectronic", paymentModeThirdString.toString().trim());
        initialValues.put("AmountElectronic", AmountThirdString.toString().trim());
        initialValues.put("RefNoChequeNoTrnNoElectronic", ChequeNoThirdString.toString().trim());
        initialValues.put("DateElectronic", DateThirdString.toString().trim());
        initialValues.put("BankElectronic",  BankThirdString.toString().trim());
        initialValues.put("Sstat", "1");
        initialValues.put("OrderPDAID", OrderPDAID);*/


        return db.insert(DATABASE_TABLE_tblAllCollectionData, null, initialValues);
    }
    public long savetblBankMaster(String BankId, String BankName, String LoginIdIns, String TimeStampIns, String LoginIdUpd, String TimeStampUpd)
    {

        ContentValues initialValues = new ContentValues();

        initialValues.put("BankId", BankId.trim());
        initialValues.put("BankName", BankName.trim());
        initialValues.put("LoginIdIns", LoginIdIns.trim());
        initialValues.put("TimeStampIns", TimeStampIns.trim());
        initialValues.put("LoginIdUpd", LoginIdUpd.trim());
        initialValues.put("TimeStampUpd", TimeStampUpd.trim());


        return db.insert(DATABASE_TABLE_tblBankMaster, null, initialValues);
    }
    public long savetblInstrumentMaster(String InstrumentModeId, String InstrumentMode, String InstrumentType)
    {

        ContentValues initialValues = new ContentValues();

        initialValues.put("InstrumentModeId", InstrumentModeId.trim());
        initialValues.put("InstrumentMode", InstrumentMode.trim());
        initialValues.put("InstrumentType", InstrumentType.trim());

        return db.insert(DATABASE_TABLE_tblInstrumentMaster, null, initialValues);
    }

    public void deleteAllCollectionTables()
    {

        db.execSQL("DELETE FROM tblBankMaster");
        db.execSQL("DELETE FROM tblInstrumentMaster");
        db.execSQL("DELETE FROM tblAllCollectionData");


    }

    public String[] getAllStoreClosePhotoDetail()
    {

        int SnamecolumnIndex1 = 0;


        Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tblStoreClosedPhotoDetail where Sstat=5", null);
        //Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
        try
        {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst())
            {
                for (int i = 0; i <= (cursor.getCount() - 1); i++)
                {
                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
                    cursor.moveToNext();
                }
            }

            return StoreName;
        }
        finally
        {
            cursor.close();
        }

    }


    public int getExistingPicNosForStoreClose(String StoreID)
    {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tblStoreClosedPhotoDetail where StoreID='" + StoreID + "'", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex));
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public String[] getImgsPathForStoreClose(String StoreID)
    {

        int SnamecolumnIndex1 = 0;

        Cursor cursor = db.rawQuery("SELECT PhotoName FROM tblStoreClosedPhotoDetail WHERE StoreID ='"+ StoreID + "'", null);
        try
        {

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst())
            {

                for (int i = 0; i <= (cursor.getCount() - 1); i++)
                {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1);
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }
    public void updateImageRecordsSyncdForStoreClose(String PhotoName)
    {

        try
        {
            open();
            //System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
            final ContentValues values = new ContentValues();
            values.put("Sstat", 4);

            int affected3 = db.update("tblStoreClosedPhotoDetail", values, "PhotoName=?",new String[] { PhotoName });
        }
        catch (Exception ex)
        {
            Log.e(TAG, ex.toString());
        }
        finally
        {
            close();
        }


    }

    public void UpdateStoreClosephotoFlag(String sID, int flag2set)
    {
        try
        {
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected16 = db.update("tblStoreClosedPhotoDetail", values,"StoreID=?", new String[] { sID });
        }
        catch (Exception ex)
        {
            Log.e(TAG, ex.toString());
        }
    }

    public void UpdateStoreClosephotoWithOutFlag(String sID, int flag2set)
    {
        try
        {
            // final ContentValues values = new ContentValues();
            //values.put("Sstat", flag2set);
            // int affected16 = db.update("tblStoreClosedPhotoDetail", values,"", new String[] {  });
            db.execSQL("UPDATE tblStoreClosedPhotoDetail SET Sstat=5 where Sstat="+ 3);
        }
        catch (Exception ex)
        {
            Log.e(TAG, ex.toString());
        }
    }


    public void deletetblStateCityMaster()
    {
        open();
        db.execSQL("DELETE FROM tblStateCityMaster");
        close();
    }

    public void deleteSurveyTables()
    {
        open();
        db.execSQL("DELETE FROM tblQuestionsSurvey");
        db.execSQL("DELETE FROM tblOptionSurvey");
        db.execSQL("DELETE FROM tblSurveyData");
        close();
    }
    public void deletetblSurveyData(String StoreID)
    {

        db.execSQL("DELETE FROM tblSurveyData where StoreID='"+StoreID+"'");


    }

    public void fnsavetblStateCityMaster(String StateID, String State, String CityID, String City,int cityDefault)
    {

        ContentValues values=new ContentValues();
        values.put("StateID", Integer.parseInt(StateID));
        values.put("State", State);
        values.put("CityID", Integer.parseInt(CityID));
        values.put("City", City);
        values.put("CityDefault", cityDefault);

        db.insert(TABLE_tblStateCityMaster , null, values);

    }
    public void fnsavetblQuestionsSurvey(String QstnID, String QstnText, String flgActive, String flgOrder)
    {

        ContentValues values=new ContentValues();
        values.put("QstnID", QstnID);
        values.put("QstnText", QstnText);
        values.put("flgActive", flgActive);
        values.put("flgOrder", flgOrder);


        db.insert(DATABASE_TABLE_tblQuestionsSurvey , null, values);

    }

    public void fnsavetblOptionSurvey(String OptionID, String OptionText, String QstnID, String flgaActive)
    {

        ContentValues values=new ContentValues();
        values.put("OptionID", OptionID);
        values.put("OptionText", OptionText);
        values.put("QstnID", QstnID);
        values.put("flgaActive", flgaActive);


        db.insert(DATABASE_TABLE_tblOptionSurvey , null, values);

    }

    public void fnsavetblSurveyData(String StoreID, String QstnID, String OptionID,String OptionText, String DateTime,int Sstat,String Latitude, String Longitude, String Accuracy)
    {

        ContentValues values=new ContentValues();
        values.put("StoreID", StoreID);
        values.put("QstnID", QstnID);
        values.put("OptionID", OptionID);
        values.put("OptionText", OptionText);
        values.put("DateTime", DateTime);
        values.put("Latitude", Latitude);
        values.put("Longitude", Longitude);
        values.put("Accuracy", Accuracy);
        values.put("Sstat", Sstat);


        db.insert(DATABASE_TABLE_tblSurveyData , null, values);

    }
    public LinkedHashMap<String, String> fngetDistinctState()
    {

        open();
        Cursor cur=null;
        LinkedHashMap<String, String> hmapDistinctStates= new LinkedHashMap<>();
        try {
            cur=db.rawQuery("Select Distinct StateID,State from tblStateCityMaster", null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    for(int i=0;i<cur.getCount();i++)
                    {
                        hmapDistinctStates.put(cur.getString(1), cur.getString(0));
                        cur.moveToNext();
                    }
                }

            }

        } catch (SQLiteException e) {
            // TODO: handle exception
        }
        finally
        {
            if(cur!=null)
            {
                cur.close();
            }
            close();
            return hmapDistinctStates;
        }
    }

    public LinkedHashMap<String, String> fngettblQuestionsSurvey()
    {

        open();
        Cursor cur=null;
        LinkedHashMap<String, String> hmapDistinctStates= new LinkedHashMap<>();
        try {
            cur=db.rawQuery("Select Distinct QstnID,QstnText,flgActive from tblQuestionsSurvey Order BY flgOrder", null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    for(int i=0;i<cur.getCount();i++)
                    {
                        hmapDistinctStates.put(cur.getString(0), cur.getString(1)+"^"+cur.getString(2));
                        cur.moveToNext();
                    }
                }

            }

        } catch (SQLiteException e) {
            // TODO: handle exception
        }
        finally
        {
            if(cur!=null)
            {
                cur.close();
            }
            close();
            return hmapDistinctStates;
        }
    }

    public LinkedHashMap<String, String> fngettblOptionSurvey(String QstnID)
    {

        open();
        Cursor cur=null;
        LinkedHashMap<String, String> hmapDistinctStates= new LinkedHashMap<>();
        try {
            cur=db.rawQuery("Select Distinct OptionID,OptionText,flgaActive from tblOptionSurvey where QstnID='"+QstnID+"'", null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    for(int i=0;i<cur.getCount();i++)
                    {
                        hmapDistinctStates.put(cur.getString(0),  cur.getString(1)+"^"+cur.getString(2));
                        cur.moveToNext();
                    }
                }

            }

        } catch (SQLiteException e) {
            // TODO: handle exception
        }
        finally
        {
            if(cur!=null)
            {
                cur.close();
            }
            close();
            return hmapDistinctStates;
        }
    }

    public LinkedHashMap<String, String> fngetSubmittedSurvey()
    {

        open();
        Cursor cur=null;
        LinkedHashMap<String, String> hmapDistinctStates= new LinkedHashMap<>();
        try {
            cur=db.rawQuery("Select Distinct StoreID from tblSurveyData where Sstat='"+4+"'", null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    for(int i=0;i<cur.getCount();i++)
                    {
                        hmapDistinctStates.put(cur.getString(0),  cur.getString(0));
                        cur.moveToNext();
                    }
                }

            }

        } catch (SQLiteException e) {
            // TODO: handle exception
        }
        finally
        {
            if(cur!=null)
            {
                cur.close();
            }
            close();
            return hmapDistinctStates;
        }
    }

    public LinkedHashMap<String,String> getCityAgainstState()
    {
        open();
        LinkedHashMap<String,String> hmapCityAgainstState= new LinkedHashMap<>();
        Cursor cur=null;
        try {
            cur=db.rawQuery("Select City,State from tblStateCityMaster",null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    for(int i=0;i<cur.getCount();i++)
                    {
                        hmapCityAgainstState.put(cur.getString(0),cur.getString(1));
                        cur.moveToNext();
                    }
                }
            }
        }catch(SQLiteException exception)
        {

        }
        finally
        {
            if(cur!=null)
            {
                cur.close();
            }
            close();
            return hmapCityAgainstState;

        }
    }
    public LinkedHashMap<String, String> fngetCityList()
    {

        open();
        Cursor cur=null;
        LinkedHashMap<String, String> hmapCityList= new LinkedHashMap<>();
        try {
            cur=db.rawQuery("Select CityID,City from tblStateCityMaster", null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    for(int i=0;i<cur.getCount();i++)
                    {
                        hmapCityList.put(cur.getString(1).trim(), cur.getString(0));
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            // TODO: handle exception
        }
        finally
        {
            if(cur!=null)
            {
                cur.close();
            }
            close();
            return hmapCityList;
        }
    }

    public String getDefaultCity()
    {
        open();
        String defaultCity="";
        Cursor cur=null;
        try {
            cur=db.rawQuery("Select City from tblStateCityMaster where CityDefault=1",null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    defaultCity=cur.getString(0);
                }
            }
        }catch(SQLiteException exception)
        {

        }
        finally
        {
            if(cur!=null)
            {
                cur.close();
            }
            close();
            return defaultCity;
        }
    }
    public void updateAllDefaultCity(String cityId)
    {
        open();
        try {


            db.execSQL("UPDATE tblStateCityMaster SET CityDefault=0" );
            ContentValues values=new ContentValues();
            values.put("CityDefault",1);
            db.update(TABLE_tblStateCityMaster,values,"CityID=?",new String[]{cityId});
        }catch(SQLiteException exception)
        {

        }finally
        {
            close();
        }

    }
    public int CheckTableImageHaveData()
    {
        int chkI = 0;
        Cursor cursorE2=null;
        try
        {
            cursorE2 = db.rawQuery("SELECT Count(*) from tableImage ", null);
            if (cursorE2.moveToFirst())
            {

                if (cursorE2.getInt(0) > 0)
                {
                    chkI = 1;
                } else
                {
                    chkI = 0;
                }
            }

        } finally
        {
            if(cursorE2!=null){
                cursorE2.close();
            }
        }
        return chkI;
    }

    public int ChecktblStoreMaterialPhotoDetailHaveData()
    {
        int chkI = 0;
        Cursor cursorE2=null;
        try
        {
            cursorE2 = db.rawQuery("SELECT Count(*) from tblStoreMaterialPhotoDetail ", null);
            if (cursorE2.moveToFirst())
            {

                if (cursorE2.getInt(0) > 0)
                {
                    chkI = 1;
                } else
                {
                    chkI = 0;
                }
            }

        } finally
        {
            if(cursorE2!=null){
                cursorE2.close();
            }
        }
        return chkI;
    }

    public int ChecktblStoreProductPhotoDetailHaveData()
    {

        int chkI = 0;
        Cursor cursorE2=null;
        try
        {
            cursorE2 = db.rawQuery("SELECT Count(*) from tblStoreProductPhotoDetail ", null);
            if (cursorE2.moveToFirst())
            {

                if (cursorE2.getInt(0) > 0)
                {
                    chkI = 1;
                } else
                {
                    chkI = 0;
                }
            }

        } finally
        {
            if(cursorE2!=null){
                cursorE2.close();
            }
        }
        return chkI;
    }

    public int ChecktblStoreClosedPhotoDetailHaveData()
    {

        int chkI = 0;
        Cursor cursorE2=null;

        try
        {
            cursorE2 = db.rawQuery("SELECT Count(*) from tblStoreClosedPhotoDetail ", null);
            if (cursorE2.moveToFirst())
            {

                if (cursorE2.getInt(0) > 0)
                {
                    chkI = 1;
                } else
                {
                    chkI = 0;
                }
            }

        } finally
        {
            if(cursorE2!=null){
                cursorE2.close();
            }
        }
        return chkI;
    }

    public int ChecktblDsrRegDetailsHaveData()
    {

        int chkI = 0;
        Cursor cursorE2=null;
        try
        {
            cursorE2 = db.rawQuery("SELECT Count(*) from tblSoRegDetails ", null);
            if (cursorE2.moveToFirst())
            {

                if (cursorE2.getInt(0) > 0)
                {
                    chkI = 1;
                } else
                {
                    chkI = 0;
                }
            }

        } finally
        {
            if(cursorE2!=null){
                cursorE2.close();
            }

        }
        return chkI;
    }

    //actual visit stock
    public void saveTblActualVisitStock(String storeID,String ProductID,String Stock,int sStat)
    {
//(tblActualVisitStock (storeID text null,ProductID text null,Stock text null,Sstat integer null);";
        open();
        ContentValues initialValues = new ContentValues();
        initialValues.put("storeID",storeID);
        initialValues.put("ProductID", ProductID.trim());
        initialValues.put("Stock", Stock.trim());
        initialValues.put("Sstat", sStat);


        db.insert(DATABASE_TABLE_tblActualVisitStock, null, initialValues);
        close();
    }
    public LinkedHashMap<String,String> fetchActualVisitData(String storeID){
//tblActualVisitStock (ProductID text null,Stock text null);";
        LinkedHashMap<String,String> hmapData=new LinkedHashMap<>();
        Cursor cursor=null;

        try {
            cursor = db.rawQuery("SELECT ProductID,Stock from tblActualVisitStock  where storeID='"+storeID+"'", null);
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {

                        hmapData.put(cursor.getString(0),cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if(cursor !=null)
                cursor.close();
            return hmapData;
        }
    }


    public void deleteActualVisitData(String storeID) {
        open();

        db.execSQL("DELETE FROM tblActualVisitStock where storeID='"+storeID+"'");

    }


    public LinkedHashMap<String,String> fetchProductDataForActualVisit(){
//"create table tblProductList(CategoryID text  null,ProductID text  null, ProductShortName text  null,
// DisplayUnit text null, CalculateKilo real  null,ProductMRP real null, ProductRLP real null, ProductTaxAmount real null,
// KGLiter string null,RetMarginPer real null,VatTax real null,
// StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,
// StoreCatNodeId int null,SearchField text null,ManufacturerID int null);";
        LinkedHashMap<String,String> hmapData=new LinkedHashMap<>();
        Cursor cursor=null;

        try {
            cursor = db.rawQuery("SELECT ProductID,ProductShortName from tblProductList", null);
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {

                        hmapData.put(cursor.getString(0),cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if(cursor !=null)
                cursor.close();
            return hmapData;
        }
    }



    public LinkedHashMap<String,String> fetchProductStockFromPurchaseTable(String storeID){
//tblActualVisitStock (ProductID text null,Stock text null);";
        LinkedHashMap<String,String> hmapData=new LinkedHashMap<>();
        Cursor cursor=null;

        try {
            cursor = db.rawQuery("SELECT ProdID,Stock from tblStoreProdcutPurchaseDetails  where StoreID='"+storeID+"'", null);
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {

                        hmapData.put(cursor.getString(0),cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if(cursor !=null)
                cursor.close();
            return hmapData;
        }
    }



    public HashMap<String,String> fnGetLastStockByDMS_Or_SFA(String ssStoreID)
    {
        HashMap<String, String> hmapProductIdLastStock= new HashMap<>();
        open();
        Cursor cursor = db.rawQuery("SELECT ProductID,Stock FROM tblForPDAGetLastVisitDetails where StoreID= '" + ssStoreID + "'", null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {

                        hmapProductIdLastStock.put((String) cursor.getString(0),(String) cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
            return hmapProductIdLastStock;
        } finally {
            if(cursor!=null) {
                cursor.close();
            }
            close();
        }

    }

    public String fnGetLastStockDate(String ssStoreID)
    {
        String lstStockDate="";
        open();
        Cursor cursor = db.rawQuery("SELECT Date123 FROM tblForPDAGetLastVisitDetails where StoreID= '" + ssStoreID + "'", null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {

                        lstStockDate=cursor.getString(0);
                        cursor.moveToNext();
                    }
                }
            }
            return lstStockDate;
        } finally {
            if(cursor!=null) {
                cursor.close();
            }
            close();
        }

    }

    public void updateflgOrderTypeIntblStoreList(String StoreID, int flgOrderType) {

        try {

            open();
            final ContentValues values = new ContentValues();
            values.put("flgOrderType", flgOrderType);

            int affected = db.update("tblStoreList", values, "StoreID=?",
                    new String[] { StoreID });



        } catch (Exception ex)
        {
            Log.e(TAG, ex.toString());
        }
        finally {
            close();
        }

    }
/*Scheme*/

    public long fnsavetblStoreProductAddOnSchemeApplied(String StoreID,int ProdID,int schId, int schSlabId,int schSlbBuckId, double schSlabSubBucketValue,int schSubBucketValType,
                                                        int schSlabSubBucketType, int BenifitRowID, int BenSubBucketType,
                                                        int FreeProductID, double BenifitSubBucketValue, double BenifitMaxValue, double BenifitAssignedValue, double BenifitAssignedValueType, int BenifitDiscountApplied, String BenifitCouponCode,double per,double UOM,int WhatFinallyApplied,int schSlbRowId, int SchTypeId,String pdaOrderID,int flgAddOn,int isDiscountOnTotalAmount){
        //StoreID text not null,ProductID int not null,schId int not null,schSlabId integer not null,schSlbBuckId integer not null,schSlabSubBucketValue real not null,
        //schSubBucketValType integer not null,schSlabSubBucketType int not null,BenifitRowID integer not null,BenSubBucketType int null,FreeProductID int null,
        //BenifitSubBucketValue real null,BenifitMaxValue real null,BenifitAssignedValue real null,BenifitAssignedValueType int null,BenifitDiscountApplied int null,
        //BenifitCouponCode text null
        String activeRid;
        // activeRid = GetActiveRouteID();
        open();

        Cursor cur=db.rawQuery("Select schSlabId from tblStoreProductAddOnSchemeApplied where StoreID='"+StoreID+"' AND ProductID="+ProdID+" AND schId="+schId+" AND schSlabId="+schSlabId,null);
        if(cur!=null)
        {
            if(cur.getCount()>0)
            {
                if(cur!=null)
                {
                    cur.close();
                }
                close();
                return 1;
            }
        }
        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("ProductID", ProdID);
        initialValues.put("schId", schId);
        initialValues.put("schSlabId", schSlabId);
        initialValues.put("schSlbBuckId", schSlbBuckId);
        initialValues.put("schSlabSubBucketValue", schSlabSubBucketValue);
        initialValues.put("schSubBucketValType", schSubBucketValType);
        initialValues.put("schSlabSubBucketType", schSlabSubBucketType);
        initialValues.put("BenifitRowID", BenifitRowID);

        initialValues.put("BenSubBucketType", BenSubBucketType);

        initialValues.put("FreeProductID", FreeProductID);

        initialValues.put("BenifitSubBucketValue", BenifitSubBucketValue);

        initialValues.put("BenifitMaxValue", BenifitMaxValue);
        initialValues.put("BenifitAssignedValue", BenifitAssignedValue);
        initialValues.put("BenifitAssignedValueType", BenifitAssignedValueType);

        initialValues.put("BenifitDiscountApplied", BenifitDiscountApplied);
        initialValues.put("BenifitCouponCode", BenifitCouponCode);

        initialValues.put("PER", per);
        initialValues.put("UOM", UOM);
        initialValues.put("Sstat", 0);
        initialValues.put("schSlbRowId", schSlbRowId);
        initialValues.put("SchTypeId", SchTypeId);
        initialValues.put("WhatFinallyApplied", WhatFinallyApplied);
        initialValues.put("OrderIDPDA", pdaOrderID);
        initialValues.put("flgAddOn", flgAddOn);
        initialValues.put("isDiscountOnTotalAmount", isDiscountOnTotalAmount);

        // System.out.println("Save Data Save in Table 211");

        long xyx= db.insert(DATABASE_TABLE_ADDONSCHEME, null, initialValues);
        close();
        return xyx;
    }


    public String fnctnGetADDOnDiscountPercentge(String freeProductId,String storeId)
    {
        open();
        String highestDiscount="0^0^0";
        Cursor cursor=db.rawQuery("Select  SUM(BenifitAssignedValue),BenifitRowID,isDiscountOnTotalAmount from tblStoreProductAddOnSchemeApplied where StoreID='"+storeId+"' and FreeProductID='"+freeProductId+"' and BenSubBucketType in (2,6) Limit 1", null);
        try {
            if(cursor.getCount()>0)
            {
                if(cursor.moveToFirst())
                {
                    //highestDiscount=cursor.getString(0)+"^"+cursor.getString(1);
                    if(cursor.getString(0)==null)
                    {
                        highestDiscount="0^0^0";
                    }
                    else
                    {
                        highestDiscount=cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2);
                    }
                }
            }
            if(cursor!=null)
            {
                cursor.close();
            }
            close();
        } catch (Exception ex) {
            close();
            Log.e(TAG, ex.toString());
        }


        return highestDiscount;
    }

    public String fnctnGetADDOnHighestDiscountAmount(String freeProductId,String storeId)
    {
        open();
        String highestDiscount="0^0^0";
        Cursor cursor=db.rawQuery("Select  Max(BenifitAssignedValue),BenifitRowID,isDiscountOnTotalAmount from tblStoreProductAddOnSchemeApplied where StoreID='"+storeId+"' and ProductID='"+freeProductId+"' and BenSubBucketType in (3,7,10) Limit 1", null);
        try {
            if(cursor.getCount()>0)
            {
                if(cursor.moveToFirst())
                {
                    //highestDiscount=cursor.getString(0)+"^"+cursor.getString(1);
                    if(cursor.getString(0).equals(null))
                    {
                        highestDiscount="0^0^0";
                    }
                    else
                    {
                        highestDiscount=cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2);
                    }
                }
            }
            if(cursor!=null)
            {
                cursor.close();
            }
            close();
        } catch (Exception ex) {
            close();
            Log.e(TAG, ex.toString());
        }



        return highestDiscount;
    }

    public void fnDeleteRecordsStoreProductAddOnSchemeApplied(String StoreID,int ProductIdOnClicked,String pdaOrderID)
    {
        open();
        // db.execSQL("DELETE FROM tblStoreProductAddOnSchemeApplied WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and ProductID="+ Integer.parseInt(ProductIdOnClicked));
        db.execSQL("DELETE FROM tblStoreProductAddOnSchemeApplied WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and schId="+ ProductIdOnClicked);

        close();
    }

    public void fnDeleteRecordsAllRecordsForClickedProdoductIdSchm_1_3(String StoreID,int ProductIdOnClicked,String pdaOrderID,int schmId)
    {
        open();
        db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and ProductID="+ ProductIdOnClicked+" and schId="+ schmId);
        // db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and schId="+ ProductIdOnClicked);
        close();
    }

    public void fnDeleteRecordsStoreProductAddOnSchemeAppliedSchm_1_3(String StoreID,int ProductIdOnClicked,String pdaOrderID,int schmId)
    {
        open();
        db.execSQL("DELETE FROM tblStoreProductAddOnSchemeApplied WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and ProductID="+ ProductIdOnClicked+" and schId="+ schmId);
        // db.execSQL("DELETE FROM tblStoreProductAddOnSchemeApplied WHERE StoreID ='"+ StoreID + "' and OrderIDPDA='"+pdaOrderID+"' and schId="+ ProductIdOnClicked);

        close();
    }


    public long savetblProductADDONScheme(String ProductID, String PrdString)
    {

        ContentValues initialValues = new ContentValues();
        initialValues.put("ProductID", ProductID.trim());
        initialValues.put("PrdString", PrdString.trim());

        // System.out.println("Ajay Data Save in table 209");
        return db.insert(DATABASE_TABLE_MAINADDOnScheme, null, initialValues);
    }

    public HashMap<String, String> fnProductADDOnScheme()
    {
        open();
        //
        Cursor cursor = db.rawQuery("SELECT Distinct ProductID,PrdString from tblProductADDONScheme", null);
        try
        {
            HashMap<String, String> SchemeIDFreePRodQtyDetails= new HashMap<>();
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        SchemeIDFreePRodQtyDetails.put(cursor.getString(0), cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
            return SchemeIDFreePRodQtyDetails;
        }
        finally
        {
            if(cursor!=null)
            {
                cursor.close();
            }
            close();
        }
    }

    public void insertTblProductAlertNearestSchmApld(String RowID,String ProductID,String SchemeID,String SchemeSlabID,String SlabSubBucketType,String SlabSubBucketMin,String SlabSubBucketMax)
    {
        ContentValues values=new ContentValues();
        values.put("RowID",RowID);
        values.put("ProductID",ProductID);
        values.put("SchemeID",SchemeID);
        values.put("SchemeSlabID",SchemeSlabID);
        values.put("SlabSubBucketType",SlabSubBucketType);
        values.put("SlabSubBucketMin",SlabSubBucketMin);
        values.put("SlabSubBucketMax",SlabSubBucketMax);
        db.insert(DATABASE_TABLE_AlertNearestSchmApld,null,values);
    }

    public LinkedHashMap<String,ArrayList<String>> getProductMinMax()
    {
        open();
        Cursor cur=null;
        LinkedHashMap<String,ArrayList<String>> hmapProductMinMax= new LinkedHashMap<>();
        ArrayList<String> listMinMax= new ArrayList<>();
        try {
            cur=db.rawQuery("Select ProductID,SlabSubBucketMin||'~'||SlabSubBucketMax As SlabMinMax,SlabSubBucketType,SchemeID||'$'||SchemeSlabID As SchmIdSabId from tblProductAlertNearestSchmApld Order By ProductID",null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    String prodctId,prvsPrdctId = null;
                    for(int i=0;i<cur.getCount();i++)
                    {
                        prodctId=cur.getString(0);
                        if(i==0)
                        {
                            prvsPrdctId=cur.getString(0);
                            listMinMax.add(cur.getString(1)+"^"+cur.getString(2)+"#"+cur.getString(3));
                            //hmapProductMinMax.put()
                        }
                        else
                        {
                            if(prvsPrdctId.equals(prodctId))
                            {
                                listMinMax.add(cur.getString(1)+"^"+cur.getString(2)+"#"+cur.getString(3));
                            }
                            else
                            {
                                hmapProductMinMax.put(prvsPrdctId,listMinMax);
                                listMinMax= new ArrayList<>();
                                listMinMax.add(cur.getString(1)+"^"+cur.getString(2)+"#"+cur.getString(3));
                                prvsPrdctId=prodctId;
                            }
                        }
                        if(i==(cur.getCount()-1))
                        {
                            hmapProductMinMax.put(prvsPrdctId,listMinMax);
                        }
                        cur.moveToNext();
                    }
                }
            }
        }catch(SQLiteException exception)
        {
            System.out.println("Error = "+exception.toString());
        }
        finally {
            if(cur!=null)
            {
                cur.close();

            }
            close();
            return hmapProductMinMax;
        }

    }

    public LinkedHashMap<String,String> getSchmDscrptnAndBenfit() {
        open();
        Cursor cur = null;
        LinkedHashMap<String, String> hmapSchmDscrptnAndBenfit = new LinkedHashMap<>();
        ArrayList<String> listMinMax = new ArrayList<>();
        try {
            //||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax
            // tblSchemeSlabDetail (SchemeID text null,SchemeSlabID text null,SchemeSlabDesc text null,BenifitDescr text null);";
            cur = db.rawQuery("Select tblProductAlertNearestSchmApld.SchemeID||'$'||tblProductAlertNearestSchmApld.SchemeSlabID AS SchmIdSlabId,tblSchemeSlabDetail.SchemeSlabDesc||'^'||tblSchemeSlabDetail.BenifitDescr As SchemeDescrption from tblProductAlertNearestSchmApld inner join tblSchemeSlabDetail ON tblProductAlertNearestSchmApld.SchemeID=tblSchemeSlabDetail.SchemeID AND tblProductAlertNearestSchmApld.SchemeSlabID=tblSchemeSlabDetail.SchemeSlabID", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {

                    for (int i = 0; i < cur.getCount(); i++) {

                        hmapSchmDscrptnAndBenfit.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }
            }
        } catch (SQLiteException exception) {

        } finally {
            if (cur != null) {
                cur.close();

            }
            close();
            return hmapSchmDscrptnAndBenfit;
        }
    }

    public String[] fetch_Store_tblInvoiceLastVisitDetails(String StoreID)
    {
//tv_GrossInvVal
        open();

        Cursor	cursor = db.rawQuery("SELECT ifnull(tblInvoiceLastVisitDetails.InvCode,'0.0'),ifnull(tblInvoiceLastVisitDetails.InvDate,'NA'),ifnull(tblInvoiceLastVisitDetails.OutstandingAmt,'0.0'),ifnull(tblInvoiceLastVisitDetails.AmtOverdue,'0.0') from tblInvoiceLastVisitDetails WHERE tblInvoiceLastVisitDetails.StoreID='"+StoreID+"'", null); //order by AutoIdOutlet Desc
        String InvoiceLastVisitDetails[]= new String[cursor.getCount()];
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        InvoiceLastVisitDetails[i]= cursor.getString(0) +"^"+ cursor.getString(1) +"^"+ cursor.getString(2) +"^"+ cursor.getString(3);
                        cursor.moveToNext();
                    }
                }
            }
            return InvoiceLastVisitDetails;
        }
        finally
        {
            if(cursor!=null) {
                cursor.close();
            }
            close();
        }
    }


    public double fnGetStoretblLastOverDue(String storeID)
    {
        open();
        double LastOutstanding=0.0;
        // tblLastOutstanding(StoreID text null,Outstanding real null,AmtOverdue real null);";
        Cursor cursor=db.rawQuery("Select AmtOverdue from tblLastOutstanding WHERE StoreID='"+storeID+"'",null);

        if(cursor.getCount()>0)
        {
            if(cursor.moveToFirst())
            {
                LastOutstanding=Double.parseDouble(cursor.getString(0));
            }
        }
        if(cursor!=null) {
            cursor.close();
        }
        close();
        return LastOutstanding;
    }
    public double fnGetStoretblLastOutstanding(String storeID)
    {
        open();
        double LastOutstanding=0.0;
        Cursor cursor=db.rawQuery("Select Outstanding from tblLastOutstanding WHERE StoreID='"+storeID+"'",null);

        if(cursor.getCount()>0)
        {
            if(cursor.moveToFirst())
            {
                LastOutstanding=Double.parseDouble(cursor.getString(0));
            }
        }
        if(cursor!=null) {
            cursor.close();
        }
        close();
        return LastOutstanding;
    }
    public void Delete_tblLastOutstanding_for_refreshData()
    {
        db.execSQL("DELETE FROM tblLastOutstanding");
        db.execSQL("DELETE FROM tblInvoiceLastVisitDetails");

    }
    public long savetblLastOutstanding(String StoreID,double Outstanding,double AmtOverdue)
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", StoreID);
        initialValues.put("Outstanding", Outstanding);
        initialValues.put("AmtOverdue", AmtOverdue);
        return db.insert(DATABASE_TABLE_tblLastOutstanding, null, initialValues);
    }

    public long savetblInvoiceLastVisitDetails(String StoreID,String InvCode,String InvDate,String OutstandingAmt,String AmtOverdue)
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", StoreID);
        initialValues.put("InvCode", InvCode);
        initialValues.put("InvDate", InvDate);
        initialValues.put("OutstandingAmt", OutstandingAmt);
        initialValues.put("AmtOverdue", AmtOverdue);
        return db.insert(DATABASE_TABLE_tblInvoiceLastVisitDetails, null, initialValues);
    }

    public Double fetch_Store_InvValAmount(String StoreID)
    {
//tv_GrossInvVal
        open();
        Double dblMaxCollectionAmount = 0.0;
        Cursor	cursor = db.rawQuery("SELECT tblInvoice.InvoiceVal from tblInvoice WHERE tblInvoice.StoreID='"+StoreID+"'", null); //order by AutoIdOutlet Desc
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        //hmapCatgry.put(cursor.getString(0).toString(),cursor.getString(1).toString() + "( Order Value:-"+cursor.getString(2).toString()+")");
                        dblMaxCollectionAmount=Double.parseDouble(cursor.getString(0));

                        cursor.moveToNext();
                    }
                }

            }

            else
            {
                dblMaxCollectionAmount=0.0;
            }
            return dblMaxCollectionAmount;
        }
        finally
        {
            if(cursor!=null) {
                cursor.close();
            }
            close();
        }
    }

    public LinkedHashMap<String, String> fnGeStoreListAllBelowHundredMeter()
    {
        LinkedHashMap<String, String> hmapStoreLisMstr= new LinkedHashMap<>();
        open();

        try {
            Cursor cursor=null;

            cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode from tblPreAddedStores Where  DistanceNear < 100", null);



            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapStoreLisMstr.put((String) cursor.getString(0),(String) cursor.getString(1) +"~"+(String) cursor.getString(2) +"~"+(String) cursor.getString(3));
                        cursor.moveToNext();
                    }
                }
            }

        }
        catch (Exception e) {

        }
        finally
        {

            close();
            return hmapStoreLisMstr;
        }
    }

    public LinkedHashMap<String, String> fnGeStoreLatAndLongBasedOnStoreID(String StoreID) {
        LinkedHashMap<String, String> hmapStoreLisMstr = new LinkedHashMap<>();
        open();

        try {
            Cursor cursor = null;

            cursor = db.rawQuery("SELECT StoreID,LatCode,LongCode from tblPreAddedStores Where  StoreID='" + StoreID + "'", null);


            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapStoreLisMstr.put((String) cursor.getString(0), (String) cursor.getString(1) + "~" + (String) cursor.getString(2));
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {

        } finally {

            close();
            return hmapStoreLisMstr;
        }
    }

    public void deleteStoreList()
    {
        open();
        db.execSQL("DELETE FROM tblStoreList");
        close();
    }

    //new added
    public HashMap<String, String> checkForStoreIdSstatStrMapping()
    {
        open();
        Cursor cursor=db.rawQuery("Select StoreID,Sstat from tblPreAddedStores where Sstat in(1,3,4,5,6)",null);
        HashMap<String, String> hmapStoreIDSstat= new HashMap<>();
        if(cursor.getCount()>0)
        {
            if(cursor.moveToFirst())
            {
                for(int index=0;index<cursor.getCount();index++)
                {
                    hmapStoreIDSstat.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }
        close();
        return hmapStoreIDSstat;
    }

    //added on 20 April,18
    public LinkedHashMap<String,String> fetchSalesTargetDbrAndMinVal()
    {
        LinkedHashMap<String,String> hmap_Dbr=new LinkedHashMap<>();
        open();
        Cursor cursor=null;
        try
        {
            cursor=db.rawQuery("Select distinct TargetLevelNodeID,TargetLevelNodeType,PrdNodeID,PrdNodeType,targetValue from " +
                    "tblSalesAreaTargetDetail where PrdNodeID=0 and PrdNodeType=0",null);
            if(cursor.getCount()>0)
            {
                if(cursor.moveToFirst())
                {
                    for(int i=0;i<cursor.getCount();i++)
                    {
                        hmap_Dbr.put(cursor.getString(0)+"^"+cursor.getString(1)+"^"+
                                cursor.getString(2)+"^"+cursor.getString(3),cursor.getString(4));
                        System.out.println("DISTINCT MIn DATA Target..."+cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
                        cursor.moveToNext();
                    }
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if(cursor != null)
            {
                cursor.close();
            }
            close();
            return  hmap_Dbr;
        }
    }

    public LinkedHashMap<String,String> fetchSalesTargetDbrIDAndName()
    {
        LinkedHashMap<String,String> hmap_Dbr=new LinkedHashMap<>();
        open();
        Cursor cursor=null;
        try
        {
            cursor=db.rawQuery("Select distinct TargetLevelNodeID,TargetLevelNodeType,TargetLevelName from tblSalesAreaTargetDetail",null);
            if(cursor.getCount()>0)
            {
                if(cursor.moveToFirst())
                {
                    for(int i=0;i<cursor.getCount();i++)
                    {
                        hmap_Dbr.put(cursor.getString(0)+"^"+cursor.getString(1),cursor.getString(2));
                        System.out.println("Target Dbr Data..."+cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
                        cursor.moveToNext();
                    }
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if(cursor != null)
            {
                cursor.close();
            }
            close();
            return  hmap_Dbr;
        }
    }

    public String fnGetDistinctSchIdsAgainstStoreForDelete(String StoreID,String ProductIdOnClicked,int schId)
    {
        open();
        Cursor cursor = db.rawQuery("SELECT schSlbRowId,SchTypeId FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and  schId="+schId+" and BenSubBucketType in(1,5,2,6,3,7,10)", null);
        String chkI = "";
        try {
            if(cursor.getCount()>0)
            {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        if(cursor.getString(0)!=null && cursor.getString(1)!=null)
                        {
                            chkI = cursor.getString(0)+"^"+cursor.getString(1);
                        }
                        cursor.moveToNext();
                    }
                }
            }

        } finally {
            if(cursor!=null)
            {
                cursor.close();
            }

            close();
        }
        return chkI;
    }

    public LinkedHashMap<Integer, String> fetch_Reason_List_for_option()
    {
        open();
        LinkedHashMap<Integer, String> hmapCatgry = new LinkedHashMap<Integer, String>();
        Cursor cursor = db.rawQuery("SELECT ReasonId,ReasonDescr FROM tblNoVisitReasonMaster where flgSOApplicable='"+1+"' and flgNoVisitOption='"+0+"' and flgDelayedReason='"+0+"' and ReasonId<>'15' order by SeqNo asc",null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        hmapCatgry.put(Integer.parseInt(cursor.getString(0).toString()),cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }

            }

            else
            {
                // hmapCatgry.put(0, "No Reason");
            }
            return hmapCatgry;
        }
        finally
        {
            cursor.close();
            close();
        }
    }

    public ArrayList<String> fetch_Text_To_Show()
    {
        open();
        ArrayList<String> listTxtBxToShow = new ArrayList<>();
        Cursor cursor = db.rawQuery("SELECT ReasonId FROM tblNoVisitReasonMaster where flgSOApplicable='"+1+"' and FlgToShowTextBox='"+1+"' order by SeqNo asc",null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        listTxtBxToShow.add(cursor.getString(0).toString().trim());
                        cursor.moveToNext();
                    }
                }

            }

            else
            {
                // hmapCatgry.put(0, "No Reason");
            }
            return listTxtBxToShow;
        }
        finally
        {
            cursor.close();
            close();
        }
    }

    public LinkedHashMap<Integer, String> fetch_NoWorking_Reason_List()
    {
        open();
        LinkedHashMap<Integer, String> hmapCatgry = new LinkedHashMap<Integer, String>();
        Cursor cursor = db.rawQuery("SELECT ReasonId,ReasonDescr FROM tblNoVisitReasonMaster where flgSOApplicable='"+1+"' and flgNoVisitOption="+1+" and flgDelayedReason='"+0+"'" ,null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    // hmapCatgry.put("Select Reason", "0");
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        hmapCatgry.put(Integer.parseInt(cursor.getString(0).toString()),cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }

            }

            else
            {
                // hmapCatgry.put(0, "No Reason");
            }
            return hmapCatgry;
        }
        finally
        {
            cursor.close();
            close();
        }
    }
    public void updatetblAttandanceDetails(String OptionID,String OptionDesc,String ReasonID,String ReasonDesc,
                                           String Comment,String DistributorId,String DistributorNodeType,String DistributorName,String serverTime,String submitTime,String rsnForLate,String otherReasonForLate )
    {
        open();
        try {


            ContentValues values=new ContentValues();
            values.put("OptionID",OptionID.trim());
            values.put("OptionDesc",OptionDesc.trim());
            values.put("ReasonID",ReasonID.trim());
            values.put("ReasonDesc",ReasonDesc);
            values.put("Comment",Comment);

            values.put("DistributorId",DistributorId.trim());
            values.put("DistributorNodeType",DistributorNodeType);
            values.put("DistributorName",DistributorName);

            values.put("ServerTimeValidation",serverTime);
            values.put("SubmitTime",submitTime);
            values.put("ReasonForLate",rsnForLate);
            values.put("OtherReasonForLate",otherReasonForLate);

            db.update(TABLE_tblAttandanceDetails,values,"",new String[]{});
        }catch(SQLiteException exception)
        {
            System.out.println();
        }finally
        {
            close();
        }

    }
    public long savetblAttandanceDetails(String AttandanceTime,String PersonNodeID,String  PersonNodeType ,String PersonName ,
                                         String OptionID,String OptionDesc ,String ReasonID,String ReasonDesc,
                                         String Address,
                                         String PinCode,String City,String State,String fnLati,
                                         String fnLongi ,String fnAccuracy ,String flgLocNotFound,String fnAccurateProvider,
                                         String AllProvidersLocation ,String fnAddress ,String GpsLat ,String  GpsLong ,
                                         String GpsAccuracy ,String GpsAddress ,String NetwLat ,String NetwLong ,
                                         String NetwAccuracy ,String  NetwAddress ,String  FusedLat ,String  FusedLong ,
                                         String FusedAccuracy ,String  FusedAddress ,String FusedLocationLatitudeWithFirstAttempt,
                                         String FusedLocationLongitudeWithFirstAttempt ,String FusedLocationAccuracyWithFirstAttempt,
                                         int Sstat,int flgLocationServicesOnOff,int flgGPSOnOff,int flgNetworkOnOff,
                                         int flgFusedOnOff,int flgInternetOnOffWhileLocationTracking,int flgRestart
            ,String CityId,String StateId,String MapAddress,String MapCity,String MapPinCode,String MapState)
    {
        try
        {
            db.execSQL("DELETE FROM tblAttandanceDetails");
        }
        catch(Exception e)
        {

        }

        ContentValues initialValues = new ContentValues();
        String aa= fnGetPersonNodeIDAndPersonNodeType();


        initialValues.put("AttandanceTime", AttandanceTime.trim());
        initialValues.put("PersonNodeID", aa.split(Pattern.quote("^"))[0].trim());
        initialValues.put("PersonNodeType", aa.split(Pattern.quote("^"))[1].trim());

        initialValues.put("OptionID", OptionID.trim());
        initialValues.put("OptionDesc", OptionDesc.trim());
        initialValues.put("ReasonID", ReasonID.trim());
        initialValues.put("ReasonDesc", ReasonDesc.trim());

        initialValues.put("Address", Address.trim());
        initialValues.put("PinCode", PinCode.trim());
        initialValues.put("City", City.trim());
        initialValues.put("State", State.trim());

        initialValues.put("fnLati", fnLati.trim());
        initialValues.put("fnLongi", fnLongi.trim());
        initialValues.put("fnAccuracy", fnAccuracy.trim());
        initialValues.put("flgLocNotFound", flgLocNotFound.trim());
        initialValues.put("fnAccurateProvider", fnAccurateProvider.trim());
        initialValues.put("AllProvidersLocation", AllProvidersLocation.trim());
        initialValues.put("fnAddress", fnAddress.trim());

        initialValues.put("GpsLat", GpsLat.trim());
        initialValues.put("GpsLong", GpsLong.trim());
        initialValues.put("GpsAccuracy", GpsAccuracy.trim());
        initialValues.put("GpsAddress", GpsAddress.trim());

        initialValues.put("NetwLat", NetwLat.trim());
        initialValues.put("NetwLong", NetwLong.trim());
        initialValues.put("NetwAccuracy", NetwAccuracy.trim());
        initialValues.put("NetwAddress", NetwAddress.trim());

        initialValues.put("FusedLat", FusedLat.trim());
        initialValues.put("FusedLong", FusedLong.trim());
        initialValues.put("FusedAccuracy", FusedAccuracy.trim());
        initialValues.put("FusedAddress", FusedAddress.trim());

        initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt.trim());
        initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt.trim());
        initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt.trim());
        initialValues.put("Sstat", Sstat);

        initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
        initialValues.put("flgGPSOnOff", flgGPSOnOff);
        initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
        initialValues.put("flgFusedOnOff", flgFusedOnOff);
        initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
        initialValues.put("flgRestart", flgRestart);

        initialValues.put("MapAddress", MapAddress);
        initialValues.put("MapCity", MapCity);
        initialValues.put("MapPinCode", MapPinCode);
        initialValues.put("MapState", MapState);
        initialValues.put("CityId", CityId);
        initialValues.put("StateId", StateId);


        initialValues.put("DistributorId", "0");
        initialValues.put("DistributorNodeType", "0");
        initialValues.put("DistributorName", "NA");


        return db.insert(TABLE_tblAttandanceDetails, null, initialValues);
    }
    public void fnSettblAttandanceDetails() {

        try
        {

            open();

            db.execSQL("UPDATE tblAttandanceDetails SET Sstat= 4" );



        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
        finally {
            close();
        }

    }
    public void UpdateSstatSurvey(String StoreID) {

        try
        {

            open();

            db.execSQL("UPDATE tblSurveyData SET Sstat= 4 where StoreID='"+StoreID+"' " );



        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
        finally {
            close();
        }

    }

    public String fnGetPersonNodeIDAndPersonNodeType()
    {
        String SONodeIdAndNodeType="0^0";


        Cursor cursor=db.rawQuery("Select PersonNodeID,PersonNodeType from tblUserAuthenticationMstr", null);

        if(cursor.getCount()>0)
        {
            if(cursor.moveToFirst())
            {
                SONodeIdAndNodeType=cursor.getString(0)+"^"+cursor.getString(1);
            }
        }

        return SONodeIdAndNodeType;
    }
    public int FetchflgPersonTodaysAtt()
    {
        int CatId=0;

        Cursor cursor = db.rawQuery("SELECT flgPersonTodaysAtt from tblUserAuthenticationMstr", null);
        try {

            if (cursor.moveToFirst())
            {

                for (int i = 0; i <= (cursor.getCount() - 1); i++)
                {

                    String abc =(String) cursor.getString(0).toString();
                    CatId=Integer.parseInt(abc);
                    cursor.moveToNext();
                }

            }
            return CatId;
        } finally {
            cursor.close();
        }

    }
    int fntableExists(String tableName)
    {
        if (tableName == null)
        {
            return 0;
        }
        int count=0;
        Cursor cursor=null;
        open();
        try {

            cursor = db.rawQuery("SELECT COUNT(*) FROM sqlite_master WHERE type = ? AND name = ?", new String[] {"table", tableName});
            if (cursor.moveToFirst())
            {
                count = cursor.getInt(0);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if(cursor!=null) {
                cursor.close();
            }
            close();
        }

        return count;
    }

    public String FetchPersonNodeIDAndPersonNodeType(String CoverageAreaNodeID,String CoverageAreaNodeType)
    {open();
        String abc="0^0";
        Cursor cursor = db.rawQuery("SELECT PersonNodeID,PersonNodeType from tblDSRCoverageMaster where CoverageAreaNodeID='"+CoverageAreaNodeID.trim()+"' and CoverageAreaNodeType='"+CoverageAreaNodeType.trim()+"'", null);

        //Cursor cursor = db.rawQuery("SELECT PersonNodeID,PersonNodeType from tblUserAuthenticationMstr", null);
        try {

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++)
                {

                    abc =(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString();
                    cursor.moveToNext();
                }

            }
            return abc;
        } finally {
            cursor.close();
            close();
        }

    }
    public void deleteDsrLocationDetails(String DSRId,String DSRNodeType)
    {
        try {
            db.execSQL("DELETE FROM tblDsrLocationDetails WHERE DSRId='"+ DSRId + "' AND DSRNodeType='"+ DSRNodeType + "'");// and sectionID="+sectionID
        }
        catch (Exception e)
        {

        }
    }



    public int fnGetRouteExistOrNot(int CoverageAreaNodeID,int CoverageAreaNodeType)
    {

        int strStore = 0;
        open();

        Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblRouteMstr WHERE CoverageAreaNodeID='"+CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CoverageAreaNodeType+"'", null);
        try {
            if (cursor2.moveToFirst())
            {

                for (int i = 0; i < cursor2.getCount(); i++)
                {
                    strStore = Integer.parseInt(cursor2.getString(0));
                    cursor2.moveToNext();

                }

            }
            return strStore;
        } finally {
            cursor2.close();
            close();
        }

    }
    public Boolean checkIfRouteExist()
    {
        open();
        Boolean isRoute=false;
        Cursor cur=null;
        try {
            cur=db.rawQuery("Select * from tblRouteMstr",null);
            if(cur.getCount()>0)
            {
                isRoute=true;
            }
        }catch(SQLiteException exception)
        {
            exception.printStackTrace();
        }
        finally
        {
            if(cur!=null)
            {
                cur.close();
            }
            close();
            return isRoute;
        }
    }
    public LinkedHashMap<String, String> fngetStoreBasicDetails(String StoreID)
    {
        LinkedHashMap<String, String> hmapStoreBasicDetails=new LinkedHashMap<String, String>();//=null;
        Cursor cur=null;
        open();
        try {


            cur=db.rawQuery("Select ifnull(StoreName,'NA'),ifnull(OwnerName,'NA'),ifnull(StoreContactNo,'NA'),ifnull(StoreAddress,'NA'),ifnull(StoreCatType,'NA') from tblStoreList where StoreID = '"+StoreID+"'", null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    // System.out.println("System Value :"+cur.getString(0)+"="+ cur.getString(1)+"~"+cur.getString(2));
                    hmapStoreBasicDetails.put("StoreName", cur.getString(0));
                    hmapStoreBasicDetails.put("OwnerName", cur.getString(1));
                    hmapStoreBasicDetails.put("StoreContactNo", cur.getString(2));
                    hmapStoreBasicDetails.put("StoreAddress", cur.getString(3));
                    hmapStoreBasicDetails.put("StoreCatType", cur.getString(4));

                }

            }

        }
        catch(Exception ex)
        {
            hmapStoreBasicDetails.put("StoreName", "NA");
            hmapStoreBasicDetails.put("OwnerName", "NA");
            hmapStoreBasicDetails.put("StoreContactNo","NA");
            hmapStoreBasicDetails.put("StoreAddress", "NA");
            hmapStoreBasicDetails.put("StoreCatType", "NA");
        }
        finally {
            if (cur != null) {
                cur.close();
            }
            close();
        }
        return hmapStoreBasicDetails;
    }
    public void deletetblProductListLastVisitStockOrOrderMstr()
    {
        db.execSQL("DELETE FROM tblProductListLastVisitStockOrOrderMstr");

    }

    public LinkedHashMap<String,String>   fetchProductListLastvisitAndOrderBasis(String StoreID){
//tblActualVisitStock (ProductID text null,Stock text null);";
        LinkedHashMap<String,String> hmapData=new LinkedHashMap<>();
        Cursor cursor=null;
        open();
        try {
            cursor = db.rawQuery("SELECT  Distinct tblProductListLastVisitStockOrOrderMstr.PrdID,tblProductList.ProductShortName from tblProductListLastVisitStockOrOrderMstr inner join tblProductList on tblProductListLastVisitStockOrOrderMstr.PrdID=tblProductList.ProductID   where tblProductListLastVisitStockOrOrderMstr.StoreID='"+StoreID+"'", null);
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {

                        hmapData.put(cursor.getString(0),cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
        }
        catch (Exception e){
            System.out.println(e);
        }finally {
            if(cursor !=null){
                cursor.close();
            }

            close();
            return hmapData;
        }
    }
    public void savetblProductListLastVisitStockOrOrderMstr(String StoreID,String PrdID)
    {
//(tblActualVisitStock (storeID text null,ProductID text null,Stock text null,Sstat integer null);";

        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID",StoreID);
        initialValues.put("PrdID", PrdID.trim());



        db.insert(DATABASE_TABLE_tblProductListLastVisitStockOrOrderMstr, null, initialValues);

    }
    public LinkedHashMap<String,String> fetchProductAndDisplayUnitDataForActualVisit(){
//"create table tblProductList(CategoryID text  null,ProductID text  null, ProductShortName text  null,
// DisplayUnit text null, CalculateKilo real  null,ProductMRP real null, ProductRLP real null, ProductTaxAmount real null,
// KGLiter string null,RetMarginPer real null,VatTax real null,
// StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,
// StoreCatNodeId int null,SearchField text null,ManufacturerID int null);";
        LinkedHashMap<String,String> hmapData=new LinkedHashMap<>();
        Cursor cursor=null;

        try {
            cursor = db.rawQuery("SELECT ProductID,DisplayUnit from tblProductList", null);
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {

                        hmapData.put(cursor.getString(0),cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if(cursor !=null)
                cursor.close();
            return hmapData;
        }
    }
    public void insertImageFinalSubmit(String StoreID,String OrderPDAID,String imageName,String clkdDateTime,String InstructionText,int sStat)
    {
        open();
        ContentValues values=new ContentValues();
        values.put("StoreID",StoreID);
        values.put("OrderPDAID",OrderPDAID);
        values.put("PhotoName",imageName);
        values.put("InstructionText",InstructionText);
        values.put("ClickedDateTime",clkdDateTime);
        values.put("Sstat",sStat);
        db.insert(TABLE_tblMerchandisingInstructionDetails_Define,null,values);
        close();
    }
    public void UpdatetblMerchandisingInstructionDetails(String sID, int flag2set)
    {
        try
        {
            db.execSQL("UPDATE tblMerchandisingInstructionDetails SET Sstat=5 where Sstat="+ 3);
        }
        catch (Exception ex)
        {
            Log.e(TAG, ex.toString());
        }
    }
    public void Delete_tblMerchandisingInstructionDetails(String StoreID,String OrderPDAID)
    {
        open();
        db.execSQL("DELETE FROM tblMerchandisingInstructionDetails where StoreID='"+StoreID+"' and OrderPDAID='"+OrderPDAID+"' ");
        close();
    }
}

